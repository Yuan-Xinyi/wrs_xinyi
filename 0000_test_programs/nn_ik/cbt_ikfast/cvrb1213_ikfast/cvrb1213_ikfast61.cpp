/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2025-06-26 07:31:38.274384
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[0]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((0.15)*x0);
x13=((0.16)*x3);
x14=((0.59)*x2);
x15=((0.16)*x0);
x16=((0.71)*x2);
x17=((1.0)*x0);
x18=((1.0)*x2);
x19=((0.59)*x3);
x20=((0.15)*x3);
x21=(x5*x7);
x22=(x1*x5);
x23=(x4*x5);
x24=(x2*x4);
x25=((-1.0)*x9);
x26=(x0*x1);
x27=(x1*x2);
x28=(x6*x8);
x29=(x3*x4);
x30=(x5*x6);
x31=(x17*x7);
x32=((1.0)*x1*x3);
x33=((((-1.0)*x32))+x24);
x34=(x27+x29);
x35=(x33*x7);
x36=(x34*x8);
x37=(((x0*x24))+(((-1.0)*x1*x17*x3)));
x38=(((x23*x3))+((x2*x22)));
x39=(((x22*x3))+(((-1.0)*x18*x23)));
x40=(x33*x6*x9);
x41=(x17*(((((-1.0)*x27))+(((-1.0)*x29)))));
x42=(x39*x8);
x43=(x38*x6);
x44=(x37*x8);
x45=(x41*x6);
x46=(((x0*x6))+((x38*x7)));
x47=((((-1.0)*x31))+x43);
x48=(((x41*x7))+x30);
x49=(x47*x9);
x50=((((-1.0)*x21))+x45);
eerot[0]=(((x10*x48))+((x11*((((x50*x9))+x44)))));
eerot[1]=(((x8*(((((-1.0)*x45))+(((1.0)*x21))))))+((x37*x9)));
eerot[2]=(((x10*(((((-1.0)*x44))+((x25*x50))))))+((x11*x48)));
IkReal x51=((1.0)*x12);
eetrans[0]=(((x0*x16))+((x19*x26))+((x9*(((((-1.0)*x15*x24))+((x13*x26))))))+((x8*(((((0.16)*x45))+(((-0.16)*x21))))))+(((0.15)*x30))+(((-0.05)*x5))+(((-1.0)*x0*x14*x4))+((x7*(((((-1.0)*x27*x51))+(((-1.0)*x29*x51)))))));
eerot[3]=(((x11*((x49+x42))))+((x10*x46)));
eerot[4]=(((x8*(((((-1.0)*x43))+x31))))+((x39*x9)));
eerot[5]=(((x11*x46))+((x10*(((((-1.0)*x42))+(((-1.0)*x49)))))));
IkReal x52=((1.0)*x22);
eetrans[1]=(((x9*(((((-1.0)*x13*x52))+(((0.16)*x2*x23))))))+(((-1.0)*x19*x52))+(((-1.0)*x16*x5))+((x8*(((((0.16)*x43))+(((-1.0)*x15*x7))))))+((x14*x23))+(((-0.05)*x0))+((x12*x6))+((x7*(((((0.15)*x2*x22))+((x20*x23)))))));
eerot[6]=(((x10*x35))+((x11*((x36+x40)))));
eerot[7]=(((x28*(((((-1.0)*x18*x4))+x32))))+((x34*x9)));
eerot[8]=(((x11*x35))+((x10*(((((-1.0)*x36))+((x25*x33*x6)))))));
IkReal x53=((1.0)*x13);
IkReal x54=((1.0)*x1);
eetrans[2]=((0.21)+(((-1.0)*x14*x54))+((x28*(((((-1.0)*x1*x53))+(((0.16)*x24))))))+((x9*(((((-0.16)*x27))+(((-1.0)*x4*x53))))))+((x7*(((((-1.0)*x20*x54))+(((0.15)*x24))))))+(((-1.0)*x19*x4))+(((0.71)*x3)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r02);
new_r02=r01;
new_px=((((0.16)*r01))+px);
new_r10=r10;
new_r11=((-1.0)*r12);
new_r12=r11;
new_py=((((0.16)*r11))+py);
new_r20=r20;
new_r21=((-1.0)*r22);
new_r22=r21;
new_pz=((-0.21)+(((0.16)*r21))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x55=((1.0)*px);
IkReal x56=((1.0)*pz);
IkReal x57=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x57))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x56)));
rxp0_2=((((-1.0)*r10*x55))+((py*r00)));
rxp1_0=((((-1.0)*r21*x57))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x56)));
rxp1_2=((((-1.0)*r11*x55))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x57)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x56)));
rxp2_2=((((-1.0)*r12*x55))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x58=((30.0)*npy);
IkReal x59=((59.0)*npz);
IkReal x60=((15.0)*npx);
IkReal x61=((50.0)*pp);
IkReal x62=((0.05)*r12);
IkReal x63=((0.15)*r21);
IkReal x64=((1.0)*rxp2_2);
IkReal x65=((0.3)*r20);
IkReal x66=((118.0)*npy);
IkReal x67=((236.0)*npx);
IkReal x68=((2.0)*rxp1_2);
IkReal x69=((0.1)*r11);
IkReal x70=((0.3)*r22);
IkReal x71=((4.0)*rxp0_2);
IkReal x72=((0.2)*r10);
IkReal x73=((0.1)*r01);
IkReal x74=((0.05)*r02);
IkReal x75=((-0.05)*r02);
IkReal x76=((-118.0)*npy);
IkReal x77=((-0.1)*r01);
IkReal x78=((-0.2)*r00);
IkReal x79=((-0.3)*r20);
IkReal x80=(rxp2_2+x63);
IkReal x81=((-6.8)+x61);
IkReal x82=(x62+x63);
IkReal x83=(x59+x60);
IkReal x84=(x70+x68);
IkReal x85=(x59+x81+(((-1.0)*x60)));
IkReal x86=(x81+(((-1.0)*x83)));
IkReal x87=(x60+x81+(((-1.0)*x59)));
IkReal x88=(x83+x81);
op[0]=x85;
op[1]=x85;
op[2]=x58;
op[3]=x58;
op[4]=x88;
op[5]=x88;
op[6]=(x82+(((-1.0)*x64)));
op[7]=x75;
op[8]=x65;
op[9]=0;
op[10]=(x62+(((-1.0)*x63))+(((-1.0)*x64)));
op[11]=x75;
op[12]=x75;
op[13]=(x63+(((-1.0)*x62))+(((-1.0)*x64)));
op[14]=0;
op[15]=x65;
op[16]=x75;
op[17]=((((-1.0)*x64))+(((-1.0)*x82)));
op[18]=0;
op[19]=x85;
op[20]=0;
op[21]=x58;
op[22]=0;
op[23]=x88;
op[24]=x66;
op[25]=x66;
op[26]=x67;
op[27]=x67;
op[28]=x76;
op[29]=x76;
op[30]=(x69+(((-1.0)*x84)));
op[31]=x77;
op[32]=((((-1.0)*x71))+x72);
op[33]=x78;
op[34]=((((-1.0)*x70))+x68+(((-1.0)*x69)));
op[35]=x73;
op[36]=x77;
op[37]=((((-1.0)*x69))+(((-1.0)*x84)));
op[38]=x78;
op[39]=((((-1.0)*x71))+(((-1.0)*x72)));
op[40]=x73;
op[41]=((((-1.0)*x70))+x68+x69);
op[42]=0;
op[43]=x66;
op[44]=0;
op[45]=x67;
op[46]=0;
op[47]=x76;
op[48]=x86;
op[49]=x86;
op[50]=x58;
op[51]=x58;
op[52]=x87;
op[53]=x87;
op[54]=(rxp2_2+(((-1.0)*x82)));
op[55]=x74;
op[56]=x79;
op[57]=0;
op[58]=(x80+(((-1.0)*x62)));
op[59]=x74;
op[60]=x74;
op[61]=(rxp2_2+x62+(((-1.0)*x63)));
op[62]=0;
op[63]=x79;
op[64]=x74;
op[65]=(x62+x80);
op[66]=0;
op[67]=x86;
op[68]=0;
op[69]=x58;
op[70]=0;
op[71]=x87;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x89=htj4*htj4;
CheckValue<IkReal> x90=IKPowWithIntegerCheck(((1.0)+x89),-1);
if(!x90.valid){
continue;
}
cj4array[numsolutions]=((x90.value)*(((1.0)+(((-1.0)*x89)))));
CheckValue<IkReal> x91=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x91.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x91.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x92=htj5*htj5;
CheckValue<IkReal> x93=IKPowWithIntegerCheck(((1.0)+x92),-1);
if(!x93.valid){
continue;
}
cj5array[numsolutions]=((x93.value)*(((1.0)+(((-1.0)*x92)))));
CheckValue<IkReal> x94=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x94.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x94.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x95=htj0*htj0;
CheckValue<IkReal> x96=IKPowWithIntegerCheck(((1.0)+x95),-1);
if(!x96.valid){
continue;
}
cj0array[numsolutions]=((x96.value)*(((1.0)+(((-1.0)*x95)))));
CheckValue<IkReal> x97=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x97.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x97.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x98=(cj0*r21);
IkReal x99=((1.0)*cj5);
IkReal x100=(cj0*r20);
IkReal x101=(((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)));
j3eval[0]=x101;
j3eval[1]=IKsign(x101);
j3eval[2]=((IKabs(((((-1.0)*cj4*sj5*x100))+((cj0*r22*sj4))+(((-1.0)*cj4*x98*x99)))))+(IKabs(((((-1.0)*x100*x99))+((sj5*x98))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x102=(sj0*sj5);
IkReal x103=((1.0)*sj4);
IkReal x104=((1.0)*r20);
IkReal x105=(cj5*sj0);
IkReal x106=((1.0)*cj4);
IkReal x107=((((-1.0)*cj5*r01*x103))+(((-1.0)*r00*sj5*x103))+(((-1.0)*r02*x106)));
j3eval[0]=x107;
j3eval[1]=IKsign(x107);
j3eval[2]=((IKabs(((((-1.0)*x104*x105))+((r21*x102)))))+(IKabs((((r22*sj0*sj4))+(((-1.0)*r21*x105*x106))+(((-1.0)*cj4*x102*x104))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x108=((1.0)*sj4);
IkReal x109=((((-1.0)*cj5*r21*x108))+(((-1.0)*cj4*r22))+(((-1.0)*r20*sj5*x108)));
j3eval[0]=x109;
j3eval[1]=IKsign(x109);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x110=((1.0)*r20);
IkReal x111=(((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)));
j3eval[0]=x111;
j3eval[1]=IKsign(x111);
j3eval[2]=((IKabs((((r22*sj4))+(((-1.0)*cj4*sj5*x110))+(((-1.0)*cj4*cj5*r21)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x110))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x112=((1.0)*cj5);
IkReal x113=((1.0)*sj5);
IkReal x114=((((-1.0)*r20*sj4*x113))+(((-1.0)*r21*sj4*x112))+(((-1.0)*cj4*r22)));
j3eval[0]=x114;
j3eval[1]=IKsign(x114);
j3eval[2]=((IKabs(((((-1.0)*cj4*r10*x113))+(((-1.0)*cj4*r11*x112))+((r12*sj4)))))+(IKabs(((((-1.0)*r10*x112))+((r11*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x115=cj4*cj4;
IkReal x116=r00*r00;
IkReal x117=cj5*cj5;
IkReal x118=r01*r01;
IkReal x119=r02*r02;
IkReal x120=(r00*sj5);
IkReal x121=((1.0)*r01);
IkReal x122=((2.0)*cj5*r01);
IkReal x123=(cj4*r02*sj4);
IkReal x124=((1.0)*x117);
IkReal x125=(x115*x116);
IkReal x126=((((-1.0)*x118*x124))+(((-1.0)*x120*x122))+(((-1.0)*x115*x119))+((x115*x120*x122))+(((-2.0)*x120*x123))+x125+x119+x118+(((-1.0)*x124*x125))+((x115*x117*x118))+((x116*x117))+(((-1.0)*x122*x123)));
j3eval[0]=x126;
j3eval[1]=((IKabs(((((-1.0)*cj4*x120))+(((-1.0)*cj4*cj5*x121))+((r02*sj4)))))+(IKabs(((((-1.0)*sj5*x121))+((cj5*r00))))));
j3eval[2]=IKsign(x126);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x127=cj4*cj4;
IkReal x128=r00*r00;
IkReal x129=cj5*cj5;
IkReal x130=r01*r01;
IkReal x131=r02*r02;
IkReal x132=(r00*sj5);
IkReal x133=((1.0)*r01);
IkReal x134=((2.0)*cj5*r01);
IkReal x135=(cj4*r02*sj4);
IkReal x136=((1.0)*x129);
IkReal x137=(x127*x128);
CheckValue<IkReal> x138=IKPowWithIntegerCheck(IKsign(((((-2.0)*x132*x135))+(((-1.0)*x134*x135))+(((-1.0)*x127*x131))+((x127*x132*x134))+((x127*x129*x130))+x137+x131+x130+(((-1.0)*x136*x137))+(((-1.0)*x132*x134))+((x128*x129))+(((-1.0)*x130*x136)))),-1);
if(!x138.valid){
continue;
}
CheckValue<IkReal> x139 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x132))+(((-1.0)*cj4*cj5*x133))+((r02*sj4)))),IkReal(((((-1.0)*sj5*x133))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x139.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x138.value)))+(x139.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x140=IKsin(j3);
IkReal x141=IKcos(j3);
IkReal x142=(cj4*cj5);
IkReal x143=(cj5*r00);
IkReal x144=(r02*sj4);
IkReal x145=((1.0)*x141);
IkReal x146=(r01*x140);
IkReal x147=((1.0)*x140);
IkReal x148=(sj5*x141);
IkReal x149=(cj4*sj5*x140);
evalcond[0]=((((-1.0)*r22*sj4*x147))+((r20*x149))+((r21*x140*x142))+((r21*x148))+(((-1.0)*cj5*r20*x145)));
evalcond[1]=((((-1.0)*cj5*r10*x145))+(((-1.0)*r12*sj4*x147))+((r11*x148))+((r10*x149))+((r11*x140*x142)));
evalcond[2]=((1.0)+((x142*x146))+(((-1.0)*x143*x145))+((r01*x148))+((r00*x149))+(((-1.0)*x144*x147)));
evalcond[3]=((((-1.0)*x143*x147))+(((-1.0)*cj4*r00*sj5*x145))+(((-1.0)*r01*x142*x145))+((x141*x144))+((sj5*x146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x150=((0.211267605633803)*sj5);
IkReal x151=((0.211267605633803)*cj5);
IkReal x152=((0.830985915492958)*cj4);
IkReal x153=((0.830985915492958)*sj4*sj5);
IkReal x154=((0.830985915492958)*cj5*sj4);
if( IKabs(((((-1.40845070422535)*py))+(((-1.0)*r10*x153))+((r10*x151))+(((-1.0)*r12*x152))+(((-1.0)*r11*x154))+(((-1.0)*r11*x150)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x153))+((r21*x150))+((r21*x154))+(((1.40845070422535)*pz))+(((-1.0)*r20*x151))+((r22*x152)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.40845070422535)*py))+(((-1.0)*r10*x153))+((r10*x151))+(((-1.0)*r12*x152))+(((-1.0)*r11*x154))+(((-1.0)*r11*x150))))+IKsqr((((r20*x153))+((r21*x150))+((r21*x154))+(((1.40845070422535)*pz))+(((-1.0)*r20*x151))+((r22*x152))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.40845070422535)*py))+(((-1.0)*r10*x153))+((r10*x151))+(((-1.0)*r12*x152))+(((-1.0)*r11*x154))+(((-1.0)*r11*x150))), (((r20*x153))+((r21*x150))+((r21*x154))+(((1.40845070422535)*pz))+(((-1.0)*r20*x151))+((r22*x152))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x155=((1.0)*py);
IkReal x156=((0.15)*sj5);
IkReal x157=(cj5*r10);
IkReal x158=((0.59)*sj4);
IkReal x159=(cj5*r21);
IkReal x160=((0.59)*sj3);
IkReal x161=(cj5*r11);
IkReal x162=(cj5*r20);
IkReal x163=((0.59)*cj4);
IkReal x164=((0.15)*x157);
IkReal x165=((0.71)*(IKsin(j1)));
IkReal x166=(r11*x156);
IkReal x167=((0.15)*x162);
IkReal x168=((0.71)*(IKcos(j1)));
IkReal x169=(r21*x156);
IkReal x170=(cj3*sj5*x163);
IkReal x171=(x168+x167);
IkReal x172=(x166+x165+x155);
evalcond[0]=(((r22*x163))+(((-1.0)*x171))+x169+pz+((r20*sj5*x158))+((x158*x159)));
evalcond[1]=((((-1.0)*r10*sj5*x158))+(((-1.0)*r12*x163))+(((-1.0)*x158*x161))+(((-1.0)*x172))+x164);
evalcond[2]=((((-1.0)*x172))+(((-1.0)*r21*sj5*x160))+((r20*x170))+x164+(((-1.0)*cj3*r22*x158))+((x160*x162))+((cj3*x159*x163)));
evalcond[3]=((((-1.0)*x157*x160))+(((-1.0)*x169))+(((-1.0)*cj3*x161*x163))+x171+(((-1.0)*pz))+(((-1.0)*r10*x170))+((r11*sj5*x160))+((cj3*r12*x158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x173=(cj5*sj4);
IkReal x174=(cj1*cj4);
IkReal x175=((1.0)*sj1);
IkReal x176=(sj4*sj5);
if( IKabs((((r22*x174))+(((-1.0)*r10*x175*x176))+(((-1.0)*r11*x173*x175))+(((-1.0)*cj4*r12*x175))+((cj1*r21*x173))+((cj1*r20*x176)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r10*x176))+((cj1*r11*x173))+((cj4*r22*sj1))+((r20*sj1*x176))+((r21*sj1*x173))+((r12*x174)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x174))+(((-1.0)*r10*x175*x176))+(((-1.0)*r11*x173*x175))+(((-1.0)*cj4*r12*x175))+((cj1*r21*x173))+((cj1*r20*x176))))+IKsqr((((cj1*r10*x176))+((cj1*r11*x173))+((cj4*r22*sj1))+((r20*sj1*x176))+((r21*sj1*x173))+((r12*x174))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x174))+(((-1.0)*r10*x175*x176))+(((-1.0)*r11*x173*x175))+(((-1.0)*cj4*r12*x175))+((cj1*r21*x173))+((cj1*r20*x176))), (((cj1*r10*x176))+((cj1*r11*x173))+((cj4*r22*sj1))+((r20*sj1*x176))+((r21*sj1*x173))+((r12*x174))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x177=IKcos(j2);
IkReal x178=IKsin(j2);
IkReal x179=(r21*sj5);
IkReal x180=((0.15)*cj5);
IkReal x181=((0.59)*sj1);
IkReal x182=(cj3*sj4);
IkReal x183=(r11*sj5);
IkReal x184=((1.0)*cj4);
IkReal x185=(cj5*r21);
IkReal x186=(cj3*sj5);
IkReal x187=((1.0)*sj4);
IkReal x188=(cj5*r11);
IkReal x189=(sj1*x177);
IkReal x190=(cj1*x178);
IkReal x191=(cj1*x177);
IkReal x192=((1.0)*cj5*sj3);
IkReal x193=(sj5*x187);
IkReal x194=(sj1*x178);
IkReal x195=(x190+x189);
evalcond[0]=((((-1.0)*r22*x184))+x195+(((-1.0)*x185*x187))+(((-1.0)*r20*x193)));
evalcond[1]=((((-1.0)*r12*x184))+(((-1.0)*x194))+(((-1.0)*x187*x188))+x191+(((-1.0)*r10*x193)));
evalcond[2]=((((0.71)*cj1))+(((-0.59)*x190))+((r20*x180))+(((-1.0)*x177*x181))+(((-1.0)*pz))+(((-0.15)*x179)));
evalcond[3]=(((x178*x181))+(((-0.59)*x191))+(((-0.71)*sj1))+(((-1.0)*py))+(((-0.15)*x183))+((r10*x180)));
evalcond[4]=((((-1.0)*cj3*x184*x188))+((sj3*x183))+(((-1.0)*r10*x184*x186))+x195+((r12*x182))+(((-1.0)*r10*x192)));
evalcond[5]=((((-1.0)*cj3*x184*x185))+(((-1.0)*r20*x184*x186))+(((-1.0)*x191))+x194+(((-1.0)*r20*x192))+((r22*x182))+((sj3*x179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x196=((1.0)*cj5);
IkReal x197=((1.0)*sj5);
CheckValue<IkReal> x198 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x196)))),IkReal(((((-1.0)*cj4*r10*x197))+(((-1.0)*cj4*r11*x196))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x198.valid){
continue;
}
CheckValue<IkReal> x199=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj4*x197))+(((-1.0)*r21*sj4*x196))+(((-1.0)*cj4*r22)))),-1);
if(!x199.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x198.value)+(((1.5707963267949)*(x199.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x200=IKsin(j3);
IkReal x201=IKcos(j3);
IkReal x202=(cj4*cj5);
IkReal x203=(cj5*r00);
IkReal x204=(r02*sj4);
IkReal x205=((1.0)*x201);
IkReal x206=(r01*x200);
IkReal x207=((1.0)*x200);
IkReal x208=(sj5*x201);
IkReal x209=(cj4*sj5*x200);
evalcond[0]=(((r20*x209))+((r21*x208))+(((-1.0)*cj5*r20*x205))+((r21*x200*x202))+(((-1.0)*r22*sj4*x207)));
evalcond[1]=(((r11*x208))+((r10*x209))+(((-1.0)*r12*sj4*x207))+(((-1.0)*cj5*r10*x205))+((r11*x200*x202)));
evalcond[2]=((1.0)+(((-1.0)*x204*x207))+(((-1.0)*x203*x205))+((r01*x208))+((r00*x209))+((x202*x206)));
evalcond[3]=((((-1.0)*cj4*r00*sj5*x205))+(((-1.0)*x203*x207))+((x201*x204))+(((-1.0)*r01*x202*x205))+((sj5*x206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x210=((0.211267605633803)*sj5);
IkReal x211=((0.211267605633803)*cj5);
IkReal x212=((0.830985915492958)*cj4);
IkReal x213=((0.830985915492958)*sj4*sj5);
IkReal x214=((0.830985915492958)*cj5*sj4);
if( IKabs(((((-1.0)*r11*x210))+(((-1.0)*r11*x214))+(((-1.0)*r12*x212))+(((-1.40845070422535)*py))+((r10*x211))+(((-1.0)*r10*x213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x211))+((r21*x214))+((r21*x210))+((r22*x212))+(((1.40845070422535)*pz))+((r20*x213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x210))+(((-1.0)*r11*x214))+(((-1.0)*r12*x212))+(((-1.40845070422535)*py))+((r10*x211))+(((-1.0)*r10*x213))))+IKsqr(((((-1.0)*r20*x211))+((r21*x214))+((r21*x210))+((r22*x212))+(((1.40845070422535)*pz))+((r20*x213))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*x210))+(((-1.0)*r11*x214))+(((-1.0)*r12*x212))+(((-1.40845070422535)*py))+((r10*x211))+(((-1.0)*r10*x213))), ((((-1.0)*r20*x211))+((r21*x214))+((r21*x210))+((r22*x212))+(((1.40845070422535)*pz))+((r20*x213))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x215=((1.0)*py);
IkReal x216=((0.15)*sj5);
IkReal x217=(cj5*r10);
IkReal x218=((0.59)*sj4);
IkReal x219=(cj5*r21);
IkReal x220=((0.59)*sj3);
IkReal x221=(cj5*r11);
IkReal x222=(cj5*r20);
IkReal x223=((0.59)*cj4);
IkReal x224=((0.15)*x217);
IkReal x225=((0.71)*(IKsin(j1)));
IkReal x226=(r11*x216);
IkReal x227=((0.15)*x222);
IkReal x228=((0.71)*(IKcos(j1)));
IkReal x229=(r21*x216);
IkReal x230=(cj3*sj5*x223);
IkReal x231=(x228+x227);
IkReal x232=(x215+x225+x226);
evalcond[0]=(((x218*x219))+((r20*sj5*x218))+(((-1.0)*x231))+x229+pz+((r22*x223)));
evalcond[1]=((((-1.0)*x232))+x224+(((-1.0)*r10*sj5*x218))+(((-1.0)*r12*x223))+(((-1.0)*x218*x221)));
evalcond[2]=((((-1.0)*cj3*r22*x218))+(((-1.0)*x232))+x224+((x220*x222))+((cj3*x219*x223))+((r20*x230))+(((-1.0)*r21*sj5*x220)));
evalcond[3]=((((-1.0)*pz))+x231+(((-1.0)*cj3*x221*x223))+(((-1.0)*x217*x220))+((r11*sj5*x220))+(((-1.0)*r10*x230))+((cj3*r12*x218))+(((-1.0)*x229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x233=(cj5*sj4);
IkReal x234=(cj1*cj4);
IkReal x235=((1.0)*sj1);
IkReal x236=(sj4*sj5);
if( IKabs(((((-1.0)*r11*x233*x235))+(((-1.0)*cj4*r12*x235))+((cj1*r21*x233))+((cj1*r20*x236))+(((-1.0)*r10*x235*x236))+((r22*x234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x233))+((cj1*r11*x233))+((r20*sj1*x236))+((cj4*r22*sj1))+((cj1*r10*x236))+((r12*x234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x233*x235))+(((-1.0)*cj4*r12*x235))+((cj1*r21*x233))+((cj1*r20*x236))+(((-1.0)*r10*x235*x236))+((r22*x234))))+IKsqr((((r21*sj1*x233))+((cj1*r11*x233))+((r20*sj1*x236))+((cj4*r22*sj1))+((cj1*r10*x236))+((r12*x234))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x233*x235))+(((-1.0)*cj4*r12*x235))+((cj1*r21*x233))+((cj1*r20*x236))+(((-1.0)*r10*x235*x236))+((r22*x234))), (((r21*sj1*x233))+((cj1*r11*x233))+((r20*sj1*x236))+((cj4*r22*sj1))+((cj1*r10*x236))+((r12*x234))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x237=IKcos(j2);
IkReal x238=IKsin(j2);
IkReal x239=(r21*sj5);
IkReal x240=((0.15)*cj5);
IkReal x241=((0.59)*sj1);
IkReal x242=(cj3*sj4);
IkReal x243=(r11*sj5);
IkReal x244=((1.0)*cj4);
IkReal x245=(cj5*r21);
IkReal x246=(cj3*sj5);
IkReal x247=((1.0)*sj4);
IkReal x248=(cj5*r11);
IkReal x249=(sj1*x237);
IkReal x250=(cj1*x238);
IkReal x251=(cj1*x237);
IkReal x252=((1.0)*cj5*sj3);
IkReal x253=(sj5*x247);
IkReal x254=(sj1*x238);
IkReal x255=(x250+x249);
evalcond[0]=((((-1.0)*r20*x253))+x255+(((-1.0)*r22*x244))+(((-1.0)*x245*x247)));
evalcond[1]=((((-1.0)*r12*x244))+x251+(((-1.0)*x247*x248))+(((-1.0)*x254))+(((-1.0)*r10*x253)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*x237*x241))+(((-0.59)*x250))+(((-0.15)*x239))+(((-1.0)*pz))+((r20*x240)));
evalcond[3]=((((-0.15)*x243))+((x238*x241))+(((-0.59)*x251))+(((-0.71)*sj1))+(((-1.0)*py))+((r10*x240)));
evalcond[4]=(((sj3*x243))+x255+((r12*x242))+(((-1.0)*r10*x244*x246))+(((-1.0)*cj3*x244*x248))+(((-1.0)*r10*x252)));
evalcond[5]=(((r22*x242))+(((-1.0)*r20*x252))+x254+(((-1.0)*cj3*x244*x245))+(((-1.0)*r20*x244*x246))+(((-1.0)*x251))+((sj3*x239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x256=((1.0)*r20);
CheckValue<IkReal> x257=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)))),-1);
if(!x257.valid){
continue;
}
CheckValue<IkReal> x258 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x256))+((r21*sj5)))),IkReal((((r22*sj4))+(((-1.0)*cj4*cj5*r21))+(((-1.0)*cj4*sj5*x256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x258.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x257.value)))+(x258.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x259=IKsin(j3);
IkReal x260=IKcos(j3);
IkReal x261=(cj4*cj5);
IkReal x262=(cj5*r00);
IkReal x263=(r02*sj4);
IkReal x264=((1.0)*x260);
IkReal x265=(r01*x259);
IkReal x266=((1.0)*x259);
IkReal x267=(sj5*x260);
IkReal x268=(cj4*sj5*x259);
evalcond[0]=((((-1.0)*r22*sj4*x266))+(((-1.0)*cj5*r20*x264))+((r21*x267))+((r21*x259*x261))+((r20*x268)));
evalcond[1]=((((-1.0)*r12*sj4*x266))+(((-1.0)*cj5*r10*x264))+((r11*x259*x261))+((r10*x268))+((r11*x267)));
evalcond[2]=((1.0)+(((-1.0)*x262*x264))+(((-1.0)*x263*x266))+((r00*x268))+((x261*x265))+((r01*x267)));
evalcond[3]=((((-1.0)*x262*x266))+((sj5*x265))+((x260*x263))+(((-1.0)*r01*x261*x264))+(((-1.0)*cj4*r00*sj5*x264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x269=((0.211267605633803)*sj5);
IkReal x270=((0.211267605633803)*cj5);
IkReal x271=((0.830985915492958)*cj4);
IkReal x272=((0.830985915492958)*sj4*sj5);
IkReal x273=((0.830985915492958)*cj5*sj4);
if( IKabs(((((-1.0)*r11*x273))+(((-1.0)*r11*x269))+(((-1.0)*r12*x271))+(((-1.0)*r10*x272))+(((-1.40845070422535)*py))+((r10*x270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x271))+((r21*x273))+((r21*x269))+(((1.40845070422535)*pz))+((r20*x272))+(((-1.0)*r20*x270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x273))+(((-1.0)*r11*x269))+(((-1.0)*r12*x271))+(((-1.0)*r10*x272))+(((-1.40845070422535)*py))+((r10*x270))))+IKsqr((((r22*x271))+((r21*x273))+((r21*x269))+(((1.40845070422535)*pz))+((r20*x272))+(((-1.0)*r20*x270))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*x273))+(((-1.0)*r11*x269))+(((-1.0)*r12*x271))+(((-1.0)*r10*x272))+(((-1.40845070422535)*py))+((r10*x270))), (((r22*x271))+((r21*x273))+((r21*x269))+(((1.40845070422535)*pz))+((r20*x272))+(((-1.0)*r20*x270))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x274=((1.0)*py);
IkReal x275=((0.15)*sj5);
IkReal x276=(cj5*r10);
IkReal x277=((0.59)*sj4);
IkReal x278=(cj5*r21);
IkReal x279=((0.59)*sj3);
IkReal x280=(cj5*r11);
IkReal x281=(cj5*r20);
IkReal x282=((0.59)*cj4);
IkReal x283=((0.15)*x276);
IkReal x284=((0.71)*(IKsin(j1)));
IkReal x285=(r11*x275);
IkReal x286=((0.15)*x281);
IkReal x287=((0.71)*(IKcos(j1)));
IkReal x288=(r21*x275);
IkReal x289=(cj3*sj5*x282);
IkReal x290=(x287+x286);
IkReal x291=(x274+x285+x284);
evalcond[0]=(((r20*sj5*x277))+(((-1.0)*x290))+((r22*x282))+x288+pz+((x277*x278)));
evalcond[1]=((((-1.0)*x277*x280))+(((-1.0)*x291))+(((-1.0)*r12*x282))+x283+(((-1.0)*r10*sj5*x277)));
evalcond[2]=(((x279*x281))+((cj3*x278*x282))+(((-1.0)*x291))+(((-1.0)*cj3*r22*x277))+(((-1.0)*r21*sj5*x279))+x283+((r20*x289)));
evalcond[3]=(((cj3*r12*x277))+(((-1.0)*cj3*x280*x282))+(((-1.0)*r10*x289))+(((-1.0)*pz))+x290+((r11*sj5*x279))+(((-1.0)*x288))+(((-1.0)*x276*x279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x292=(cj5*sj4);
IkReal x293=(cj1*cj4);
IkReal x294=((1.0)*sj1);
IkReal x295=(sj4*sj5);
if( IKabs(((((-1.0)*r10*x294*x295))+(((-1.0)*cj4*r12*x294))+((cj1*r20*x295))+((cj1*r21*x292))+(((-1.0)*r11*x292*x294))+((r22*x293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x295))+((r12*x293))+((cj1*r11*x292))+((cj4*r22*sj1))+((cj1*r10*x295))+((r21*sj1*x292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x294*x295))+(((-1.0)*cj4*r12*x294))+((cj1*r20*x295))+((cj1*r21*x292))+(((-1.0)*r11*x292*x294))+((r22*x293))))+IKsqr((((r20*sj1*x295))+((r12*x293))+((cj1*r11*x292))+((cj4*r22*sj1))+((cj1*r10*x295))+((r21*sj1*x292))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x294*x295))+(((-1.0)*cj4*r12*x294))+((cj1*r20*x295))+((cj1*r21*x292))+(((-1.0)*r11*x292*x294))+((r22*x293))), (((r20*sj1*x295))+((r12*x293))+((cj1*r11*x292))+((cj4*r22*sj1))+((cj1*r10*x295))+((r21*sj1*x292))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x296=IKcos(j2);
IkReal x297=IKsin(j2);
IkReal x298=(r21*sj5);
IkReal x299=((0.15)*cj5);
IkReal x300=((0.59)*sj1);
IkReal x301=(cj3*sj4);
IkReal x302=(r11*sj5);
IkReal x303=((1.0)*cj4);
IkReal x304=(cj5*r21);
IkReal x305=(cj3*sj5);
IkReal x306=((1.0)*sj4);
IkReal x307=(cj5*r11);
IkReal x308=(sj1*x296);
IkReal x309=(cj1*x297);
IkReal x310=(cj1*x296);
IkReal x311=((1.0)*cj5*sj3);
IkReal x312=(sj5*x306);
IkReal x313=(sj1*x297);
IkReal x314=(x308+x309);
evalcond[0]=((((-1.0)*r22*x303))+(((-1.0)*r20*x312))+x314+(((-1.0)*x304*x306)));
evalcond[1]=(x310+(((-1.0)*r10*x312))+(((-1.0)*x306*x307))+(((-1.0)*x313))+(((-1.0)*r12*x303)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*x296*x300))+(((-0.15)*x298))+((r20*x299))+(((-1.0)*pz))+(((-0.59)*x309)));
evalcond[3]=((((-0.15)*x302))+(((-0.71)*sj1))+(((-1.0)*py))+((x297*x300))+((r10*x299))+(((-0.59)*x310)));
evalcond[4]=(((sj3*x302))+(((-1.0)*cj3*x303*x307))+x314+(((-1.0)*r10*x311))+((r12*x301))+(((-1.0)*r10*x303*x305)));
evalcond[5]=((((-1.0)*r20*x303*x305))+((r22*x301))+(((-1.0)*r20*x311))+(((-1.0)*cj3*x303*x304))+x313+(((-1.0)*x310))+((sj3*x298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x315=((1.0)*cj5);
IkReal x316=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x316;
j3eval[1]=IKsign(x316);
j3eval[2]=((IKabs(((((-1.0)*cj4*r11*x315))+(((-1.0)*cj4*r10*sj5))+((r12*sj4)))))+(IKabs((((r11*sj5))+(((-1.0)*r10*x315))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x317=((1.0)*sj5);
IkReal x318=((1.0)*cj5);
IkReal x319=((((-1.0)*r10*sj4*x317))+(((-1.0)*r11*sj4*x318))+(((-1.0)*cj4*r12)));
j3eval[0]=x319;
j3eval[1]=((IKabs(((((-1.0)*r20*x318))+((r21*sj5)))))+(IKabs((((r22*sj4))+(((-1.0)*cj4*r20*x317))+(((-1.0)*cj4*r21*x318))))));
j3eval[2]=IKsign(x319);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x320=cj5*cj5;
IkReal x321=cj4*cj4;
IkReal x322=r00*r00;
IkReal x323=r01*r01;
IkReal x324=r02*r02;
IkReal x325=(r00*sj5);
IkReal x326=((1.0)*r01);
IkReal x327=((2.0)*cj5*r01);
IkReal x328=(cj4*r02*sj4);
IkReal x329=((1.0)*x323);
IkReal x330=(x320*x322);
IkReal x331=(((x325*x327))+(((-1.0)*x321*x322))+(((-1.0)*x320*x321*x329))+((x327*x328))+((x320*x323))+(((-1.0)*x329))+(((-1.0)*x324))+(((-1.0)*x330))+(((-1.0)*x321*x325*x327))+(((2.0)*x325*x328))+((x321*x324))+((x321*x330)));
j3eval[0]=x331;
j3eval[1]=((IKabs(((((-1.0)*cj4*cj5*x326))+((r02*sj4))+(((-1.0)*cj4*x325)))))+(IKabs(((((-1.0)*sj5*x326))+((cj5*r00))))));
j3eval[2]=IKsign(x331);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x332=cj5*cj5;
IkReal x333=cj4*cj4;
IkReal x334=r00*r00;
IkReal x335=r01*r01;
IkReal x336=r02*r02;
IkReal x337=(cj5*r01);
IkReal x338=((1.0)*sj5);
IkReal x339=(r00*sj5);
IkReal x340=((1.0)*x334);
IkReal x341=((2.0)*cj4*r02*sj4);
IkReal x342=(x332*x335);
CheckValue<IkReal> x343 = IKatan2WithCheck(IkReal((((r02*sj4))+(((-1.0)*cj4*x337))+(((-1.0)*cj4*r00*x338)))),IkReal(((((-1.0)*r01*x338))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x343.valid){
continue;
}
CheckValue<IkReal> x344=IKPowWithIntegerCheck(IKsign((((x337*x341))+(((-1.0)*x332*x340))+(((-2.0)*x333*x337*x339))+((x332*x333*x334))+(((2.0)*x337*x339))+x342+(((-1.0)*x336))+(((-1.0)*x335))+(((-1.0)*x333*x342))+((x333*x336))+(((-1.0)*x333*x340))+((x339*x341)))),-1);
if(!x344.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x343.value)+(((1.5707963267949)*(x344.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x345=IKsin(j3);
IkReal x346=IKcos(j3);
IkReal x347=(cj4*cj5);
IkReal x348=(cj5*r00);
IkReal x349=(r02*sj4);
IkReal x350=((1.0)*x346);
IkReal x351=(r01*x345);
IkReal x352=((1.0)*x345);
IkReal x353=(sj5*x346);
IkReal x354=(cj4*sj5*x345);
evalcond[0]=((((-1.0)*cj5*r20*x350))+((r21*x353))+((r21*x345*x347))+(((-1.0)*r22*sj4*x352))+((r20*x354)));
evalcond[1]=(((r11*x353))+(((-1.0)*cj5*r10*x350))+((r10*x354))+((r11*x345*x347))+(((-1.0)*r12*sj4*x352)));
evalcond[2]=((-1.0)+((r01*x353))+(((-1.0)*x348*x350))+((r00*x354))+(((-1.0)*x349*x352))+((x347*x351)));
evalcond[3]=((((-1.0)*x348*x352))+((sj5*x351))+(((-1.0)*r01*x347*x350))+((x346*x349))+(((-1.0)*cj4*r00*sj5*x350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x355=((0.211267605633803)*sj5);
IkReal x356=((0.211267605633803)*cj5);
IkReal x357=((0.830985915492958)*cj4);
IkReal x358=((0.830985915492958)*sj4*sj5);
IkReal x359=((0.830985915492958)*cj5*sj4);
if( IKabs((((r12*x357))+((r11*x359))+((r11*x355))+((r10*x358))+(((1.40845070422535)*py))+(((-1.0)*r10*x356)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x359))+((r21*x355))+((r22*x357))+(((1.40845070422535)*pz))+(((-1.0)*r20*x356))+((r20*x358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x357))+((r11*x359))+((r11*x355))+((r10*x358))+(((1.40845070422535)*py))+(((-1.0)*r10*x356))))+IKsqr((((r21*x359))+((r21*x355))+((r22*x357))+(((1.40845070422535)*pz))+(((-1.0)*r20*x356))+((r20*x358))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r12*x357))+((r11*x359))+((r11*x355))+((r10*x358))+(((1.40845070422535)*py))+(((-1.0)*r10*x356))), (((r21*x359))+((r21*x355))+((r22*x357))+(((1.40845070422535)*pz))+(((-1.0)*r20*x356))+((r20*x358))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x360=((0.15)*sj5);
IkReal x361=(cj5*r10);
IkReal x362=((0.59)*sj4);
IkReal x363=(cj5*r21);
IkReal x364=((0.59)*sj3);
IkReal x365=(cj5*r11);
IkReal x366=(cj5*r20);
IkReal x367=((0.59)*cj4);
IkReal x368=(r21*x360);
IkReal x369=((0.15)*x366);
IkReal x370=((0.71)*(IKcos(j1)));
IkReal x371=((0.71)*(IKsin(j1)));
IkReal x372=((0.15)*x361);
IkReal x373=(r11*x360);
IkReal x374=(x368+pz);
IkReal x375=(cj3*sj5*x367);
IkReal x376=(x372+x371);
IkReal x377=(x370+x369);
evalcond[0]=((((-1.0)*x376))+x373+((r12*x367))+py+((r10*sj5*x362))+((x362*x365)));
evalcond[1]=(((r20*sj5*x362))+(((-1.0)*x377))+x374+((r22*x367))+((x362*x363)));
evalcond[2]=(((cj3*r12*x362))+(((-1.0)*x361*x364))+(((-1.0)*cj3*x365*x367))+(((-1.0)*x377))+x374+(((-1.0)*r10*x375))+((r11*sj5*x364)));
evalcond[3]=((((-1.0)*r20*x375))+(((-1.0)*x373))+x376+(((-1.0)*py))+(((-1.0)*x364*x366))+((r21*sj5*x364))+(((-1.0)*cj3*x363*x367))+((cj3*r22*x362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x378=(cj4*r12);
IkReal x379=((1.0)*cj1);
IkReal x380=(cj4*r22);
IkReal x381=(cj5*sj4);
IkReal x382=(sj4*sj5);
if( IKabs((((cj1*r20*x382))+((r10*sj1*x382))+((cj1*x380))+((sj1*x378))+((cj1*r21*x381))+((r11*sj1*x381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x378*x379))+(((-1.0)*r11*x379*x381))+(((-1.0)*r10*x379*x382))+((r21*sj1*x381))+((sj1*x380))+((r20*sj1*x382)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x382))+((r10*sj1*x382))+((cj1*x380))+((sj1*x378))+((cj1*r21*x381))+((r11*sj1*x381))))+IKsqr(((((-1.0)*x378*x379))+(((-1.0)*r11*x379*x381))+(((-1.0)*r10*x379*x382))+((r21*sj1*x381))+((sj1*x380))+((r20*sj1*x382))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x382))+((r10*sj1*x382))+((cj1*x380))+((sj1*x378))+((cj1*r21*x381))+((r11*sj1*x381))), ((((-1.0)*x378*x379))+(((-1.0)*r11*x379*x381))+(((-1.0)*r10*x379*x382))+((r21*sj1*x381))+((sj1*x380))+((r20*sj1*x382))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x383=IKsin(j2);
IkReal x384=IKcos(j2);
IkReal x385=(r21*sj5);
IkReal x386=((0.15)*cj5);
IkReal x387=((1.0)*cj4);
IkReal x388=(cj5*r21);
IkReal x389=(r11*sj5);
IkReal x390=(cj3*sj5);
IkReal x391=(cj3*sj4);
IkReal x392=((1.0)*sj4);
IkReal x393=(cj5*r11);
IkReal x394=(sj1*x383);
IkReal x395=(cj1*x383);
IkReal x396=((1.0)*cj5*sj3);
IkReal x397=((0.59)*x384);
IkReal x398=((1.0)*x384);
IkReal x399=(sj5*x392);
IkReal x400=(cj1*x398);
evalcond[0]=((((-1.0)*r20*x399))+(((-1.0)*r22*x387))+(((-1.0)*x388*x392))+x395+((sj1*x384)));
evalcond[1]=(x394+(((-1.0)*r10*x399))+(((-1.0)*r12*x387))+(((-1.0)*x400))+(((-1.0)*x392*x393)));
evalcond[2]=((((0.71)*cj1))+(((-0.59)*x395))+(((-1.0)*sj1*x397))+(((-1.0)*pz))+((r20*x386))+(((-0.15)*x385)));
evalcond[3]=((((-0.59)*x394))+(((-1.0)*py))+(((-0.15)*x389))+((r10*x386))+((cj1*x397))+(((0.71)*sj1)));
evalcond[4]=((((-1.0)*cj3*x387*x388))+(((-1.0)*r20*x396))+x394+((r22*x391))+(((-1.0)*r20*x387*x390))+(((-1.0)*x400))+((sj3*x385)));
evalcond[5]=((((-1.0)*r10*x387*x390))+(((-1.0)*x395))+(((-1.0)*sj1*x398))+(((-1.0)*cj3*x387*x393))+(((-1.0)*r10*x396))+((r12*x391))+((sj3*x389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x401=((1.0)*sj5);
IkReal x402=((1.0)*cj5);
CheckValue<IkReal> x403 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x402)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r20*x401))+(((-1.0)*cj4*r21*x402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x403.valid){
continue;
}
CheckValue<IkReal> x404=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x402))+(((-1.0)*r10*sj4*x401))+(((-1.0)*cj4*r12)))),-1);
if(!x404.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x403.value)+(((1.5707963267949)*(x404.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x405=IKsin(j3);
IkReal x406=IKcos(j3);
IkReal x407=(cj4*cj5);
IkReal x408=(cj5*r00);
IkReal x409=(r02*sj4);
IkReal x410=((1.0)*x406);
IkReal x411=(r01*x405);
IkReal x412=((1.0)*x405);
IkReal x413=(sj5*x406);
IkReal x414=(cj4*sj5*x405);
evalcond[0]=((((-1.0)*cj5*r20*x410))+((r21*x405*x407))+(((-1.0)*r22*sj4*x412))+((r21*x413))+((r20*x414)));
evalcond[1]=(((r11*x413))+(((-1.0)*cj5*r10*x410))+(((-1.0)*r12*sj4*x412))+((r10*x414))+((r11*x405*x407)));
evalcond[2]=((-1.0)+((x407*x411))+((r01*x413))+((r00*x414))+(((-1.0)*x408*x410))+(((-1.0)*x409*x412)));
evalcond[3]=((((-1.0)*r01*x407*x410))+((sj5*x411))+(((-1.0)*cj4*r00*sj5*x410))+((x406*x409))+(((-1.0)*x408*x412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x415=((0.211267605633803)*sj5);
IkReal x416=((0.211267605633803)*cj5);
IkReal x417=((0.830985915492958)*cj4);
IkReal x418=((0.830985915492958)*sj4*sj5);
IkReal x419=((0.830985915492958)*cj5*sj4);
if( IKabs((((r11*x419))+((r11*x415))+((r12*x417))+(((-1.0)*r10*x416))+((r10*x418))+(((1.40845070422535)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x417))+(((-1.0)*r20*x416))+((r21*x419))+((r21*x415))+((r20*x418))+(((1.40845070422535)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x419))+((r11*x415))+((r12*x417))+(((-1.0)*r10*x416))+((r10*x418))+(((1.40845070422535)*py))))+IKsqr((((r22*x417))+(((-1.0)*r20*x416))+((r21*x419))+((r21*x415))+((r20*x418))+(((1.40845070422535)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x419))+((r11*x415))+((r12*x417))+(((-1.0)*r10*x416))+((r10*x418))+(((1.40845070422535)*py))), (((r22*x417))+(((-1.0)*r20*x416))+((r21*x419))+((r21*x415))+((r20*x418))+(((1.40845070422535)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x420=((0.15)*sj5);
IkReal x421=(cj5*r10);
IkReal x422=((0.59)*sj4);
IkReal x423=(cj5*r21);
IkReal x424=((0.59)*sj3);
IkReal x425=(cj5*r11);
IkReal x426=(cj5*r20);
IkReal x427=((0.59)*cj4);
IkReal x428=(r21*x420);
IkReal x429=((0.15)*x426);
IkReal x430=((0.71)*(IKcos(j1)));
IkReal x431=((0.71)*(IKsin(j1)));
IkReal x432=((0.15)*x421);
IkReal x433=(r11*x420);
IkReal x434=(x428+pz);
IkReal x435=(cj3*sj5*x427);
IkReal x436=(x431+x432);
IkReal x437=(x429+x430);
evalcond[0]=((((-1.0)*x436))+((r10*sj5*x422))+x433+py+((r12*x427))+((x422*x425)));
evalcond[1]=((((-1.0)*x437))+((r20*sj5*x422))+x434+((r22*x427))+((x422*x423)));
evalcond[2]=((((-1.0)*x421*x424))+(((-1.0)*r10*x435))+(((-1.0)*x437))+((r11*sj5*x424))+(((-1.0)*cj3*x425*x427))+x434+((cj3*r12*x422)));
evalcond[3]=((((-1.0)*x433))+((cj3*r22*x422))+(((-1.0)*py))+x436+(((-1.0)*r20*x435))+(((-1.0)*x424*x426))+(((-1.0)*cj3*x423*x427))+((r21*sj5*x424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x438=(cj4*r12);
IkReal x439=((1.0)*cj1);
IkReal x440=(cj4*r22);
IkReal x441=(cj5*sj4);
IkReal x442=(sj4*sj5);
if( IKabs((((cj1*x440))+((r10*sj1*x442))+((cj1*r20*x442))+((r11*sj1*x441))+((cj1*r21*x441))+((sj1*x438)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x441))+((sj1*x440))+(((-1.0)*x438*x439))+(((-1.0)*r11*x439*x441))+((r20*sj1*x442))+(((-1.0)*r10*x439*x442)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x440))+((r10*sj1*x442))+((cj1*r20*x442))+((r11*sj1*x441))+((cj1*r21*x441))+((sj1*x438))))+IKsqr((((r21*sj1*x441))+((sj1*x440))+(((-1.0)*x438*x439))+(((-1.0)*r11*x439*x441))+((r20*sj1*x442))+(((-1.0)*r10*x439*x442))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x440))+((r10*sj1*x442))+((cj1*r20*x442))+((r11*sj1*x441))+((cj1*r21*x441))+((sj1*x438))), (((r21*sj1*x441))+((sj1*x440))+(((-1.0)*x438*x439))+(((-1.0)*r11*x439*x441))+((r20*sj1*x442))+(((-1.0)*r10*x439*x442))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x443=IKsin(j2);
IkReal x444=IKcos(j2);
IkReal x445=(r21*sj5);
IkReal x446=((0.15)*cj5);
IkReal x447=((1.0)*cj4);
IkReal x448=(cj5*r21);
IkReal x449=(r11*sj5);
IkReal x450=(cj3*sj5);
IkReal x451=(cj3*sj4);
IkReal x452=((1.0)*sj4);
IkReal x453=(cj5*r11);
IkReal x454=(sj1*x443);
IkReal x455=(cj1*x443);
IkReal x456=((1.0)*cj5*sj3);
IkReal x457=((0.59)*x444);
IkReal x458=((1.0)*x444);
IkReal x459=(sj5*x452);
IkReal x460=(cj1*x458);
evalcond[0]=(((sj1*x444))+x455+(((-1.0)*r20*x459))+(((-1.0)*r22*x447))+(((-1.0)*x448*x452)));
evalcond[1]=((((-1.0)*r12*x447))+(((-1.0)*x460))+x454+(((-1.0)*x452*x453))+(((-1.0)*r10*x459)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*pz))+(((-1.0)*sj1*x457))+(((-0.15)*x445))+((r20*x446))+(((-0.59)*x455)));
evalcond[3]=(((cj1*x457))+(((-1.0)*py))+(((-0.15)*x449))+(((0.71)*sj1))+(((-0.59)*x454))+((r10*x446)));
evalcond[4]=((((-1.0)*r20*x447*x450))+(((-1.0)*cj3*x447*x448))+(((-1.0)*x460))+x454+((sj3*x445))+(((-1.0)*r20*x456))+((r22*x451)));
evalcond[5]=((((-1.0)*r10*x447*x450))+(((-1.0)*x455))+(((-1.0)*sj1*x458))+((r12*x451))+(((-1.0)*r10*x456))+((sj3*x449))+(((-1.0)*cj3*x447*x453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x461=((1.0)*cj5);
CheckValue<IkReal> x462 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x461)))),IkReal(((((-1.0)*cj4*r10*sj5))+((r12*sj4))+(((-1.0)*cj4*r11*x461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x462.valid){
continue;
}
CheckValue<IkReal> x463=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x463.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x462.value)+(((1.5707963267949)*(x463.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x464=IKsin(j3);
IkReal x465=IKcos(j3);
IkReal x466=(cj4*cj5);
IkReal x467=(cj5*r00);
IkReal x468=(r02*sj4);
IkReal x469=((1.0)*x465);
IkReal x470=(r01*x464);
IkReal x471=((1.0)*x464);
IkReal x472=(sj5*x465);
IkReal x473=(cj4*sj5*x464);
evalcond[0]=(((r21*x472))+((r20*x473))+(((-1.0)*cj5*r20*x469))+((r21*x464*x466))+(((-1.0)*r22*sj4*x471)));
evalcond[1]=(((r10*x473))+(((-1.0)*r12*sj4*x471))+((r11*x472))+((r11*x464*x466))+(((-1.0)*cj5*r10*x469)));
evalcond[2]=((-1.0)+(((-1.0)*x468*x471))+((x466*x470))+(((-1.0)*x467*x469))+((r00*x473))+((r01*x472)));
evalcond[3]=(((sj5*x470))+(((-1.0)*x467*x471))+(((-1.0)*r01*x466*x469))+((x465*x468))+(((-1.0)*cj4*r00*sj5*x469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x474=((0.211267605633803)*sj5);
IkReal x475=((0.211267605633803)*cj5);
IkReal x476=((0.830985915492958)*cj4);
IkReal x477=((0.830985915492958)*sj4*sj5);
IkReal x478=((0.830985915492958)*cj5*sj4);
if( IKabs((((r10*x477))+((r11*x474))+((r11*x478))+(((1.40845070422535)*py))+((r12*x476))+(((-1.0)*r10*x475)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x478))+((r21*x474))+((r20*x477))+(((1.40845070422535)*pz))+((r22*x476))+(((-1.0)*r20*x475)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x477))+((r11*x474))+((r11*x478))+(((1.40845070422535)*py))+((r12*x476))+(((-1.0)*r10*x475))))+IKsqr((((r21*x478))+((r21*x474))+((r20*x477))+(((1.40845070422535)*pz))+((r22*x476))+(((-1.0)*r20*x475))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x477))+((r11*x474))+((r11*x478))+(((1.40845070422535)*py))+((r12*x476))+(((-1.0)*r10*x475))), (((r21*x478))+((r21*x474))+((r20*x477))+(((1.40845070422535)*pz))+((r22*x476))+(((-1.0)*r20*x475))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x479=((0.15)*sj5);
IkReal x480=(cj5*r10);
IkReal x481=((0.59)*sj4);
IkReal x482=(cj5*r21);
IkReal x483=((0.59)*sj3);
IkReal x484=(cj5*r11);
IkReal x485=(cj5*r20);
IkReal x486=((0.59)*cj4);
IkReal x487=(r21*x479);
IkReal x488=((0.15)*x485);
IkReal x489=((0.71)*(IKcos(j1)));
IkReal x490=((0.71)*(IKsin(j1)));
IkReal x491=((0.15)*x480);
IkReal x492=(r11*x479);
IkReal x493=(x487+pz);
IkReal x494=(cj3*sj5*x486);
IkReal x495=(x490+x491);
IkReal x496=(x489+x488);
evalcond[0]=((((-1.0)*x495))+((r12*x486))+((x481*x484))+x492+py+((r10*sj5*x481)));
evalcond[1]=((((-1.0)*x496))+((x481*x482))+((r22*x486))+x493+((r20*sj5*x481)));
evalcond[2]=((((-1.0)*cj3*x484*x486))+(((-1.0)*r10*x494))+((cj3*r12*x481))+(((-1.0)*x496))+x493+((r11*sj5*x483))+(((-1.0)*x480*x483)));
evalcond[3]=((((-1.0)*x492))+(((-1.0)*cj3*x482*x486))+(((-1.0)*x483*x485))+(((-1.0)*py))+((cj3*r22*x481))+x495+((r21*sj5*x483))+(((-1.0)*r20*x494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x497=(cj4*r12);
IkReal x498=((1.0)*cj1);
IkReal x499=(cj4*r22);
IkReal x500=(cj5*sj4);
IkReal x501=(sj4*sj5);
if( IKabs((((cj1*r21*x500))+((cj1*r20*x501))+((sj1*x497))+((r11*sj1*x500))+((cj1*x499))+((r10*sj1*x501)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x500))+(((-1.0)*x497*x498))+((sj1*x499))+(((-1.0)*r10*x498*x501))+(((-1.0)*r11*x498*x500))+((r20*sj1*x501)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x500))+((cj1*r20*x501))+((sj1*x497))+((r11*sj1*x500))+((cj1*x499))+((r10*sj1*x501))))+IKsqr((((r21*sj1*x500))+(((-1.0)*x497*x498))+((sj1*x499))+(((-1.0)*r10*x498*x501))+(((-1.0)*r11*x498*x500))+((r20*sj1*x501))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x500))+((cj1*r20*x501))+((sj1*x497))+((r11*sj1*x500))+((cj1*x499))+((r10*sj1*x501))), (((r21*sj1*x500))+(((-1.0)*x497*x498))+((sj1*x499))+(((-1.0)*r10*x498*x501))+(((-1.0)*r11*x498*x500))+((r20*sj1*x501))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x502=IKsin(j2);
IkReal x503=IKcos(j2);
IkReal x504=(r21*sj5);
IkReal x505=((0.15)*cj5);
IkReal x506=((1.0)*cj4);
IkReal x507=(cj5*r21);
IkReal x508=(r11*sj5);
IkReal x509=(cj3*sj5);
IkReal x510=(cj3*sj4);
IkReal x511=((1.0)*sj4);
IkReal x512=(cj5*r11);
IkReal x513=(sj1*x502);
IkReal x514=(cj1*x502);
IkReal x515=((1.0)*cj5*sj3);
IkReal x516=((0.59)*x503);
IkReal x517=((1.0)*x503);
IkReal x518=(sj5*x511);
IkReal x519=(cj1*x517);
evalcond[0]=(((sj1*x503))+(((-1.0)*r22*x506))+(((-1.0)*r20*x518))+x514+(((-1.0)*x507*x511)));
evalcond[1]=((((-1.0)*x511*x512))+x513+(((-1.0)*x519))+(((-1.0)*r12*x506))+(((-1.0)*r10*x518)));
evalcond[2]=(((r20*x505))+(((0.71)*cj1))+(((-1.0)*sj1*x516))+(((-1.0)*pz))+(((-0.15)*x504))+(((-0.59)*x514)));
evalcond[3]=(((r10*x505))+(((-1.0)*py))+((cj1*x516))+(((-0.15)*x508))+(((0.71)*sj1))+(((-0.59)*x513)));
evalcond[4]=(((sj3*x504))+(((-1.0)*r20*x506*x509))+(((-1.0)*cj3*x506*x507))+(((-1.0)*r20*x515))+x513+(((-1.0)*x519))+((r22*x510)));
evalcond[5]=(((sj3*x508))+(((-1.0)*x514))+(((-1.0)*sj1*x517))+(((-1.0)*r10*x506*x509))+(((-1.0)*r10*x515))+(((-1.0)*cj3*x506*x512))+((r12*x510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x520=((1.0)*r00);
IkReal x521=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x521;
j3eval[1]=IKsign(x521);
j3eval[2]=((IKabs(((((-1.0)*cj4*cj5*r01))+((r02*sj4))+(((-1.0)*cj4*sj5*x520)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*x520))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x522=((1.0)*sj5);
IkReal x523=((1.0)*cj5);
IkReal x524=((((-1.0)*cj4*r02))+(((-1.0)*r01*sj4*x523))+(((-1.0)*r00*sj4*x522)));
j3eval[0]=x524;
j3eval[1]=IKsign(x524);
j3eval[2]=((IKabs((((r22*sj4))+(((-1.0)*cj4*r21*x523))+(((-1.0)*cj4*r20*x522)))))+(IKabs((((r21*sj5))+(((-1.0)*r20*x523))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x525=cj4*cj4;
IkReal x526=r11*r11;
IkReal x527=cj5*cj5;
IkReal x528=r10*r10;
IkReal x529=r12*r12;
IkReal x530=(cj5*r11);
IkReal x531=((1.0)*cj4);
IkReal x532=((1.0)*x525);
IkReal x533=((2.0)*r10*sj5);
IkReal x534=(cj4*r12*sj4);
IkReal x535=(x527*x528);
IkReal x536=(x526*x527);
IkReal x537=((((-1.0)*x532*x535))+(((-1.0)*x533*x534))+(((-1.0)*x536))+((x525*x530*x533))+(((-1.0)*x530*x533))+(((-1.0)*x529*x532))+((x525*x528))+(((-2.0)*x530*x534))+((x525*x536))+x535+x526+x529);
j3eval[0]=x537;
j3eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*sj5)))))+(IKabs(((((-1.0)*x530*x531))+((r12*sj4))+(((-1.0)*r10*sj5*x531))))));
j3eval[2]=IKsign(x537);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x538=cj4*cj4;
IkReal x539=r11*r11;
IkReal x540=cj5*cj5;
IkReal x541=r10*r10;
IkReal x542=r12*r12;
IkReal x543=(cj5*r11);
IkReal x544=((1.0)*sj5);
IkReal x545=((2.0)*r10*sj5);
IkReal x546=(cj4*r12*sj4);
IkReal x547=((1.0)*x538);
IkReal x548=(x540*x541);
IkReal x549=(x539*x540);
CheckValue<IkReal> x550=IKPowWithIntegerCheck(IKsign(((((-1.0)*x542*x547))+((x538*x543*x545))+(((-1.0)*x545*x546))+(((-1.0)*x549))+(((-2.0)*x543*x546))+(((-1.0)*x547*x548))+x542+x548+x539+((x538*x541))+((x538*x549))+(((-1.0)*x543*x545)))),-1);
if(!x550.valid){
continue;
}
CheckValue<IkReal> x551 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r10*x544))+((r12*sj4))+(((-1.0)*cj4*x543)))),IkReal((((cj5*r10))+(((-1.0)*r11*x544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x551.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x550.value)))+(x551.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x552=IKsin(j3);
IkReal x553=IKcos(j3);
IkReal x554=(cj4*cj5);
IkReal x555=(r12*sj4);
IkReal x556=(cj5*r10);
IkReal x557=((1.0)*x553);
IkReal x558=(r11*x552);
IkReal x559=((1.0)*x552);
IkReal x560=(sj5*x553);
IkReal x561=(cj4*sj5*x552);
evalcond[0]=(((r21*x560))+((r21*x552*x554))+(((-1.0)*r22*sj4*x559))+(((-1.0)*cj5*r20*x557))+((r20*x561)));
evalcond[1]=((((-1.0)*r02*sj4*x559))+(((-1.0)*cj5*r00*x557))+((r01*x560))+((r00*x561))+((r01*x552*x554)));
evalcond[2]=((1.0)+(((-1.0)*x555*x559))+(((-1.0)*x556*x557))+((x554*x558))+((r10*x561))+((r11*x560)));
evalcond[3]=((((-1.0)*x556*x559))+(((-1.0)*cj4*r10*sj5*x557))+((sj5*x558))+(((-1.0)*r11*x554*x557))+((x553*x555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x562=((0.830985915492958)*sj4);
IkReal x563=((0.211267605633803)*sj5);
IkReal x564=((0.830985915492958)*cj4);
IkReal x565=((0.211267605633803)*cj5);
if( IKabs((((r01*x563))+((cj5*r01*x562))+((r00*sj5*x562))+(((1.40845070422535)*px))+((r02*x564))+(((-1.0)*r00*x565)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r21*x562))+((r20*sj5*x562))+((r22*x564))+((r21*x563))+(((1.40845070422535)*pz))+(((-1.0)*r20*x565)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x563))+((cj5*r01*x562))+((r00*sj5*x562))+(((1.40845070422535)*px))+((r02*x564))+(((-1.0)*r00*x565))))+IKsqr((((cj5*r21*x562))+((r20*sj5*x562))+((r22*x564))+((r21*x563))+(((1.40845070422535)*pz))+(((-1.0)*r20*x565))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x563))+((cj5*r01*x562))+((r00*sj5*x562))+(((1.40845070422535)*px))+((r02*x564))+(((-1.0)*r00*x565))), (((cj5*r21*x562))+((r20*sj5*x562))+((r22*x564))+((r21*x563))+(((1.40845070422535)*pz))+(((-1.0)*r20*x565))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x566=(r00*sj5);
IkReal x567=(r21*sj5);
IkReal x568=((0.59)*sj4);
IkReal x569=(cj5*r21);
IkReal x570=(cj5*r01);
IkReal x571=(r20*sj5);
IkReal x572=(cj5*r00);
IkReal x573=((0.59)*sj3);
IkReal x574=(cj5*r20);
IkReal x575=((0.59)*cj4);
IkReal x576=(r01*sj5);
IkReal x577=((0.15)*x567);
IkReal x578=((0.15)*x574);
IkReal x579=((0.71)*(IKcos(j1)));
IkReal x580=((0.71)*(IKsin(j1)));
IkReal x581=((0.15)*x572);
IkReal x582=((0.15)*x576);
IkReal x583=(cj3*x575);
IkReal x584=(pz+x577);
IkReal x585=(x580+x581);
IkReal x586=(x579+x578);
evalcond[0]=(((x566*x568))+((r02*x575))+px+x582+((x568*x570))+(((-1.0)*x585)));
evalcond[1]=(x584+((x568*x571))+((r22*x575))+(((-1.0)*x586))+((x568*x569)));
evalcond[2]=(((x573*x576))+(((-1.0)*x570*x583))+((cj3*r02*x568))+x584+(((-1.0)*x586))+(((-1.0)*x566*x583))+(((-1.0)*x572*x573)));
evalcond[3]=(((x567*x573))+(((-1.0)*x573*x574))+(((-1.0)*px))+(((-1.0)*x571*x583))+x585+((cj3*r22*x568))+(((-1.0)*x582))+(((-1.0)*x569*x583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x587=(cj4*sj1);
IkReal x588=(cj1*cj4);
IkReal x589=(cj5*sj4);
IkReal x590=((1.0)*cj1);
IkReal x591=(sj4*sj5);
IkReal x592=(sj1*x591);
if( IKabs((((r01*sj1*x589))+((r02*x587))+((r00*x592))+((cj1*r21*x589))+((r22*x588))+((cj1*r20*x591)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x589*x590))+(((-1.0)*r02*x588))+(((-1.0)*r00*x590*x591))+((r21*sj1*x589))+((r20*x592))+((r22*x587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj1*x589))+((r02*x587))+((r00*x592))+((cj1*r21*x589))+((r22*x588))+((cj1*r20*x591))))+IKsqr(((((-1.0)*r01*x589*x590))+(((-1.0)*r02*x588))+(((-1.0)*r00*x590*x591))+((r21*sj1*x589))+((r20*x592))+((r22*x587))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj1*x589))+((r02*x587))+((r00*x592))+((cj1*r21*x589))+((r22*x588))+((cj1*r20*x591))), ((((-1.0)*r01*x589*x590))+(((-1.0)*r02*x588))+(((-1.0)*r00*x590*x591))+((r21*sj1*x589))+((r20*x592))+((r22*x587))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x593=IKsin(j2);
IkReal x594=IKcos(j2);
IkReal x595=(cj3*sj4);
IkReal x596=((1.0)*cj5);
IkReal x597=(r21*sj5);
IkReal x598=(cj3*cj4);
IkReal x599=((0.15)*cj5);
IkReal x600=((1.0)*sj5);
IkReal x601=((1.0)*cj4);
IkReal x602=(r01*sj5);
IkReal x603=(sj1*x593);
IkReal x604=(cj1*x593);
IkReal x605=((0.59)*x594);
IkReal x606=((1.0)*x594);
IkReal x607=(cj1*x606);
evalcond[0]=((((-1.0)*r21*sj4*x596))+(((-1.0)*r22*x601))+x604+((sj1*x594))+(((-1.0)*r20*sj4*x600)));
evalcond[1]=((((-1.0)*r00*sj4*x600))+(((-1.0)*r01*sj4*x596))+x603+(((-1.0)*x607))+(((-1.0)*r02*x601)));
evalcond[2]=((((0.71)*cj1))+(((-0.59)*x604))+(((-1.0)*sj1*x605))+(((-0.15)*x597))+(((-1.0)*pz))+((r20*x599)));
evalcond[3]=((((-0.15)*x602))+(((-0.59)*x603))+((r00*x599))+(((-1.0)*px))+((cj1*x605))+(((0.71)*sj1)));
evalcond[4]=(((r22*x595))+(((-1.0)*r20*x598*x600))+x603+(((-1.0)*x607))+(((-1.0)*r20*sj3*x596))+((sj3*x597))+(((-1.0)*r21*x596*x598)));
evalcond[5]=((((-1.0)*r01*x596*x598))+(((-1.0)*sj1*x606))+(((-1.0)*x604))+((r02*x595))+(((-1.0)*r00*x598*x600))+(((-1.0)*r00*sj3*x596))+((sj3*x602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x608=((1.0)*sj5);
IkReal x609=((1.0)*cj5);
CheckValue<IkReal> x610 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x609))+((r21*sj5)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r20*x608))+(((-1.0)*cj4*r21*x609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x610.valid){
continue;
}
CheckValue<IkReal> x611=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+(((-1.0)*r00*sj4*x608))+(((-1.0)*r01*sj4*x609)))),-1);
if(!x611.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x610.value)+(((1.5707963267949)*(x611.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x612=IKsin(j3);
IkReal x613=IKcos(j3);
IkReal x614=(cj4*cj5);
IkReal x615=(r12*sj4);
IkReal x616=(cj5*r10);
IkReal x617=((1.0)*x613);
IkReal x618=(r11*x612);
IkReal x619=((1.0)*x612);
IkReal x620=(sj5*x613);
IkReal x621=(cj4*sj5*x612);
evalcond[0]=(((r21*x620))+(((-1.0)*r22*sj4*x619))+((r20*x621))+((r21*x612*x614))+(((-1.0)*cj5*r20*x617)));
evalcond[1]=((((-1.0)*r02*sj4*x619))+(((-1.0)*cj5*r00*x617))+((r01*x620))+((r00*x621))+((r01*x612*x614)));
evalcond[2]=((1.0)+((r10*x621))+((x614*x618))+(((-1.0)*x615*x619))+(((-1.0)*x616*x617))+((r11*x620)));
evalcond[3]=((((-1.0)*cj4*r10*sj5*x617))+((x613*x615))+(((-1.0)*r11*x614*x617))+(((-1.0)*x616*x619))+((sj5*x618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x622=((0.830985915492958)*sj4);
IkReal x623=((0.211267605633803)*sj5);
IkReal x624=((0.830985915492958)*cj4);
IkReal x625=((0.211267605633803)*cj5);
if( IKabs((((r02*x624))+(((-1.0)*r00*x625))+((cj5*r01*x622))+((r01*x623))+(((1.40845070422535)*px))+((r00*sj5*x622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x623))+((r22*x624))+((cj5*r21*x622))+(((-1.0)*r20*x625))+(((1.40845070422535)*pz))+((r20*sj5*x622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x624))+(((-1.0)*r00*x625))+((cj5*r01*x622))+((r01*x623))+(((1.40845070422535)*px))+((r00*sj5*x622))))+IKsqr((((r21*x623))+((r22*x624))+((cj5*r21*x622))+(((-1.0)*r20*x625))+(((1.40845070422535)*pz))+((r20*sj5*x622))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x624))+(((-1.0)*r00*x625))+((cj5*r01*x622))+((r01*x623))+(((1.40845070422535)*px))+((r00*sj5*x622))), (((r21*x623))+((r22*x624))+((cj5*r21*x622))+(((-1.0)*r20*x625))+(((1.40845070422535)*pz))+((r20*sj5*x622))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x626=(r00*sj5);
IkReal x627=(r21*sj5);
IkReal x628=((0.59)*sj4);
IkReal x629=(cj5*r21);
IkReal x630=(cj5*r01);
IkReal x631=(r20*sj5);
IkReal x632=(cj5*r00);
IkReal x633=((0.59)*sj3);
IkReal x634=(cj5*r20);
IkReal x635=((0.59)*cj4);
IkReal x636=(r01*sj5);
IkReal x637=((0.15)*x627);
IkReal x638=((0.15)*x634);
IkReal x639=((0.71)*(IKcos(j1)));
IkReal x640=((0.71)*(IKsin(j1)));
IkReal x641=((0.15)*x632);
IkReal x642=((0.15)*x636);
IkReal x643=(cj3*x635);
IkReal x644=(pz+x637);
IkReal x645=(x641+x640);
IkReal x646=(x638+x639);
evalcond[0]=(((r02*x635))+((x628*x630))+(((-1.0)*x645))+px+x642+((x626*x628)));
evalcond[1]=(((x628*x631))+((x628*x629))+((r22*x635))+(((-1.0)*x646))+x644);
evalcond[2]=((((-1.0)*x630*x643))+(((-1.0)*x626*x643))+((cj3*r02*x628))+(((-1.0)*x646))+x644+((x633*x636))+(((-1.0)*x632*x633)));
evalcond[3]=((((-1.0)*x629*x643))+(((-1.0)*x631*x643))+(((-1.0)*x633*x634))+(((-1.0)*px))+(((-1.0)*x642))+x645+((x627*x633))+((cj3*r22*x628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x647=(cj4*sj1);
IkReal x648=(cj1*cj4);
IkReal x649=(cj5*sj4);
IkReal x650=((1.0)*cj1);
IkReal x651=(sj4*sj5);
IkReal x652=(sj1*x651);
if( IKabs((((r02*x647))+((r22*x648))+((cj1*r21*x649))+((cj1*r20*x651))+((r01*sj1*x649))+((r00*x652)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x650*x651))+(((-1.0)*r02*x648))+((r21*sj1*x649))+((r22*x647))+((r20*x652))+(((-1.0)*r01*x649*x650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x647))+((r22*x648))+((cj1*r21*x649))+((cj1*r20*x651))+((r01*sj1*x649))+((r00*x652))))+IKsqr(((((-1.0)*r00*x650*x651))+(((-1.0)*r02*x648))+((r21*sj1*x649))+((r22*x647))+((r20*x652))+(((-1.0)*r01*x649*x650))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x647))+((r22*x648))+((cj1*r21*x649))+((cj1*r20*x651))+((r01*sj1*x649))+((r00*x652))), ((((-1.0)*r00*x650*x651))+(((-1.0)*r02*x648))+((r21*sj1*x649))+((r22*x647))+((r20*x652))+(((-1.0)*r01*x649*x650))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x653=IKsin(j2);
IkReal x654=IKcos(j2);
IkReal x655=(cj3*sj4);
IkReal x656=((1.0)*cj5);
IkReal x657=(r21*sj5);
IkReal x658=(cj3*cj4);
IkReal x659=((0.15)*cj5);
IkReal x660=((1.0)*sj5);
IkReal x661=((1.0)*cj4);
IkReal x662=(r01*sj5);
IkReal x663=(sj1*x653);
IkReal x664=(cj1*x653);
IkReal x665=((0.59)*x654);
IkReal x666=((1.0)*x654);
IkReal x667=(cj1*x666);
evalcond[0]=((((-1.0)*r22*x661))+((sj1*x654))+x664+(((-1.0)*r21*sj4*x656))+(((-1.0)*r20*sj4*x660)));
evalcond[1]=((((-1.0)*r01*sj4*x656))+(((-1.0)*r00*sj4*x660))+(((-1.0)*x667))+x663+(((-1.0)*r02*x661)));
evalcond[2]=((((0.71)*cj1))+(((-0.59)*x664))+(((-1.0)*sj1*x665))+(((-0.15)*x657))+(((-1.0)*pz))+((r20*x659)));
evalcond[3]=((((-0.59)*x663))+(((-0.15)*x662))+(((-1.0)*px))+(((0.71)*sj1))+((cj1*x665))+((r00*x659)));
evalcond[4]=((((-1.0)*r20*sj3*x656))+((sj3*x657))+((r22*x655))+(((-1.0)*x667))+x663+(((-1.0)*r20*x658*x660))+(((-1.0)*r21*x656*x658)));
evalcond[5]=((((-1.0)*r01*x656*x658))+(((-1.0)*sj1*x666))+((r02*x655))+(((-1.0)*x664))+(((-1.0)*r00*x658*x660))+((sj3*x662))+(((-1.0)*r00*sj3*x656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x668=((1.0)*r00);
CheckValue<IkReal> x669 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*x668)))),IkReal(((((-1.0)*cj4*cj5*r01))+((r02*sj4))+(((-1.0)*cj4*sj5*x668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x669.valid){
continue;
}
CheckValue<IkReal> x670=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x670.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x669.value)+(((1.5707963267949)*(x670.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x671=IKsin(j3);
IkReal x672=IKcos(j3);
IkReal x673=(cj4*cj5);
IkReal x674=(r12*sj4);
IkReal x675=(cj5*r10);
IkReal x676=((1.0)*x672);
IkReal x677=(r11*x671);
IkReal x678=((1.0)*x671);
IkReal x679=(sj5*x672);
IkReal x680=(cj4*sj5*x671);
evalcond[0]=((((-1.0)*cj5*r20*x676))+(((-1.0)*r22*sj4*x678))+((r21*x679))+((r21*x671*x673))+((r20*x680)));
evalcond[1]=(((r01*x679))+((r01*x671*x673))+(((-1.0)*cj5*r00*x676))+(((-1.0)*r02*sj4*x678))+((r00*x680)));
evalcond[2]=((1.0)+((x673*x677))+(((-1.0)*x675*x676))+((r11*x679))+((r10*x680))+(((-1.0)*x674*x678)));
evalcond[3]=(((sj5*x677))+((x672*x674))+(((-1.0)*x675*x678))+(((-1.0)*cj4*r10*sj5*x676))+(((-1.0)*r11*x673*x676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x681=((0.830985915492958)*sj4);
IkReal x682=((0.211267605633803)*sj5);
IkReal x683=((0.830985915492958)*cj4);
IkReal x684=((0.211267605633803)*cj5);
if( IKabs((((r00*sj5*x681))+((cj5*r01*x681))+(((-1.0)*r00*x684))+(((1.40845070422535)*px))+((r01*x682))+((r02*x683)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x682))+((r22*x683))+((cj5*r21*x681))+(((1.40845070422535)*pz))+(((-1.0)*r20*x684))+((r20*sj5*x681)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5*x681))+((cj5*r01*x681))+(((-1.0)*r00*x684))+(((1.40845070422535)*px))+((r01*x682))+((r02*x683))))+IKsqr((((r21*x682))+((r22*x683))+((cj5*r21*x681))+(((1.40845070422535)*pz))+(((-1.0)*r20*x684))+((r20*sj5*x681))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*sj5*x681))+((cj5*r01*x681))+(((-1.0)*r00*x684))+(((1.40845070422535)*px))+((r01*x682))+((r02*x683))), (((r21*x682))+((r22*x683))+((cj5*r21*x681))+(((1.40845070422535)*pz))+(((-1.0)*r20*x684))+((r20*sj5*x681))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x685=(r00*sj5);
IkReal x686=(r21*sj5);
IkReal x687=((0.59)*sj4);
IkReal x688=(cj5*r21);
IkReal x689=(cj5*r01);
IkReal x690=(r20*sj5);
IkReal x691=(cj5*r00);
IkReal x692=((0.59)*sj3);
IkReal x693=(cj5*r20);
IkReal x694=((0.59)*cj4);
IkReal x695=(r01*sj5);
IkReal x696=((0.15)*x686);
IkReal x697=((0.15)*x693);
IkReal x698=((0.71)*(IKcos(j1)));
IkReal x699=((0.71)*(IKsin(j1)));
IkReal x700=((0.15)*x691);
IkReal x701=((0.15)*x695);
IkReal x702=(cj3*x694);
IkReal x703=(pz+x696);
IkReal x704=(x699+x700);
IkReal x705=(x697+x698);
evalcond[0]=(((x687*x689))+((x685*x687))+((r02*x694))+px+(((-1.0)*x704))+x701);
evalcond[1]=(((x687*x688))+((x687*x690))+((r22*x694))+(((-1.0)*x705))+x703);
evalcond[2]=((((-1.0)*x689*x702))+((cj3*r02*x687))+((x692*x695))+(((-1.0)*x685*x702))+(((-1.0)*x705))+x703+(((-1.0)*x691*x692)));
evalcond[3]=(((x686*x692))+(((-1.0)*x690*x702))+(((-1.0)*px))+(((-1.0)*x692*x693))+(((-1.0)*x701))+(((-1.0)*x688*x702))+x704+((cj3*r22*x687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x706=(cj4*sj1);
IkReal x707=(cj1*cj4);
IkReal x708=(cj5*sj4);
IkReal x709=((1.0)*cj1);
IkReal x710=(sj4*sj5);
IkReal x711=(sj1*x710);
if( IKabs((((r22*x707))+((r00*x711))+((cj1*r21*x708))+((r02*x706))+((r01*sj1*x708))+((cj1*r20*x710)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x706))+(((-1.0)*r01*x708*x709))+((r21*sj1*x708))+((r20*x711))+(((-1.0)*r00*x709*x710))+(((-1.0)*r02*x707)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x707))+((r00*x711))+((cj1*r21*x708))+((r02*x706))+((r01*sj1*x708))+((cj1*r20*x710))))+IKsqr((((r22*x706))+(((-1.0)*r01*x708*x709))+((r21*sj1*x708))+((r20*x711))+(((-1.0)*r00*x709*x710))+(((-1.0)*r02*x707))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x707))+((r00*x711))+((cj1*r21*x708))+((r02*x706))+((r01*sj1*x708))+((cj1*r20*x710))), (((r22*x706))+(((-1.0)*r01*x708*x709))+((r21*sj1*x708))+((r20*x711))+(((-1.0)*r00*x709*x710))+(((-1.0)*r02*x707))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x712=IKsin(j2);
IkReal x713=IKcos(j2);
IkReal x714=(cj3*sj4);
IkReal x715=((1.0)*cj5);
IkReal x716=(r21*sj5);
IkReal x717=(cj3*cj4);
IkReal x718=((0.15)*cj5);
IkReal x719=((1.0)*sj5);
IkReal x720=((1.0)*cj4);
IkReal x721=(r01*sj5);
IkReal x722=(sj1*x712);
IkReal x723=(cj1*x712);
IkReal x724=((0.59)*x713);
IkReal x725=((1.0)*x713);
IkReal x726=(cj1*x725);
evalcond[0]=((((-1.0)*r20*sj4*x719))+((sj1*x713))+x723+(((-1.0)*r21*sj4*x715))+(((-1.0)*r22*x720)));
evalcond[1]=((((-1.0)*r02*x720))+(((-1.0)*r01*sj4*x715))+(((-1.0)*x726))+(((-1.0)*r00*sj4*x719))+x722);
evalcond[2]=((((0.71)*cj1))+(((-0.59)*x723))+(((-1.0)*pz))+((r20*x718))+(((-1.0)*sj1*x724))+(((-0.15)*x716)));
evalcond[3]=(((cj1*x724))+(((-0.15)*x721))+(((-0.59)*x722))+((r00*x718))+(((-1.0)*px))+(((0.71)*sj1)));
evalcond[4]=(((r22*x714))+(((-1.0)*r20*sj3*x715))+(((-1.0)*x726))+((sj3*x716))+(((-1.0)*r20*x717*x719))+x722+(((-1.0)*r21*x715*x717)));
evalcond[5]=((((-1.0)*r01*x715*x717))+((sj3*x721))+(((-1.0)*r00*sj3*x715))+(((-1.0)*x723))+(((-1.0)*sj1*x725))+(((-1.0)*r00*x717*x719))+((r02*x714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x727=((1.0)*r20);
IkReal x728=(((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)));
j3eval[0]=x728;
j3eval[1]=IKsign(x728);
j3eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x727)))))+(IKabs(((((-1.0)*cj4*sj5*x727))+((r22*sj4))+(((-1.0)*cj4*cj5*r21))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x729=((1.0)*sj4);
IkReal x730=((1.0)*cj4);
IkReal x731=((((-1.0)*r20*sj5*x729))+(((-1.0)*cj5*r21*x729))+(((-1.0)*r22*x730)));
j3eval[0]=x731;
j3eval[1]=((IKabs((((r02*sj4))+(((-1.0)*r00*sj5*x730))+(((-1.0)*cj5*r01*x730)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j3eval[2]=IKsign(x731);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x732=cj4*cj4;
IkReal x733=cj5*cj5;
IkReal x734=r10*r10;
IkReal x735=r11*r11;
IkReal x736=r12*r12;
IkReal x737=(cj5*r10);
IkReal x738=((1.0)*x732);
IkReal x739=(cj4*r10*sj5);
IkReal x740=((2.0)*r12*sj4);
IkReal x741=((2.0)*r11*sj5);
IkReal x742=(cj4*cj5*r11);
IkReal x743=(x733*x735);
IkReal x744=(x733*x734);
IkReal x745=((((-1.0)*x732*x737*x741))+((x739*x740))+(((-1.0)*x734*x738))+(((-1.0)*x736))+(((-1.0)*x735))+((x740*x742))+(((-1.0)*x738*x743))+((x732*x744))+((x737*x741))+(((-1.0)*x744))+x743+((x732*x736)));
j3eval[0]=x745;
j3eval[1]=IKsign(x745);
j3eval[2]=((IKabs(((((-1.0)*x739))+((r12*sj4))+(((-1.0)*x742)))))+(IKabs(((((-1.0)*r11*sj5))+x737))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x746=cj4*cj4;
IkReal x747=cj5*cj5;
IkReal x748=r10*r10;
IkReal x749=r11*r11;
IkReal x750=r12*r12;
IkReal x751=(cj5*r11);
IkReal x752=(r10*sj5);
IkReal x753=((1.0)*cj4);
IkReal x754=((1.0)*x746);
IkReal x755=(x747*x749);
IkReal x756=((2.0)*cj4*r12*sj4);
IkReal x757=(x747*x748);
CheckValue<IkReal> x758 = IKatan2WithCheck(IkReal(((((-1.0)*x751*x753))+((r12*sj4))+(((-1.0)*x752*x753)))),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x758.valid){
continue;
}
CheckValue<IkReal> x759=IKPowWithIntegerCheck(IKsign((((x752*x756))+((x751*x756))+(((-1.0)*x754*x755))+((x746*x750))+((x746*x757))+(((-1.0)*x750))+(((-1.0)*x757))+(((-1.0)*x749))+x755+(((-2.0)*x746*x751*x752))+(((-1.0)*x748*x754))+(((2.0)*x751*x752)))),-1);
if(!x759.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x758.value)+(((1.5707963267949)*(x759.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x760=IKsin(j3);
IkReal x761=IKcos(j3);
IkReal x762=(cj4*cj5);
IkReal x763=(r12*sj4);
IkReal x764=(cj5*r10);
IkReal x765=((1.0)*x761);
IkReal x766=(r11*x760);
IkReal x767=((1.0)*x760);
IkReal x768=(sj5*x761);
IkReal x769=(cj4*sj5*x760);
evalcond[0]=(((r20*x769))+((r21*x768))+(((-1.0)*r22*sj4*x767))+((r21*x760*x762))+(((-1.0)*cj5*r20*x765)));
evalcond[1]=((((-1.0)*cj5*r00*x765))+(((-1.0)*r02*sj4*x767))+((r00*x769))+((r01*x760*x762))+((r01*x768)));
evalcond[2]=((-1.0)+((r10*x769))+(((-1.0)*x763*x767))+(((-1.0)*x764*x765))+((x762*x766))+((r11*x768)));
evalcond[3]=((((-1.0)*r11*x762*x765))+((x761*x763))+(((-1.0)*x764*x767))+(((-1.0)*cj4*r10*sj5*x765))+((sj5*x766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x770=((0.830985915492958)*sj4);
IkReal x771=((0.211267605633803)*sj5);
IkReal x772=((0.830985915492958)*cj4);
IkReal x773=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*sj5*x770))+(((-1.0)*cj5*r01*x770))+(((-1.40845070422535)*px))+(((-1.0)*r02*x772))+(((-1.0)*r01*x771))+((r00*x773)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x773))+((r22*x772))+((r21*x771))+((r20*sj5*x770))+(((1.40845070422535)*pz))+((cj5*r21*x770)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5*x770))+(((-1.0)*cj5*r01*x770))+(((-1.40845070422535)*px))+(((-1.0)*r02*x772))+(((-1.0)*r01*x771))+((r00*x773))))+IKsqr(((((-1.0)*r20*x773))+((r22*x772))+((r21*x771))+((r20*sj5*x770))+(((1.40845070422535)*pz))+((cj5*r21*x770))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj5*x770))+(((-1.0)*cj5*r01*x770))+(((-1.40845070422535)*px))+(((-1.0)*r02*x772))+(((-1.0)*r01*x771))+((r00*x773))), ((((-1.0)*r20*x773))+((r22*x772))+((r21*x771))+((r20*sj5*x770))+(((1.40845070422535)*pz))+((cj5*r21*x770))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x774=((1.0)*px);
IkReal x775=(r00*sj5);
IkReal x776=(r21*sj5);
IkReal x777=((0.59)*sj4);
IkReal x778=(cj5*r21);
IkReal x779=(cj5*r01);
IkReal x780=(r20*sj5);
IkReal x781=(cj5*r00);
IkReal x782=((0.59)*sj3);
IkReal x783=(cj5*r20);
IkReal x784=((0.59)*cj4);
IkReal x785=(r01*sj5);
IkReal x786=((0.15)*x781);
IkReal x787=((0.15)*x785);
IkReal x788=((0.71)*(IKsin(j1)));
IkReal x789=((0.15)*x783);
IkReal x790=((0.71)*(IKcos(j1)));
IkReal x791=((0.15)*x776);
IkReal x792=(cj3*x784);
IkReal x793=(x790+x789);
IkReal x794=(x774+x787+x788);
evalcond[0]=(((x777*x778))+(((-1.0)*x793))+((r22*x784))+pz+x791+((x777*x780)));
evalcond[1]=((((-1.0)*x794))+(((-1.0)*x775*x777))+x786+(((-1.0)*x777*x779))+(((-1.0)*r02*x784)));
evalcond[2]=((((-1.0)*x794))+((x782*x783))+((x778*x792))+(((-1.0)*x776*x782))+(((-1.0)*cj3*r22*x777))+((x780*x792))+x786);
evalcond[3]=((((-1.0)*x779*x792))+(((-1.0)*x791))+(((-1.0)*x775*x792))+((x782*x785))+(((-1.0)*x781*x782))+((cj3*r02*x777))+(((-1.0)*pz))+x793);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x795=(cj4*r22);
IkReal x796=(cj5*sj4);
IkReal x797=((1.0)*sj1);
IkReal x798=(cj4*r02);
IkReal x799=(sj4*sj5);
if( IKabs((((cj1*r20*x799))+((cj1*r21*x796))+((cj1*x795))+(((-1.0)*r01*x796*x797))+(((-1.0)*x797*x798))+(((-1.0)*r00*x797*x799)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*x796))+((cj1*x798))+((sj1*x795))+((r20*sj1*x799))+((r21*sj1*x796))+((cj1*r00*x799)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x799))+((cj1*r21*x796))+((cj1*x795))+(((-1.0)*r01*x796*x797))+(((-1.0)*x797*x798))+(((-1.0)*r00*x797*x799))))+IKsqr((((cj1*r01*x796))+((cj1*x798))+((sj1*x795))+((r20*sj1*x799))+((r21*sj1*x796))+((cj1*r00*x799))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x799))+((cj1*r21*x796))+((cj1*x795))+(((-1.0)*r01*x796*x797))+(((-1.0)*x797*x798))+(((-1.0)*r00*x797*x799))), (((cj1*r01*x796))+((cj1*x798))+((sj1*x795))+((r20*sj1*x799))+((r21*sj1*x796))+((cj1*r00*x799))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x800=IKcos(j2);
IkReal x801=IKsin(j2);
IkReal x802=(cj3*sj4);
IkReal x803=((1.0)*cj5);
IkReal x804=(r21*sj5);
IkReal x805=((0.59)*sj1);
IkReal x806=(cj3*cj4);
IkReal x807=((0.15)*cj5);
IkReal x808=((1.0)*sj5);
IkReal x809=((1.0)*cj4);
IkReal x810=(r01*sj5);
IkReal x811=(sj1*x800);
IkReal x812=(cj1*x801);
IkReal x813=(cj1*x800);
IkReal x814=(sj1*x801);
IkReal x815=(x812+x811);
evalcond[0]=((((-1.0)*r21*sj4*x803))+(((-1.0)*r22*x809))+(((-1.0)*r20*sj4*x808))+x815);
evalcond[1]=((((-1.0)*r01*sj4*x803))+(((-1.0)*r02*x809))+(((-1.0)*r00*sj4*x808))+(((-1.0)*x814))+x813);
evalcond[2]=((((0.71)*cj1))+(((-0.59)*x812))+(((-0.15)*x804))+(((-1.0)*pz))+(((-1.0)*x800*x805))+((r20*x807)));
evalcond[3]=((((-0.59)*x813))+(((-0.71)*sj1))+(((-1.0)*px))+((x801*x805))+((r00*x807))+(((-0.15)*x810)));
evalcond[4]=((((-1.0)*r00*x806*x808))+(((-1.0)*r01*x803*x806))+((r02*x802))+((sj3*x810))+x815+(((-1.0)*r00*sj3*x803)));
evalcond[5]=(((sj3*x804))+((r22*x802))+(((-1.0)*r21*x803*x806))+(((-1.0)*r20*sj3*x803))+(((-1.0)*x813))+(((-1.0)*r20*x806*x808))+x814);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x816=((1.0)*sj4);
IkReal x817=((1.0)*cj4);
CheckValue<IkReal> x818=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x816))+(((-1.0)*cj5*r21*x816))+(((-1.0)*r22*x817)))),-1);
if(!x818.valid){
continue;
}
CheckValue<IkReal> x819 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((((-1.0)*r00*sj5*x817))+((r02*sj4))+(((-1.0)*cj5*r01*x817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x819.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x818.value)))+(x819.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x820=IKsin(j3);
IkReal x821=IKcos(j3);
IkReal x822=(cj4*cj5);
IkReal x823=(r12*sj4);
IkReal x824=(cj5*r10);
IkReal x825=((1.0)*x821);
IkReal x826=(r11*x820);
IkReal x827=((1.0)*x820);
IkReal x828=(sj5*x821);
IkReal x829=(cj4*sj5*x820);
evalcond[0]=(((r21*x828))+(((-1.0)*r22*sj4*x827))+((r20*x829))+((r21*x820*x822))+(((-1.0)*cj5*r20*x825)));
evalcond[1]=(((r01*x820*x822))+((r00*x829))+((r01*x828))+(((-1.0)*cj5*r00*x825))+(((-1.0)*r02*sj4*x827)));
evalcond[2]=((-1.0)+(((-1.0)*x823*x827))+((r10*x829))+(((-1.0)*x824*x825))+((x822*x826))+((r11*x828)));
evalcond[3]=(((x821*x823))+(((-1.0)*x824*x827))+((sj5*x826))+(((-1.0)*cj4*r10*sj5*x825))+(((-1.0)*r11*x822*x825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x830=((0.830985915492958)*sj4);
IkReal x831=((0.211267605633803)*sj5);
IkReal x832=((0.830985915492958)*cj4);
IkReal x833=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*sj5*x830))+(((-1.0)*r02*x832))+((r00*x833))+(((-1.40845070422535)*px))+(((-1.0)*cj5*r01*x830))+(((-1.0)*r01*x831)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x832))+(((-1.0)*r20*x833))+((r21*x831))+((cj5*r21*x830))+(((1.40845070422535)*pz))+((r20*sj5*x830)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5*x830))+(((-1.0)*r02*x832))+((r00*x833))+(((-1.40845070422535)*px))+(((-1.0)*cj5*r01*x830))+(((-1.0)*r01*x831))))+IKsqr((((r22*x832))+(((-1.0)*r20*x833))+((r21*x831))+((cj5*r21*x830))+(((1.40845070422535)*pz))+((r20*sj5*x830))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj5*x830))+(((-1.0)*r02*x832))+((r00*x833))+(((-1.40845070422535)*px))+(((-1.0)*cj5*r01*x830))+(((-1.0)*r01*x831))), (((r22*x832))+(((-1.0)*r20*x833))+((r21*x831))+((cj5*r21*x830))+(((1.40845070422535)*pz))+((r20*sj5*x830))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x834=((1.0)*px);
IkReal x835=(r00*sj5);
IkReal x836=(r21*sj5);
IkReal x837=((0.59)*sj4);
IkReal x838=(cj5*r21);
IkReal x839=(cj5*r01);
IkReal x840=(r20*sj5);
IkReal x841=(cj5*r00);
IkReal x842=((0.59)*sj3);
IkReal x843=(cj5*r20);
IkReal x844=((0.59)*cj4);
IkReal x845=(r01*sj5);
IkReal x846=((0.15)*x841);
IkReal x847=((0.15)*x845);
IkReal x848=((0.71)*(IKsin(j1)));
IkReal x849=((0.15)*x843);
IkReal x850=((0.71)*(IKcos(j1)));
IkReal x851=((0.15)*x836);
IkReal x852=(cj3*x844);
IkReal x853=(x850+x849);
IkReal x854=(x834+x847+x848);
evalcond[0]=((((-1.0)*x853))+((r22*x844))+((x837*x840))+((x837*x838))+pz+x851);
evalcond[1]=((((-1.0)*r02*x844))+(((-1.0)*x854))+(((-1.0)*x835*x837))+(((-1.0)*x837*x839))+x846);
evalcond[2]=((((-1.0)*x854))+(((-1.0)*x836*x842))+(((-1.0)*cj3*r22*x837))+((x842*x843))+((x838*x852))+((x840*x852))+x846);
evalcond[3]=((((-1.0)*x851))+(((-1.0)*x841*x842))+(((-1.0)*x839*x852))+((cj3*r02*x837))+(((-1.0)*pz))+(((-1.0)*x835*x852))+((x842*x845))+x853);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x855=(cj4*r22);
IkReal x856=(cj5*sj4);
IkReal x857=((1.0)*sj1);
IkReal x858=(cj4*r02);
IkReal x859=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x856*x857))+((cj1*r21*x856))+((cj1*x855))+((cj1*r20*x859))+(((-1.0)*r00*x857*x859))+(((-1.0)*x857*x858)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x859))+((r21*sj1*x856))+((cj1*r01*x856))+((cj1*r00*x859))+((sj1*x855))+((cj1*x858)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x856*x857))+((cj1*r21*x856))+((cj1*x855))+((cj1*r20*x859))+(((-1.0)*r00*x857*x859))+(((-1.0)*x857*x858))))+IKsqr((((r20*sj1*x859))+((r21*sj1*x856))+((cj1*r01*x856))+((cj1*r00*x859))+((sj1*x855))+((cj1*x858))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x856*x857))+((cj1*r21*x856))+((cj1*x855))+((cj1*r20*x859))+(((-1.0)*r00*x857*x859))+(((-1.0)*x857*x858))), (((r20*sj1*x859))+((r21*sj1*x856))+((cj1*r01*x856))+((cj1*r00*x859))+((sj1*x855))+((cj1*x858))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x860=IKcos(j2);
IkReal x861=IKsin(j2);
IkReal x862=(cj3*sj4);
IkReal x863=((1.0)*cj5);
IkReal x864=(r21*sj5);
IkReal x865=((0.59)*sj1);
IkReal x866=(cj3*cj4);
IkReal x867=((0.15)*cj5);
IkReal x868=((1.0)*sj5);
IkReal x869=((1.0)*cj4);
IkReal x870=(r01*sj5);
IkReal x871=(sj1*x860);
IkReal x872=(cj1*x861);
IkReal x873=(cj1*x860);
IkReal x874=(sj1*x861);
IkReal x875=(x871+x872);
evalcond[0]=((((-1.0)*r21*sj4*x863))+(((-1.0)*r20*sj4*x868))+x875+(((-1.0)*r22*x869)));
evalcond[1]=((((-1.0)*x874))+(((-1.0)*r01*sj4*x863))+(((-1.0)*r02*x869))+x873+(((-1.0)*r00*sj4*x868)));
evalcond[2]=((((0.71)*cj1))+(((-0.15)*x864))+(((-1.0)*x860*x865))+(((-1.0)*pz))+(((-0.59)*x872))+((r20*x867)));
evalcond[3]=(((r00*x867))+(((-0.15)*x870))+(((-0.71)*sj1))+(((-1.0)*px))+((x861*x865))+(((-0.59)*x873)));
evalcond[4]=(((sj3*x870))+(((-1.0)*r01*x863*x866))+((r02*x862))+(((-1.0)*r00*sj3*x863))+x875+(((-1.0)*r00*x866*x868)));
evalcond[5]=(((sj3*x864))+((r22*x862))+(((-1.0)*x873))+(((-1.0)*r21*x863*x866))+(((-1.0)*r20*x866*x868))+x874+(((-1.0)*r20*sj3*x863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x876=((1.0)*r20);
CheckValue<IkReal> x877 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*x876)))),IkReal((((r22*sj4))+(((-1.0)*cj4*sj5*x876))+(((-1.0)*cj4*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x877.valid){
continue;
}
CheckValue<IkReal> x878=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)))),-1);
if(!x878.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x877.value)+(((1.5707963267949)*(x878.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x879=IKsin(j3);
IkReal x880=IKcos(j3);
IkReal x881=(cj4*cj5);
IkReal x882=(r12*sj4);
IkReal x883=(cj5*r10);
IkReal x884=((1.0)*x880);
IkReal x885=(r11*x879);
IkReal x886=((1.0)*x879);
IkReal x887=(sj5*x880);
IkReal x888=(cj4*sj5*x879);
evalcond[0]=(((r21*x879*x881))+((r20*x888))+(((-1.0)*cj5*r20*x884))+((r21*x887))+(((-1.0)*r22*sj4*x886)));
evalcond[1]=((((-1.0)*r02*sj4*x886))+((r00*x888))+((r01*x887))+(((-1.0)*cj5*r00*x884))+((r01*x879*x881)));
evalcond[2]=((-1.0)+((r11*x887))+(((-1.0)*x883*x884))+((x881*x885))+(((-1.0)*x882*x886))+((r10*x888)));
evalcond[3]=((((-1.0)*x883*x886))+((x880*x882))+(((-1.0)*r11*x881*x884))+((sj5*x885))+(((-1.0)*cj4*r10*sj5*x884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x889=((0.830985915492958)*sj4);
IkReal x890=((0.211267605633803)*sj5);
IkReal x891=((0.830985915492958)*cj4);
IkReal x892=((0.211267605633803)*cj5);
if( IKabs((((r00*x892))+(((-1.0)*r00*sj5*x889))+(((-1.40845070422535)*px))+(((-1.0)*cj5*r01*x889))+(((-1.0)*r02*x891))+(((-1.0)*r01*x890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x889))+(((1.40845070422535)*pz))+((r21*x890))+((cj5*r21*x889))+((r22*x891))+(((-1.0)*r20*x892)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x892))+(((-1.0)*r00*sj5*x889))+(((-1.40845070422535)*px))+(((-1.0)*cj5*r01*x889))+(((-1.0)*r02*x891))+(((-1.0)*r01*x890))))+IKsqr((((r20*sj5*x889))+(((1.40845070422535)*pz))+((r21*x890))+((cj5*r21*x889))+((r22*x891))+(((-1.0)*r20*x892))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*x892))+(((-1.0)*r00*sj5*x889))+(((-1.40845070422535)*px))+(((-1.0)*cj5*r01*x889))+(((-1.0)*r02*x891))+(((-1.0)*r01*x890))), (((r20*sj5*x889))+(((1.40845070422535)*pz))+((r21*x890))+((cj5*r21*x889))+((r22*x891))+(((-1.0)*r20*x892))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x893=((1.0)*px);
IkReal x894=(r00*sj5);
IkReal x895=(r21*sj5);
IkReal x896=((0.59)*sj4);
IkReal x897=(cj5*r21);
IkReal x898=(cj5*r01);
IkReal x899=(r20*sj5);
IkReal x900=(cj5*r00);
IkReal x901=((0.59)*sj3);
IkReal x902=(cj5*r20);
IkReal x903=((0.59)*cj4);
IkReal x904=(r01*sj5);
IkReal x905=((0.15)*x900);
IkReal x906=((0.15)*x904);
IkReal x907=((0.71)*(IKsin(j1)));
IkReal x908=((0.15)*x902);
IkReal x909=((0.71)*(IKcos(j1)));
IkReal x910=((0.15)*x895);
IkReal x911=(cj3*x903);
IkReal x912=(x908+x909);
IkReal x913=(x893+x906+x907);
evalcond[0]=(((x896*x897))+((x896*x899))+(((-1.0)*x912))+((r22*x903))+pz+x910);
evalcond[1]=((((-1.0)*x896*x898))+(((-1.0)*x913))+(((-1.0)*r02*x903))+(((-1.0)*x894*x896))+x905);
evalcond[2]=((((-1.0)*x895*x901))+((x901*x902))+(((-1.0)*x913))+(((-1.0)*cj3*r22*x896))+((x897*x911))+((x899*x911))+x905);
evalcond[3]=((((-1.0)*x900*x901))+((x901*x904))+(((-1.0)*x894*x911))+(((-1.0)*x910))+(((-1.0)*x898*x911))+(((-1.0)*pz))+((cj3*r02*x896))+x912);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x914=(cj4*r22);
IkReal x915=(cj5*sj4);
IkReal x916=((1.0)*sj1);
IkReal x917=(cj4*r02);
IkReal x918=(sj4*sj5);
if( IKabs((((cj1*r21*x915))+((cj1*r20*x918))+(((-1.0)*r00*x916*x918))+(((-1.0)*r01*x915*x916))+((cj1*x914))+(((-1.0)*x916*x917)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*x915))+((cj1*r00*x918))+((r20*sj1*x918))+((r21*sj1*x915))+((sj1*x914))+((cj1*x917)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x915))+((cj1*r20*x918))+(((-1.0)*r00*x916*x918))+(((-1.0)*r01*x915*x916))+((cj1*x914))+(((-1.0)*x916*x917))))+IKsqr((((cj1*r01*x915))+((cj1*r00*x918))+((r20*sj1*x918))+((r21*sj1*x915))+((sj1*x914))+((cj1*x917))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x915))+((cj1*r20*x918))+(((-1.0)*r00*x916*x918))+(((-1.0)*r01*x915*x916))+((cj1*x914))+(((-1.0)*x916*x917))), (((cj1*r01*x915))+((cj1*r00*x918))+((r20*sj1*x918))+((r21*sj1*x915))+((sj1*x914))+((cj1*x917))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x919=IKcos(j2);
IkReal x920=IKsin(j2);
IkReal x921=(cj3*sj4);
IkReal x922=((1.0)*cj5);
IkReal x923=(r21*sj5);
IkReal x924=((0.59)*sj1);
IkReal x925=(cj3*cj4);
IkReal x926=((0.15)*cj5);
IkReal x927=((1.0)*sj5);
IkReal x928=((1.0)*cj4);
IkReal x929=(r01*sj5);
IkReal x930=(sj1*x919);
IkReal x931=(cj1*x920);
IkReal x932=(cj1*x919);
IkReal x933=(sj1*x920);
IkReal x934=(x931+x930);
evalcond[0]=((((-1.0)*r20*sj4*x927))+(((-1.0)*r21*sj4*x922))+(((-1.0)*r22*x928))+x934);
evalcond[1]=((((-1.0)*r01*sj4*x922))+(((-1.0)*r02*x928))+(((-1.0)*x933))+(((-1.0)*r00*sj4*x927))+x932);
evalcond[2]=((((0.71)*cj1))+(((-1.0)*pz))+(((-0.59)*x931))+(((-1.0)*x919*x924))+((r20*x926))+(((-0.15)*x923)));
evalcond[3]=(((x920*x924))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.59)*x932))+((r00*x926))+(((-0.15)*x929)));
evalcond[4]=((((-1.0)*r00*x925*x927))+(((-1.0)*r01*x922*x925))+x934+((sj3*x929))+(((-1.0)*r00*sj3*x922))+((r02*x921)));
evalcond[5]=((((-1.0)*r20*x925*x927))+((r22*x921))+(((-1.0)*r20*sj3*x922))+(((-1.0)*x932))+(((-1.0)*r21*x922*x925))+x933+((sj3*x923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x935=((1.0)*sj4);
IkReal x936=(cj5*sj0);
IkReal x937=(cj0*sj5);
IkReal x938=(sj0*sj5);
IkReal x939=((1.0)*cj4);
IkReal x940=(cj0*cj5);
CheckValue<IkReal> x941 = IKatan2WithCheck(IkReal((((r11*x937))+(((-1.0)*r10*x940))+(((-1.0)*r01*x938))+((r00*x936)))),IkReal(((((-1.0)*r11*x939*x940))+(((-1.0)*r10*x937*x939))+(((-1.0)*r02*sj0*x935))+((cj0*r12*sj4))+((cj4*r01*x936))+((cj4*r00*x938)))),IKFAST_ATAN2_MAGTHRESH);
if(!x941.valid){
continue;
}
CheckValue<IkReal> x942=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x939))+(((-1.0)*cj5*r21*x935))+(((-1.0)*r20*sj5*x935)))),-1);
if(!x942.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x941.value)+(((1.5707963267949)*(x942.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x943=IKsin(j3);
IkReal x944=IKcos(j3);
IkReal x945=(sj5*x944);
IkReal x946=(cj4*cj5*x943);
IkReal x947=(cj4*sj5*x943);
IkReal x948=((1.0)*cj5*x944);
IkReal x949=((1.0)*sj4*x943);
evalcond[0]=(((r21*x945))+((r21*x946))+(((-1.0)*r20*x948))+(((-1.0)*r22*x949))+((r20*x947)));
evalcond[1]=((((-1.0)*r02*x949))+(((-1.0)*r00*x948))+cj0+((r01*x945))+((r01*x946))+((r00*x947)));
evalcond[2]=(sj0+(((-1.0)*r12*x949))+((r11*x946))+((r11*x945))+(((-1.0)*r10*x948))+((r10*x947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x950=((0.830985915492958)*sj4);
IkReal x951=((0.211267605633803)*sj5);
IkReal x952=((0.830985915492958)*cj4);
IkReal x953=((0.211267605633803)*cj5);
if( IKabs((((cj5*r01*x950))+(((-1.0)*r00*x953))+((r01*x951))+((r00*sj5*x950))+((r02*x952))+(((1.40845070422535)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x952))+(((-1.0)*r20*x953))+((cj5*r21*x950))+((r20*sj5*x950))+((r21*x951))+(((1.40845070422535)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r01*x950))+(((-1.0)*r00*x953))+((r01*x951))+((r00*sj5*x950))+((r02*x952))+(((1.40845070422535)*px))))+IKsqr((((r22*x952))+(((-1.0)*r20*x953))+((cj5*r21*x950))+((r20*sj5*x950))+((r21*x951))+(((1.40845070422535)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r01*x950))+(((-1.0)*r00*x953))+((r01*x951))+((r00*sj5*x950))+((r02*x952))+(((1.40845070422535)*px))), (((r22*x952))+(((-1.0)*r20*x953))+((cj5*r21*x950))+((r20*sj5*x950))+((r21*x951))+(((1.40845070422535)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x954=(r00*sj5);
IkReal x955=(r21*sj5);
IkReal x956=((0.59)*sj4);
IkReal x957=(cj5*r21);
IkReal x958=(cj5*r01);
IkReal x959=(r20*sj5);
IkReal x960=(cj5*r00);
IkReal x961=((0.59)*sj3);
IkReal x962=(cj5*r20);
IkReal x963=((0.59)*cj4);
IkReal x964=(r01*sj5);
IkReal x965=((0.15)*x955);
IkReal x966=((0.15)*x962);
IkReal x967=((0.71)*(IKcos(j1)));
IkReal x968=((0.71)*(IKsin(j1)));
IkReal x969=((0.15)*x960);
IkReal x970=((0.15)*x964);
IkReal x971=(cj3*x963);
IkReal x972=(pz+x965);
IkReal x973=(x968+x969);
IkReal x974=(x966+x967);
evalcond[0]=(((x956*x958))+px+((r02*x963))+x970+(((-1.0)*x973))+((x954*x956)));
evalcond[1]=(((x956*x957))+((x956*x959))+x972+(((-1.0)*x974))+((r22*x963)));
evalcond[2]=((((-1.0)*x960*x961))+((cj3*r02*x956))+((x961*x964))+(((-1.0)*x958*x971))+x972+(((-1.0)*x974))+(((-1.0)*x954*x971)));
evalcond[3]=((((-1.0)*x961*x962))+(((-1.0)*x957*x971))+(((-1.0)*px))+((cj3*r22*x956))+(((-1.0)*x959*x971))+x973+(((-1.0)*x970))+((x955*x961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x975=(cj4*sj1);
IkReal x976=(cj1*cj4);
IkReal x977=(cj5*sj4);
IkReal x978=((1.0)*cj1);
IkReal x979=(sj4*sj5);
IkReal x980=(sj1*x979);
if( IKabs((((cj1*r20*x979))+((r22*x976))+((r01*sj1*x977))+((r00*x980))+((r02*x975))+((cj1*r21*x977)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x977))+(((-1.0)*r02*x976))+((r22*x975))+(((-1.0)*r00*x978*x979))+(((-1.0)*r01*x977*x978))+((r20*x980)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x979))+((r22*x976))+((r01*sj1*x977))+((r00*x980))+((r02*x975))+((cj1*r21*x977))))+IKsqr((((r21*sj1*x977))+(((-1.0)*r02*x976))+((r22*x975))+(((-1.0)*r00*x978*x979))+(((-1.0)*r01*x977*x978))+((r20*x980))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x979))+((r22*x976))+((r01*sj1*x977))+((r00*x980))+((r02*x975))+((cj1*r21*x977))), (((r21*sj1*x977))+(((-1.0)*r02*x976))+((r22*x975))+(((-1.0)*r00*x978*x979))+(((-1.0)*r01*x977*x978))+((r20*x980))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x981=IKsin(j2);
IkReal x982=IKcos(j2);
IkReal x983=(cj3*sj4);
IkReal x984=((1.0)*cj5);
IkReal x985=(r21*sj5);
IkReal x986=(cj3*cj4);
IkReal x987=((0.15)*cj5);
IkReal x988=((1.0)*sj5);
IkReal x989=((1.0)*cj4);
IkReal x990=(r01*sj5);
IkReal x991=(sj1*x981);
IkReal x992=(cj1*x981);
IkReal x993=((0.59)*x982);
IkReal x994=((1.0)*x982);
IkReal x995=(cj1*x994);
evalcond[0]=(((sj1*x982))+(((-1.0)*r21*sj4*x984))+x992+(((-1.0)*r22*x989))+(((-1.0)*r20*sj4*x988)));
evalcond[1]=((((-1.0)*r01*sj4*x984))+(((-1.0)*x995))+(((-1.0)*r00*sj4*x988))+(((-1.0)*r02*x989))+x991);
evalcond[2]=((((0.71)*cj1))+(((-0.59)*x992))+(((-0.15)*x985))+(((-1.0)*sj1*x993))+(((-1.0)*pz))+((r20*x987)));
evalcond[3]=((((-0.59)*x991))+((cj1*x993))+((r00*x987))+(((-0.15)*x990))+(((-1.0)*px))+(((0.71)*sj1)));
evalcond[4]=((((-1.0)*r21*x984*x986))+((r22*x983))+(((-1.0)*r20*sj3*x984))+(((-1.0)*r20*x986*x988))+(((-1.0)*x995))+((sj3*x985))+x991);
evalcond[5]=((((-1.0)*x992))+(((-1.0)*r00*sj3*x984))+(((-1.0)*sj1*x994))+(((-1.0)*r00*x986*x988))+((sj3*x990))+(((-1.0)*r01*x984*x986))+((r02*x983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x996=((0.830985915492958)*sj4);
IkReal x997=((0.211267605633803)*sj5);
IkReal x998=((0.830985915492958)*cj4);
IkReal x999=((0.211267605633803)*cj5);
if( IKabs((((r00*x999))+(((-1.0)*r00*sj5*x996))+(((-1.40845070422535)*px))+(((-1.0)*r01*x997))+(((-1.0)*r02*x998))+(((-1.0)*cj5*r01*x996)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.40845070422535)*pz))+((cj5*r21*x996))+((r20*sj5*x996))+((r21*x997))+((r22*x998))+(((-1.0)*r20*x999)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x999))+(((-1.0)*r00*sj5*x996))+(((-1.40845070422535)*px))+(((-1.0)*r01*x997))+(((-1.0)*r02*x998))+(((-1.0)*cj5*r01*x996))))+IKsqr(((((1.40845070422535)*pz))+((cj5*r21*x996))+((r20*sj5*x996))+((r21*x997))+((r22*x998))+(((-1.0)*r20*x999))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*x999))+(((-1.0)*r00*sj5*x996))+(((-1.40845070422535)*px))+(((-1.0)*r01*x997))+(((-1.0)*r02*x998))+(((-1.0)*cj5*r01*x996))), ((((1.40845070422535)*pz))+((cj5*r21*x996))+((r20*sj5*x996))+((r21*x997))+((r22*x998))+(((-1.0)*r20*x999))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1000=((1.0)*px);
IkReal x1001=(r00*sj5);
IkReal x1002=(r21*sj5);
IkReal x1003=((0.59)*sj4);
IkReal x1004=(cj5*r21);
IkReal x1005=(cj5*r01);
IkReal x1006=(r20*sj5);
IkReal x1007=(cj5*r00);
IkReal x1008=((0.59)*sj3);
IkReal x1009=(cj5*r20);
IkReal x1010=((0.59)*cj4);
IkReal x1011=(r01*sj5);
IkReal x1012=((0.15)*x1007);
IkReal x1013=((0.15)*x1011);
IkReal x1014=((0.71)*(IKsin(j1)));
IkReal x1015=((0.15)*x1009);
IkReal x1016=((0.71)*(IKcos(j1)));
IkReal x1017=((0.15)*x1002);
IkReal x1018=(cj3*x1010);
IkReal x1019=(x1015+x1016);
IkReal x1020=(x1014+x1013+x1000);
evalcond[0]=(x1017+((r22*x1010))+(((-1.0)*x1019))+pz+((x1003*x1006))+((x1003*x1004)));
evalcond[1]=(x1012+(((-1.0)*r02*x1010))+(((-1.0)*x1020))+(((-1.0)*x1001*x1003))+(((-1.0)*x1003*x1005)));
evalcond[2]=(((x1008*x1009))+(((-1.0)*cj3*r22*x1003))+x1012+(((-1.0)*x1020))+((x1006*x1018))+(((-1.0)*x1002*x1008))+((x1004*x1018)));
evalcond[3]=(x1019+(((-1.0)*x1017))+(((-1.0)*x1005*x1018))+(((-1.0)*pz))+(((-1.0)*x1007*x1008))+(((-1.0)*x1001*x1018))+((cj3*r02*x1003))+((x1008*x1011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1021=(cj4*r22);
IkReal x1022=(cj5*sj4);
IkReal x1023=((1.0)*sj1);
IkReal x1024=(cj4*r02);
IkReal x1025=(sj4*sj5);
if( IKabs(((((-1.0)*x1023*x1024))+(((-1.0)*r01*x1022*x1023))+(((-1.0)*r00*x1023*x1025))+((cj1*r21*x1022))+((cj1*r20*x1025))+((cj1*x1021)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1021))+((r20*sj1*x1025))+((cj1*r01*x1022))+((cj1*r00*x1025))+((r21*sj1*x1022))+((cj1*x1024)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1023*x1024))+(((-1.0)*r01*x1022*x1023))+(((-1.0)*r00*x1023*x1025))+((cj1*r21*x1022))+((cj1*r20*x1025))+((cj1*x1021))))+IKsqr((((sj1*x1021))+((r20*sj1*x1025))+((cj1*r01*x1022))+((cj1*r00*x1025))+((r21*sj1*x1022))+((cj1*x1024))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1023*x1024))+(((-1.0)*r01*x1022*x1023))+(((-1.0)*r00*x1023*x1025))+((cj1*r21*x1022))+((cj1*r20*x1025))+((cj1*x1021))), (((sj1*x1021))+((r20*sj1*x1025))+((cj1*r01*x1022))+((cj1*r00*x1025))+((r21*sj1*x1022))+((cj1*x1024))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1026=IKcos(j2);
IkReal x1027=IKsin(j2);
IkReal x1028=(cj3*sj4);
IkReal x1029=((1.0)*cj5);
IkReal x1030=(r21*sj5);
IkReal x1031=((0.59)*sj1);
IkReal x1032=(cj3*cj4);
IkReal x1033=((0.15)*cj5);
IkReal x1034=((1.0)*sj5);
IkReal x1035=((1.0)*cj4);
IkReal x1036=(r01*sj5);
IkReal x1037=(sj1*x1026);
IkReal x1038=(cj1*x1027);
IkReal x1039=(cj1*x1026);
IkReal x1040=(sj1*x1027);
IkReal x1041=(x1038+x1037);
evalcond[0]=(x1041+(((-1.0)*r20*sj4*x1034))+(((-1.0)*r21*sj4*x1029))+(((-1.0)*r22*x1035)));
evalcond[1]=(x1039+(((-1.0)*r00*sj4*x1034))+(((-1.0)*r01*sj4*x1029))+(((-1.0)*r02*x1035))+(((-1.0)*x1040)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*x1026*x1031))+(((-1.0)*pz))+((r20*x1033))+(((-0.15)*x1030))+(((-0.59)*x1038)));
evalcond[3]=(((r00*x1033))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.15)*x1036))+(((-0.59)*x1039))+((x1027*x1031)));
evalcond[4]=((((-1.0)*r01*x1029*x1032))+(((-1.0)*r00*sj3*x1029))+x1041+((sj3*x1036))+(((-1.0)*r00*x1032*x1034))+((r02*x1028)));
evalcond[5]=((((-1.0)*r20*sj3*x1029))+(((-1.0)*r20*x1032*x1034))+x1040+(((-1.0)*x1039))+(((-1.0)*r21*x1029*x1032))+((r22*x1028))+((sj3*x1030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1042=((0.211267605633803)*sj5);
IkReal x1043=((0.211267605633803)*cj5);
IkReal x1044=((0.830985915492958)*cj4);
IkReal x1045=((0.830985915492958)*sj4*sj5);
IkReal x1046=((0.830985915492958)*cj5*sj4);
if( IKabs(((((-1.0)*r10*x1045))+(((-1.0)*r11*x1042))+(((-1.0)*r11*x1046))+(((-1.0)*r12*x1044))+(((-1.40845070422535)*py))+((r10*x1043)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1045))+((r21*x1046))+((r21*x1042))+(((1.40845070422535)*pz))+((r22*x1044))+(((-1.0)*r20*x1043)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1045))+(((-1.0)*r11*x1042))+(((-1.0)*r11*x1046))+(((-1.0)*r12*x1044))+(((-1.40845070422535)*py))+((r10*x1043))))+IKsqr((((r20*x1045))+((r21*x1046))+((r21*x1042))+(((1.40845070422535)*pz))+((r22*x1044))+(((-1.0)*r20*x1043))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x1045))+(((-1.0)*r11*x1042))+(((-1.0)*r11*x1046))+(((-1.0)*r12*x1044))+(((-1.40845070422535)*py))+((r10*x1043))), (((r20*x1045))+((r21*x1046))+((r21*x1042))+(((1.40845070422535)*pz))+((r22*x1044))+(((-1.0)*r20*x1043))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1047=((1.0)*py);
IkReal x1048=((0.15)*sj5);
IkReal x1049=(cj5*r10);
IkReal x1050=((0.59)*sj4);
IkReal x1051=(cj5*r21);
IkReal x1052=((0.59)*sj3);
IkReal x1053=(cj5*r11);
IkReal x1054=(cj5*r20);
IkReal x1055=((0.59)*cj4);
IkReal x1056=((0.15)*x1049);
IkReal x1057=((0.71)*(IKsin(j1)));
IkReal x1058=(r11*x1048);
IkReal x1059=((0.15)*x1054);
IkReal x1060=((0.71)*(IKcos(j1)));
IkReal x1061=(r21*x1048);
IkReal x1062=(cj3*sj5*x1055);
IkReal x1063=(x1059+x1060);
IkReal x1064=(x1057+x1058+x1047);
evalcond[0]=(x1061+((x1050*x1051))+pz+(((-1.0)*x1063))+((r22*x1055))+((r20*sj5*x1050)));
evalcond[1]=(x1056+(((-1.0)*r12*x1055))+(((-1.0)*r10*sj5*x1050))+(((-1.0)*x1064))+(((-1.0)*x1050*x1053)));
evalcond[2]=((((-1.0)*r21*sj5*x1052))+x1056+((r20*x1062))+((x1052*x1054))+((cj3*x1051*x1055))+(((-1.0)*cj3*r22*x1050))+(((-1.0)*x1064)));
evalcond[3]=(x1063+(((-1.0)*r10*x1062))+(((-1.0)*cj3*x1053*x1055))+(((-1.0)*pz))+((r11*sj5*x1052))+(((-1.0)*x1061))+(((-1.0)*x1049*x1052))+((cj3*r12*x1050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1065=(cj5*sj4);
IkReal x1066=(cj1*cj4);
IkReal x1067=((1.0)*sj1);
IkReal x1068=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r12*x1067))+((cj1*r20*x1068))+((cj1*r21*x1065))+((r22*x1066))+(((-1.0)*r11*x1065*x1067))+(((-1.0)*r10*x1067*x1068)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x1066))+((r21*sj1*x1065))+((cj1*r11*x1065))+((cj4*r22*sj1))+((cj1*r10*x1068))+((r20*sj1*x1068)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r12*x1067))+((cj1*r20*x1068))+((cj1*r21*x1065))+((r22*x1066))+(((-1.0)*r11*x1065*x1067))+(((-1.0)*r10*x1067*x1068))))+IKsqr((((r12*x1066))+((r21*sj1*x1065))+((cj1*r11*x1065))+((cj4*r22*sj1))+((cj1*r10*x1068))+((r20*sj1*x1068))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r12*x1067))+((cj1*r20*x1068))+((cj1*r21*x1065))+((r22*x1066))+(((-1.0)*r11*x1065*x1067))+(((-1.0)*r10*x1067*x1068))), (((r12*x1066))+((r21*sj1*x1065))+((cj1*r11*x1065))+((cj4*r22*sj1))+((cj1*r10*x1068))+((r20*sj1*x1068))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1069=IKcos(j2);
IkReal x1070=IKsin(j2);
IkReal x1071=(r21*sj5);
IkReal x1072=((0.15)*cj5);
IkReal x1073=((0.59)*sj1);
IkReal x1074=(cj3*sj4);
IkReal x1075=(r11*sj5);
IkReal x1076=((1.0)*cj4);
IkReal x1077=(cj5*r21);
IkReal x1078=(cj3*sj5);
IkReal x1079=((1.0)*sj4);
IkReal x1080=(cj5*r11);
IkReal x1081=(sj1*x1069);
IkReal x1082=(cj1*x1070);
IkReal x1083=(cj1*x1069);
IkReal x1084=((1.0)*cj5*sj3);
IkReal x1085=(sj5*x1079);
IkReal x1086=(sj1*x1070);
IkReal x1087=(x1082+x1081);
evalcond[0]=((((-1.0)*x1077*x1079))+x1087+(((-1.0)*r22*x1076))+(((-1.0)*r20*x1085)));
evalcond[1]=(x1083+(((-1.0)*r10*x1085))+(((-1.0)*r12*x1076))+(((-1.0)*x1086))+(((-1.0)*x1079*x1080)));
evalcond[2]=((((0.71)*cj1))+(((-0.59)*x1082))+((r20*x1072))+(((-1.0)*pz))+(((-1.0)*x1069*x1073))+(((-0.15)*x1071)));
evalcond[3]=(((x1070*x1073))+(((-0.59)*x1083))+(((-0.71)*sj1))+(((-1.0)*py))+((r10*x1072))+(((-0.15)*x1075)));
evalcond[4]=(x1087+((r12*x1074))+(((-1.0)*r10*x1084))+((sj3*x1075))+(((-1.0)*r10*x1076*x1078))+(((-1.0)*cj3*x1076*x1080)));
evalcond[5]=(x1086+((sj3*x1071))+(((-1.0)*cj3*x1076*x1077))+(((-1.0)*r20*x1076*x1078))+(((-1.0)*x1083))+((r22*x1074))+(((-1.0)*r20*x1084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1088=((0.211267605633803)*sj5);
IkReal x1089=((0.211267605633803)*cj5);
IkReal x1090=((0.830985915492958)*cj4);
IkReal x1091=((0.830985915492958)*sj4*sj5);
IkReal x1092=((0.830985915492958)*cj5*sj4);
if( IKabs(((((-1.0)*r10*x1089))+((r10*x1091))+((r11*x1088))+((r11*x1092))+((r12*x1090))+(((1.40845070422535)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1092))+((r22*x1090))+(((1.40845070422535)*pz))+((r20*x1091))+(((-1.0)*r20*x1089))+((r21*x1088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1089))+((r10*x1091))+((r11*x1088))+((r11*x1092))+((r12*x1090))+(((1.40845070422535)*py))))+IKsqr((((r21*x1092))+((r22*x1090))+(((1.40845070422535)*pz))+((r20*x1091))+(((-1.0)*r20*x1089))+((r21*x1088))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x1089))+((r10*x1091))+((r11*x1088))+((r11*x1092))+((r12*x1090))+(((1.40845070422535)*py))), (((r21*x1092))+((r22*x1090))+(((1.40845070422535)*pz))+((r20*x1091))+(((-1.0)*r20*x1089))+((r21*x1088))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1093=((0.15)*sj5);
IkReal x1094=(cj5*r10);
IkReal x1095=((0.59)*sj4);
IkReal x1096=(cj5*r21);
IkReal x1097=((0.59)*sj3);
IkReal x1098=(cj5*r11);
IkReal x1099=(cj5*r20);
IkReal x1100=((0.59)*cj4);
IkReal x1101=(r21*x1093);
IkReal x1102=((0.15)*x1099);
IkReal x1103=((0.71)*(IKcos(j1)));
IkReal x1104=((0.71)*(IKsin(j1)));
IkReal x1105=((0.15)*x1094);
IkReal x1106=(r11*x1093);
IkReal x1107=(x1101+pz);
IkReal x1108=(cj3*sj5*x1100);
IkReal x1109=(x1104+x1105);
IkReal x1110=(x1102+x1103);
evalcond[0]=(x1106+((x1095*x1098))+py+((r12*x1100))+(((-1.0)*x1109))+((r10*sj5*x1095)));
evalcond[1]=(x1107+((x1095*x1096))+((r22*x1100))+(((-1.0)*x1110))+((r20*sj5*x1095)));
evalcond[2]=((((-1.0)*cj3*x1098*x1100))+x1107+((r11*sj5*x1097))+((cj3*r12*x1095))+(((-1.0)*x1094*x1097))+(((-1.0)*x1110))+(((-1.0)*r10*x1108)));
evalcond[3]=(((cj3*r22*x1095))+x1109+(((-1.0)*cj3*x1096*x1100))+(((-1.0)*x1097*x1099))+(((-1.0)*r20*x1108))+((r21*sj5*x1097))+(((-1.0)*py))+(((-1.0)*x1106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1111=(cj4*r12);
IkReal x1112=((1.0)*cj1);
IkReal x1113=(cj4*r22);
IkReal x1114=(cj5*sj4);
IkReal x1115=(sj4*sj5);
if( IKabs((((r10*sj1*x1115))+((cj1*x1113))+((r11*sj1*x1114))+((sj1*x1111))+((cj1*r21*x1114))+((cj1*r20*x1115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1112*x1114))+((r20*sj1*x1115))+((sj1*x1113))+((r21*sj1*x1114))+(((-1.0)*x1111*x1112))+(((-1.0)*r10*x1112*x1115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj1*x1115))+((cj1*x1113))+((r11*sj1*x1114))+((sj1*x1111))+((cj1*r21*x1114))+((cj1*r20*x1115))))+IKsqr(((((-1.0)*r11*x1112*x1114))+((r20*sj1*x1115))+((sj1*x1113))+((r21*sj1*x1114))+(((-1.0)*x1111*x1112))+(((-1.0)*r10*x1112*x1115))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*sj1*x1115))+((cj1*x1113))+((r11*sj1*x1114))+((sj1*x1111))+((cj1*r21*x1114))+((cj1*r20*x1115))), ((((-1.0)*r11*x1112*x1114))+((r20*sj1*x1115))+((sj1*x1113))+((r21*sj1*x1114))+(((-1.0)*x1111*x1112))+(((-1.0)*r10*x1112*x1115))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1116=IKsin(j2);
IkReal x1117=IKcos(j2);
IkReal x1118=(r21*sj5);
IkReal x1119=((0.15)*cj5);
IkReal x1120=((1.0)*cj4);
IkReal x1121=(cj5*r21);
IkReal x1122=(r11*sj5);
IkReal x1123=(cj3*sj5);
IkReal x1124=(cj3*sj4);
IkReal x1125=((1.0)*sj4);
IkReal x1126=(cj5*r11);
IkReal x1127=(sj1*x1116);
IkReal x1128=(cj1*x1116);
IkReal x1129=((1.0)*cj5*sj3);
IkReal x1130=((0.59)*x1117);
IkReal x1131=((1.0)*x1117);
IkReal x1132=(sj5*x1125);
IkReal x1133=(cj1*x1131);
evalcond[0]=(x1128+(((-1.0)*x1121*x1125))+(((-1.0)*r22*x1120))+((sj1*x1117))+(((-1.0)*r20*x1132)));
evalcond[1]=(x1127+(((-1.0)*r12*x1120))+(((-1.0)*r10*x1132))+(((-1.0)*x1133))+(((-1.0)*x1125*x1126)));
evalcond[2]=((((0.71)*cj1))+((r20*x1119))+(((-1.0)*sj1*x1130))+(((-0.59)*x1128))+(((-0.15)*x1118))+(((-1.0)*pz)));
evalcond[3]=((((-0.59)*x1127))+(((-1.0)*py))+(((-0.15)*x1122))+(((0.71)*sj1))+((cj1*x1130))+((r10*x1119)));
evalcond[4]=(x1127+((sj3*x1118))+((r22*x1124))+(((-1.0)*cj3*x1120*x1121))+(((-1.0)*x1133))+(((-1.0)*r20*x1129))+(((-1.0)*r20*x1120*x1123)));
evalcond[5]=((((-1.0)*sj1*x1131))+(((-1.0)*r10*x1129))+(((-1.0)*cj3*x1120*x1126))+(((-1.0)*r10*x1120*x1123))+(((-1.0)*x1128))+((sj3*x1122))+((r12*x1124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1134=((0.15)*cj0);
IkReal x1135=(sj4*sj5);
IkReal x1136=((0.59)*cj0);
IkReal x1137=(cj5*sj4);
CheckValue<IkReal> x1138=IKPowWithIntegerCheck(cj0,-2);
if(!x1138.valid){
continue;
}
if( IKabs(((1.40845070422535)*(x1138.value)*(((((-1.0)*r11*sj5*x1134))+((cj5*r10*x1134))+(((-1.0)*cj4*r12*x1136))+(((-0.05)*cj0*sj0))+(((-1.0)*r10*x1135*x1136))+(((-1.0)*r11*x1136*x1137))+(((-1.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*cj4*r22))+(((0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.830985915492958)*r21*x1137))+(((0.830985915492958)*r20*x1135)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.40845070422535)*(x1138.value)*(((((-1.0)*r11*sj5*x1134))+((cj5*r10*x1134))+(((-1.0)*cj4*r12*x1136))+(((-0.05)*cj0*sj0))+(((-1.0)*r10*x1135*x1136))+(((-1.0)*r11*x1136*x1137))+(((-1.0)*cj0*py))))))+IKsqr(((((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*cj4*r22))+(((0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.830985915492958)*r21*x1137))+(((0.830985915492958)*r20*x1135))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.40845070422535)*(x1138.value)*(((((-1.0)*r11*sj5*x1134))+((cj5*r10*x1134))+(((-1.0)*cj4*r12*x1136))+(((-0.05)*cj0*sj0))+(((-1.0)*r10*x1135*x1136))+(((-1.0)*r11*x1136*x1137))+(((-1.0)*cj0*py))))), ((((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*cj4*r22))+(((0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.830985915492958)*r21*x1137))+(((0.830985915492958)*r20*x1135))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1139=IKsin(j1);
IkReal x1140=IKcos(j1);
IkReal x1141=sj0*sj0;
IkReal x1142=cj0*cj0;
IkReal x1143=(r21*sj0);
IkReal x1144=((0.15)*sj5);
IkReal x1145=(cj0*r21);
IkReal x1146=(cj5*sj0);
IkReal x1147=((0.15)*r20);
IkReal x1148=((1.0)*py);
IkReal x1149=((0.59)*sj4);
IkReal x1150=(cj0*r11);
IkReal x1151=((0.59)*sj5);
IkReal x1152=(cj3*cj4);
IkReal x1153=(cj5*r10);
IkReal x1154=(sj0*sj5);
IkReal x1155=((0.15)*r00);
IkReal x1156=((0.59)*sj3);
IkReal x1157=(cj0*r01);
IkReal x1158=(cj0*sj5);
IkReal x1159=(cj3*r22);
IkReal x1160=((1.0)*px);
IkReal x1161=(cj0*r20);
IkReal x1162=((0.05)*cj0);
IkReal x1163=(cj0*cj5);
IkReal x1164=(sj0*x1162);
IkReal x1165=((0.59)*cj0*cj4);
IkReal x1166=((0.71)*x1140);
IkReal x1167=((0.59)*cj4*sj0);
IkReal x1168=((0.71)*x1139);
IkReal x1169=((0.59)*cj5*x1152);
IkReal x1170=(cj0*x1168);
IkReal x1171=(sj0*x1170);
evalcond[0]=((((0.59)*cj4*r22))+(((-1.0)*cj5*x1147))+pz+((r20*sj5*x1149))+((r21*x1144))+(((-1.0)*x1166))+((cj5*r21*x1149)));
evalcond[1]=((((-1.0)*x1144*x1150))+(((-1.0)*r10*x1149*x1158))+(((0.15)*cj0*x1153))+(((-1.0)*r12*x1165))+(((-1.0)*cj0*x1148))+(((-1.0)*x1142*x1168))+(((-1.0)*cj5*x1149*x1150))+(((-1.0)*x1164)));
evalcond[2]=(x1164+((r02*x1167))+((r01*x1146*x1149))+((r00*x1149*x1154))+(((-1.0)*x1146*x1155))+((px*sj0))+(((-1.0)*x1141*x1168))+((r01*sj0*x1144)));
evalcond[3]=(((x1143*x1144))+(((-1.0)*sj0*x1166))+(((-1.0)*x1146*x1147))+(((-1.0)*cj5*r00*x1156))+(((-1.0)*r00*x1151*x1152))+((pz*sj0))+(((-1.0)*r01*x1169))+((cj3*r02*x1149))+((r01*sj3*x1151)));
evalcond[4]=(((x1147*x1163))+(((-1.0)*r10*x1151*x1152))+((cj0*x1166))+(((-1.0)*r11*x1169))+((r11*sj3*x1151))+(((-1.0)*x1144*x1145))+(((-1.0)*x1153*x1156))+((cj3*r12*x1149))+(((-1.0)*cj0*pz)));
evalcond[5]=((((-0.05)*sj0))+(((-1.0)*x1148))+((x1151*x1152*x1161))+((x1145*x1169))+((cj5*x1156*x1161))+(((0.15)*x1153))+(((-1.0)*r11*x1144))+(((-1.0)*x1170))+(((-1.0)*cj0*x1149*x1159))+(((-1.0)*sj3*x1145*x1151)));
evalcond[6]=((((-1.0)*r01*x1144))+(((-1.0)*r20*x1146*x1156))+(((-1.0)*r20*sj0*x1151*x1152))+((sj0*x1168))+((sj0*x1149*x1159))+(((-1.0)*x1143*x1169))+((cj5*x1155))+((sj3*x1143*x1151))+(((-1.0)*x1160))+(((-1.0)*x1162)));
evalcond[7]=(x1171+(((-1.0)*r02*x1165))+(((-1.0)*r00*x1149*x1158))+(((-0.15)*r10*x1146))+(((0.05)*x1141))+(((-1.0)*cj5*x1149*x1157))+((py*sj0))+((r11*sj0*x1144)));
evalcond[8]=((((-1.0)*x1144*x1157))+(((-0.05)*x1142))+x1171+((r10*x1149*x1154))+(((-1.0)*cj0*x1160))+((x1155*x1163))+((r12*x1167))+((r11*x1146*x1149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1172=(cj4*sj1);
IkReal x1173=(cj1*cj4);
IkReal x1174=(cj5*sj4);
IkReal x1175=((1.0)*cj1);
IkReal x1176=(sj4*sj5);
IkReal x1177=(sj1*x1176);
if( IKabs((((r02*x1172))+((r00*x1177))+((r01*sj1*x1174))+((cj1*r21*x1174))+((cj1*r20*x1176))+((r22*x1173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1177))+(((-1.0)*r00*x1175*x1176))+(((-1.0)*r01*x1174*x1175))+(((-1.0)*r02*x1173))+((r22*x1172))+((r21*sj1*x1174)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x1172))+((r00*x1177))+((r01*sj1*x1174))+((cj1*r21*x1174))+((cj1*r20*x1176))+((r22*x1173))))+IKsqr((((r20*x1177))+(((-1.0)*r00*x1175*x1176))+(((-1.0)*r01*x1174*x1175))+(((-1.0)*r02*x1173))+((r22*x1172))+((r21*sj1*x1174))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x1172))+((r00*x1177))+((r01*sj1*x1174))+((cj1*r21*x1174))+((cj1*r20*x1176))+((r22*x1173))), (((r20*x1177))+(((-1.0)*r00*x1175*x1176))+(((-1.0)*r01*x1174*x1175))+(((-1.0)*r02*x1173))+((r22*x1172))+((r21*sj1*x1174))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1178=IKsin(j2);
IkReal x1179=IKcos(j2);
IkReal x1180=(cj3*sj4);
IkReal x1181=((1.0)*cj5);
IkReal x1182=(r21*sj5);
IkReal x1183=(cj3*cj4);
IkReal x1184=((0.15)*cj5);
IkReal x1185=((1.0)*sj5);
IkReal x1186=((1.0)*cj4);
IkReal x1187=(r01*sj5);
IkReal x1188=(sj1*x1178);
IkReal x1189=(cj1*x1178);
IkReal x1190=((0.59)*x1179);
IkReal x1191=((1.0)*x1179);
IkReal x1192=(cj1*x1191);
evalcond[0]=(x1189+(((-1.0)*r20*sj4*x1185))+((sj1*x1179))+(((-1.0)*r21*sj4*x1181))+(((-1.0)*r22*x1186)));
evalcond[1]=((((-1.0)*r00*sj4*x1185))+x1188+(((-1.0)*x1192))+(((-1.0)*r01*sj4*x1181))+(((-1.0)*r02*x1186)));
evalcond[2]=((((0.71)*cj1))+(((-0.59)*x1189))+(((-1.0)*pz))+((r20*x1184))+(((-0.15)*x1182))+(((-1.0)*sj1*x1190)));
evalcond[3]=((((-0.59)*x1188))+((r00*x1184))+(((-1.0)*px))+(((0.71)*sj1))+(((-0.15)*x1187))+((cj1*x1190)));
evalcond[4]=(x1188+((r22*x1180))+(((-1.0)*r20*sj3*x1181))+(((-1.0)*x1192))+((sj3*x1182))+(((-1.0)*r21*x1181*x1183))+(((-1.0)*r20*x1183*x1185)));
evalcond[5]=((((-1.0)*r01*x1181*x1183))+(((-1.0)*r00*x1183*x1185))+(((-1.0)*r00*sj3*x1181))+((sj3*x1187))+((r02*x1180))+(((-1.0)*x1189))+(((-1.0)*sj1*x1191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1193=(cj4*r22);
IkReal x1194=(cj5*sj4);
IkReal x1195=((1.0)*sj1);
IkReal x1196=(cj4*r02);
IkReal x1197=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1195*x1197))+(((-1.0)*x1195*x1196))+((cj1*r20*x1197))+(((-1.0)*r01*x1194*x1195))+((cj1*r21*x1194))+((cj1*x1193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x1194))+((sj1*x1193))+((r20*sj1*x1197))+((cj1*r00*x1197))+((cj1*r01*x1194))+((cj1*x1196)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1195*x1197))+(((-1.0)*x1195*x1196))+((cj1*r20*x1197))+(((-1.0)*r01*x1194*x1195))+((cj1*r21*x1194))+((cj1*x1193))))+IKsqr((((r21*sj1*x1194))+((sj1*x1193))+((r20*sj1*x1197))+((cj1*r00*x1197))+((cj1*r01*x1194))+((cj1*x1196))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x1195*x1197))+(((-1.0)*x1195*x1196))+((cj1*r20*x1197))+(((-1.0)*r01*x1194*x1195))+((cj1*r21*x1194))+((cj1*x1193))), (((r21*sj1*x1194))+((sj1*x1193))+((r20*sj1*x1197))+((cj1*r00*x1197))+((cj1*r01*x1194))+((cj1*x1196))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1198=IKcos(j2);
IkReal x1199=IKsin(j2);
IkReal x1200=(cj3*sj4);
IkReal x1201=((1.0)*cj5);
IkReal x1202=(r21*sj5);
IkReal x1203=((0.59)*sj1);
IkReal x1204=(cj3*cj4);
IkReal x1205=((0.15)*cj5);
IkReal x1206=((1.0)*sj5);
IkReal x1207=((1.0)*cj4);
IkReal x1208=(r01*sj5);
IkReal x1209=(sj1*x1198);
IkReal x1210=(cj1*x1199);
IkReal x1211=(cj1*x1198);
IkReal x1212=(sj1*x1199);
IkReal x1213=(x1209+x1210);
evalcond[0]=(x1213+(((-1.0)*r20*sj4*x1206))+(((-1.0)*r22*x1207))+(((-1.0)*r21*sj4*x1201)));
evalcond[1]=((((-1.0)*r01*sj4*x1201))+x1211+(((-1.0)*r00*sj4*x1206))+(((-1.0)*r02*x1207))+(((-1.0)*x1212)));
evalcond[2]=((((-0.15)*x1202))+(((0.71)*cj1))+(((-1.0)*pz))+((r20*x1205))+(((-0.59)*x1210))+(((-1.0)*x1198*x1203)));
evalcond[3]=((((-0.15)*x1208))+((x1199*x1203))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.59)*x1211))+((r00*x1205)));
evalcond[4]=(x1213+(((-1.0)*r00*sj3*x1201))+(((-1.0)*r00*x1204*x1206))+((sj3*x1208))+((r02*x1200))+(((-1.0)*r01*x1201*x1204)));
evalcond[5]=((((-1.0)*r20*x1204*x1206))+x1212+(((-1.0)*r21*x1201*x1204))+(((-1.0)*r20*sj3*x1201))+((sj3*x1202))+((r22*x1200))+(((-1.0)*x1211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1214=(cj5*sj4);
IkReal x1215=(cj1*cj4);
IkReal x1216=((1.0)*sj1);
IkReal x1217=(sj4*sj5);
if( IKabs((((r22*x1215))+(((-1.0)*r11*x1214*x1216))+(((-1.0)*cj4*r12*x1216))+((cj1*r21*x1214))+((cj1*r20*x1217))+(((-1.0)*r10*x1216*x1217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x1215))+((r20*sj1*x1217))+((cj4*r22*sj1))+((cj1*r10*x1217))+((cj1*r11*x1214))+((r21*sj1*x1214)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x1215))+(((-1.0)*r11*x1214*x1216))+(((-1.0)*cj4*r12*x1216))+((cj1*r21*x1214))+((cj1*r20*x1217))+(((-1.0)*r10*x1216*x1217))))+IKsqr((((r12*x1215))+((r20*sj1*x1217))+((cj4*r22*sj1))+((cj1*r10*x1217))+((cj1*r11*x1214))+((r21*sj1*x1214))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x1215))+(((-1.0)*r11*x1214*x1216))+(((-1.0)*cj4*r12*x1216))+((cj1*r21*x1214))+((cj1*r20*x1217))+(((-1.0)*r10*x1216*x1217))), (((r12*x1215))+((r20*sj1*x1217))+((cj4*r22*sj1))+((cj1*r10*x1217))+((cj1*r11*x1214))+((r21*sj1*x1214))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1218=IKcos(j2);
IkReal x1219=IKsin(j2);
IkReal x1220=(r21*sj5);
IkReal x1221=((0.15)*cj5);
IkReal x1222=((0.59)*sj1);
IkReal x1223=(cj3*sj4);
IkReal x1224=(r11*sj5);
IkReal x1225=((1.0)*cj4);
IkReal x1226=(cj5*r21);
IkReal x1227=(cj3*sj5);
IkReal x1228=((1.0)*sj4);
IkReal x1229=(cj5*r11);
IkReal x1230=(sj1*x1218);
IkReal x1231=(cj1*x1219);
IkReal x1232=(cj1*x1218);
IkReal x1233=((1.0)*cj5*sj3);
IkReal x1234=(sj5*x1228);
IkReal x1235=(sj1*x1219);
IkReal x1236=(x1230+x1231);
evalcond[0]=(x1236+(((-1.0)*r20*x1234))+(((-1.0)*x1226*x1228))+(((-1.0)*r22*x1225)));
evalcond[1]=((((-1.0)*x1235))+x1232+(((-1.0)*r12*x1225))+(((-1.0)*x1228*x1229))+(((-1.0)*r10*x1234)));
evalcond[2]=((((0.71)*cj1))+((r20*x1221))+(((-1.0)*x1218*x1222))+(((-0.59)*x1231))+(((-1.0)*pz))+(((-0.15)*x1220)));
evalcond[3]=(((x1219*x1222))+(((-0.59)*x1232))+(((-0.71)*sj1))+(((-1.0)*py))+((r10*x1221))+(((-0.15)*x1224)));
evalcond[4]=(x1236+(((-1.0)*r10*x1225*x1227))+((sj3*x1224))+(((-1.0)*r10*x1233))+(((-1.0)*cj3*x1225*x1229))+((r12*x1223)));
evalcond[5]=((((-1.0)*x1232))+x1235+((sj3*x1220))+(((-1.0)*r20*x1233))+((r22*x1223))+(((-1.0)*r20*x1225*x1227))+(((-1.0)*cj3*x1225*x1226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1237=(cj4*r12);
IkReal x1238=((1.0)*cj1);
IkReal x1239=(cj4*r22);
IkReal x1240=(cj5*sj4);
IkReal x1241=(sj4*sj5);
if( IKabs((((sj1*x1237))+((r11*sj1*x1240))+((r10*sj1*x1241))+((cj1*r20*x1241))+((cj1*r21*x1240))+((cj1*x1239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1239))+(((-1.0)*x1237*x1238))+(((-1.0)*r10*x1238*x1241))+((r20*sj1*x1241))+(((-1.0)*r11*x1238*x1240))+((r21*sj1*x1240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1237))+((r11*sj1*x1240))+((r10*sj1*x1241))+((cj1*r20*x1241))+((cj1*r21*x1240))+((cj1*x1239))))+IKsqr((((sj1*x1239))+(((-1.0)*x1237*x1238))+(((-1.0)*r10*x1238*x1241))+((r20*sj1*x1241))+(((-1.0)*r11*x1238*x1240))+((r21*sj1*x1240))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1237))+((r11*sj1*x1240))+((r10*sj1*x1241))+((cj1*r20*x1241))+((cj1*r21*x1240))+((cj1*x1239))), (((sj1*x1239))+(((-1.0)*x1237*x1238))+(((-1.0)*r10*x1238*x1241))+((r20*sj1*x1241))+(((-1.0)*r11*x1238*x1240))+((r21*sj1*x1240))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1242=IKsin(j2);
IkReal x1243=IKcos(j2);
IkReal x1244=(r21*sj5);
IkReal x1245=((0.15)*cj5);
IkReal x1246=((1.0)*cj4);
IkReal x1247=(cj5*r21);
IkReal x1248=(r11*sj5);
IkReal x1249=(cj3*sj5);
IkReal x1250=(cj3*sj4);
IkReal x1251=((1.0)*sj4);
IkReal x1252=(cj5*r11);
IkReal x1253=(sj1*x1242);
IkReal x1254=(cj1*x1242);
IkReal x1255=((1.0)*cj5*sj3);
IkReal x1256=((0.59)*x1243);
IkReal x1257=((1.0)*x1243);
IkReal x1258=(sj5*x1251);
IkReal x1259=(cj1*x1257);
evalcond[0]=((((-1.0)*r20*x1258))+x1254+(((-1.0)*x1247*x1251))+(((-1.0)*r22*x1246))+((sj1*x1243)));
evalcond[1]=((((-1.0)*x1259))+x1253+(((-1.0)*r12*x1246))+(((-1.0)*x1251*x1252))+(((-1.0)*r10*x1258)));
evalcond[2]=((((0.71)*cj1))+(((-0.59)*x1254))+(((-0.15)*x1244))+((r20*x1245))+(((-1.0)*sj1*x1256))+(((-1.0)*pz)));
evalcond[3]=((((-0.59)*x1253))+(((-0.15)*x1248))+(((-1.0)*py))+((cj1*x1256))+(((0.71)*sj1))+((r10*x1245)));
evalcond[4]=((((-1.0)*x1259))+(((-1.0)*r20*x1255))+x1253+((r22*x1250))+((sj3*x1244))+(((-1.0)*cj3*x1246*x1247))+(((-1.0)*r20*x1246*x1249)));
evalcond[5]=(((r12*x1250))+((sj3*x1248))+(((-1.0)*sj1*x1257))+(((-1.0)*r10*x1246*x1249))+(((-1.0)*x1254))+(((-1.0)*cj3*x1246*x1252))+(((-1.0)*r10*x1255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1260=(cj4*r12);
IkReal x1261=((1.0)*sj1);
IkReal x1262=(cj0*cj1);
IkReal x1263=(cj4*r22);
IkReal x1264=(cj0*sj1);
IkReal x1265=(sj4*sj5);
IkReal x1266=(cj5*r11*sj4);
IkReal x1267=(cj5*r21*sj4);
CheckValue<IkReal> x1268 = IKatan2WithCheck(IkReal(((((-1.0)*x1261*x1266))+(((-1.0)*x1260*x1261))+((x1262*x1263))+((x1262*x1267))+((r20*x1262*x1265))+(((-1.0)*r10*x1261*x1265)))),IkReal((((r20*x1264*x1265))+((x1264*x1267))+((cj1*r10*x1265))+((cj1*x1260))+((cj1*x1266))+((x1263*x1264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1268.valid){
continue;
}
CheckValue<IkReal> x1269=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1269.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1268.value)+(((1.5707963267949)*(x1269.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1270=IKsin(j2);
IkReal x1271=IKcos(j2);
IkReal x1272=(cj3*sj4);
IkReal x1273=(r21*sj5);
IkReal x1274=(sj0*sj1);
IkReal x1275=((1.0)*cj1);
IkReal x1276=((0.15)*cj5);
IkReal x1277=(cj0*sj1);
IkReal x1278=((1.0)*cj4);
IkReal x1279=(r11*sj5);
IkReal x1280=(cj3*sj5);
IkReal x1281=((0.59)*cj1);
IkReal x1282=(r01*sj5);
IkReal x1283=((0.59)*x1270);
IkReal x1284=((1.0)*cj5*sj3);
IkReal x1285=(sj1*x1271);
IkReal x1286=(cj1*x1270);
IkReal x1287=((1.0)*sj4*sj5);
IkReal x1288=(sj0*x1271);
IkReal x1289=((1.0)*cj5*sj4);
IkReal x1290=(cj0*x1271);
IkReal x1291=(cj3*cj5*x1278);
evalcond[0]=(x1285+x1286+(((-1.0)*r22*x1278))+(((-1.0)*r21*x1289))+(((-1.0)*r20*x1287)));
evalcond[1]=((((0.71)*cj1))+(((-1.0)*x1270*x1281))+(((-1.0)*pz))+(((-0.59)*x1285))+(((-0.15)*x1273))+((r20*x1276)));
evalcond[2]=((((-1.0)*x1275*x1288))+(((-1.0)*r01*x1289))+(((-1.0)*r00*x1287))+(((-1.0)*r02*x1278))+((x1270*x1274)));
evalcond[3]=((((-1.0)*r12*x1278))+((cj1*x1290))+(((-1.0)*r10*x1287))+(((-1.0)*r11*x1289))+(((-1.0)*x1270*x1277)));
evalcond[4]=((((-0.15)*x1282))+(((-1.0)*px))+(((0.71)*x1274))+(((-0.05)*cj0))+(((-1.0)*x1274*x1283))+((r00*x1276))+((x1281*x1288)));
evalcond[5]=((((-0.71)*x1277))+((r10*x1276))+(((-0.05)*sj0))+(((-1.0)*x1281*x1290))+(((-1.0)*py))+((x1277*x1283))+(((-0.15)*x1279)));
evalcond[6]=(((sj3*x1273))+((sj1*x1270))+(((-1.0)*r21*x1291))+(((-1.0)*x1271*x1275))+((r22*x1272))+(((-1.0)*r20*x1278*x1280))+(((-1.0)*r20*x1284)));
evalcond[7]=(((sj3*x1279))+((r12*x1272))+(((-1.0)*r10*x1278*x1280))+((cj0*x1286))+(((-1.0)*r11*x1291))+(((-1.0)*r10*x1284))+((x1271*x1277)));
evalcond[8]=((((-1.0)*r01*x1291))+(((-1.0)*x1271*x1274))+((r02*x1272))+(((-1.0)*r00*x1284))+(((-1.0)*sj0*x1270*x1275))+((sj3*x1282))+(((-1.0)*r00*x1278*x1280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1292=(sj1*sj4);
IkReal x1293=(cj5*r01);
IkReal x1294=(cj1*sj4);
IkReal x1295=(cj4*sj1);
IkReal x1296=(r22*sj0);
IkReal x1297=(r00*sj5);
IkReal x1298=(cj1*cj4);
IkReal x1299=(r20*sj0*sj5);
IkReal x1300=(cj5*r21*sj0);
CheckValue<IkReal> x1301=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1301.valid){
continue;
}
CheckValue<IkReal> x1302 = IKatan2WithCheck(IkReal((((x1296*x1298))+((x1294*x1299))+((x1294*x1300))+((r02*x1295))+((x1292*x1297))+((x1292*x1293)))),IkReal(((((-1.0)*r02*x1298))+((x1292*x1300))+((x1295*x1296))+(((-1.0)*x1293*x1294))+(((-1.0)*x1294*x1297))+((x1292*x1299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1302.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1301.value)))+(x1302.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1303=IKsin(j2);
IkReal x1304=IKcos(j2);
IkReal x1305=(cj3*sj4);
IkReal x1306=(r21*sj5);
IkReal x1307=(sj0*sj1);
IkReal x1308=((1.0)*cj1);
IkReal x1309=((0.15)*cj5);
IkReal x1310=(cj0*sj1);
IkReal x1311=((1.0)*cj4);
IkReal x1312=(r11*sj5);
IkReal x1313=(cj3*sj5);
IkReal x1314=((0.59)*cj1);
IkReal x1315=(r01*sj5);
IkReal x1316=((0.59)*x1303);
IkReal x1317=((1.0)*cj5*sj3);
IkReal x1318=(sj1*x1304);
IkReal x1319=(cj1*x1303);
IkReal x1320=((1.0)*sj4*sj5);
IkReal x1321=(sj0*x1304);
IkReal x1322=((1.0)*cj5*sj4);
IkReal x1323=(cj0*x1304);
IkReal x1324=(cj3*cj5*x1311);
evalcond[0]=(x1319+x1318+(((-1.0)*r22*x1311))+(((-1.0)*r21*x1322))+(((-1.0)*r20*x1320)));
evalcond[1]=((((0.71)*cj1))+(((-1.0)*pz))+(((-1.0)*x1303*x1314))+(((-0.15)*x1306))+(((-0.59)*x1318))+((r20*x1309)));
evalcond[2]=((((-1.0)*x1308*x1321))+(((-1.0)*r01*x1322))+(((-1.0)*r00*x1320))+((x1303*x1307))+(((-1.0)*r02*x1311)));
evalcond[3]=((((-1.0)*r12*x1311))+(((-1.0)*x1303*x1310))+(((-1.0)*r11*x1322))+((cj1*x1323))+(((-1.0)*r10*x1320)));
evalcond[4]=((((0.71)*x1307))+((x1314*x1321))+(((-1.0)*x1307*x1316))+(((-1.0)*px))+(((-0.05)*cj0))+(((-0.15)*x1315))+((r00*x1309)));
evalcond[5]=(((x1310*x1316))+(((-0.05)*sj0))+((r10*x1309))+(((-1.0)*x1314*x1323))+(((-1.0)*py))+(((-0.15)*x1312))+(((-0.71)*x1310)));
evalcond[6]=(((sj3*x1306))+(((-1.0)*r21*x1324))+(((-1.0)*r20*x1317))+((r22*x1305))+(((-1.0)*r20*x1311*x1313))+((sj1*x1303))+(((-1.0)*x1304*x1308)));
evalcond[7]=(((sj3*x1312))+(((-1.0)*r10*x1311*x1313))+((r12*x1305))+(((-1.0)*r11*x1324))+((x1304*x1310))+(((-1.0)*r10*x1317))+((cj0*x1319)));
evalcond[8]=(((sj3*x1315))+(((-1.0)*r01*x1324))+(((-1.0)*r00*x1317))+(((-1.0)*x1304*x1307))+((r02*x1305))+(((-1.0)*sj0*x1303*x1308))+(((-1.0)*r00*x1311*x1313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1325=((0.15)*sj0);
IkReal x1326=((0.830985915492958)*sj4);
IkReal x1327=((0.59)*sj0*sj4);
CheckValue<IkReal> x1328=IKPowWithIntegerCheck(sj0,-2);
if(!x1328.valid){
continue;
}
if( IKabs(((1.40845070422535)*(x1328.value)*((((r01*sj5*x1325))+(((0.05)*cj0*sj0))+((cj5*r01*x1327))+((r00*sj5*x1327))+(((0.59)*cj4*r02*sj0))+((px*sj0))+(((-1.0)*cj5*r00*x1325)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*cj4*r22))+((cj5*r21*x1326))+(((0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+((r20*sj5*x1326)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.40845070422535)*(x1328.value)*((((r01*sj5*x1325))+(((0.05)*cj0*sj0))+((cj5*r01*x1327))+((r00*sj5*x1327))+(((0.59)*cj4*r02*sj0))+((px*sj0))+(((-1.0)*cj5*r00*x1325))))))+IKsqr(((((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*cj4*r22))+((cj5*r21*x1326))+(((0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+((r20*sj5*x1326))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.40845070422535)*(x1328.value)*((((r01*sj5*x1325))+(((0.05)*cj0*sj0))+((cj5*r01*x1327))+((r00*sj5*x1327))+(((0.59)*cj4*r02*sj0))+((px*sj0))+(((-1.0)*cj5*r00*x1325))))), ((((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*cj4*r22))+((cj5*r21*x1326))+(((0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+((r20*sj5*x1326))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1329=IKsin(j1);
IkReal x1330=IKcos(j1);
IkReal x1331=sj0*sj0;
IkReal x1332=cj0*cj0;
IkReal x1333=(r21*sj0);
IkReal x1334=((0.15)*sj5);
IkReal x1335=(cj0*r21);
IkReal x1336=(cj5*sj0);
IkReal x1337=((0.15)*r20);
IkReal x1338=((1.0)*py);
IkReal x1339=((0.59)*sj4);
IkReal x1340=(cj0*r11);
IkReal x1341=((0.59)*sj5);
IkReal x1342=(cj3*cj4);
IkReal x1343=(cj5*r10);
IkReal x1344=(sj0*sj5);
IkReal x1345=((0.15)*r00);
IkReal x1346=((0.59)*sj3);
IkReal x1347=(cj0*r01);
IkReal x1348=(cj0*sj5);
IkReal x1349=(cj3*r22);
IkReal x1350=((1.0)*px);
IkReal x1351=(cj0*r20);
IkReal x1352=((0.05)*cj0);
IkReal x1353=(cj0*cj5);
IkReal x1354=(sj0*x1352);
IkReal x1355=((0.59)*cj0*cj4);
IkReal x1356=((0.71)*x1330);
IkReal x1357=((0.59)*cj4*sj0);
IkReal x1358=((0.71)*x1329);
IkReal x1359=((0.59)*cj5*x1342);
IkReal x1360=(cj0*x1358);
IkReal x1361=(sj0*x1360);
evalcond[0]=((((-1.0)*x1356))+(((0.59)*cj4*r22))+((r21*x1334))+pz+(((-1.0)*cj5*x1337))+((r20*sj5*x1339))+((cj5*r21*x1339)));
evalcond[1]=((((-1.0)*x1354))+(((-1.0)*r12*x1355))+(((-1.0)*r10*x1339*x1348))+(((0.15)*cj0*x1343))+(((-1.0)*cj0*x1338))+(((-1.0)*x1332*x1358))+(((-1.0)*x1334*x1340))+(((-1.0)*cj5*x1339*x1340)));
evalcond[2]=(x1354+(((-1.0)*x1336*x1345))+(((-1.0)*x1331*x1358))+((r01*sj0*x1334))+((r00*x1339*x1344))+((r02*x1357))+((px*sj0))+((r01*x1336*x1339)));
evalcond[3]=(((r01*sj3*x1341))+(((-1.0)*cj5*r00*x1346))+(((-1.0)*x1336*x1337))+(((-1.0)*r01*x1359))+(((-1.0)*sj0*x1356))+(((-1.0)*r00*x1341*x1342))+((pz*sj0))+((x1333*x1334))+((cj3*r02*x1339)));
evalcond[4]=((((-1.0)*r10*x1341*x1342))+(((-1.0)*r11*x1359))+(((-1.0)*x1334*x1335))+((r11*sj3*x1341))+((cj0*x1356))+((x1337*x1353))+(((-1.0)*x1343*x1346))+((cj3*r12*x1339))+(((-1.0)*cj0*pz)));
evalcond[5]=((((0.15)*x1343))+(((-0.05)*sj0))+(((-1.0)*cj0*x1339*x1349))+((cj5*x1346*x1351))+((x1341*x1342*x1351))+((x1335*x1359))+(((-1.0)*sj3*x1335*x1341))+(((-1.0)*x1338))+(((-1.0)*r11*x1334))+(((-1.0)*x1360)));
evalcond[6]=((((-1.0)*x1350))+(((-1.0)*x1352))+((sj0*x1339*x1349))+((sj0*x1358))+(((-1.0)*r20*x1336*x1346))+(((-1.0)*r20*sj0*x1341*x1342))+((cj5*x1345))+(((-1.0)*r01*x1334))+((sj3*x1333*x1341))+(((-1.0)*x1333*x1359)));
evalcond[7]=(x1361+(((-1.0)*r02*x1355))+(((-1.0)*r00*x1339*x1348))+(((-0.15)*r10*x1336))+(((0.05)*x1331))+((py*sj0))+((r11*sj0*x1334))+(((-1.0)*cj5*x1339*x1347)));
evalcond[8]=(x1361+((x1345*x1353))+(((-0.05)*x1332))+(((-1.0)*cj0*x1350))+((r10*x1339*x1344))+((r11*x1336*x1339))+((r12*x1357))+(((-1.0)*x1334*x1347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1362=(cj4*sj1);
IkReal x1363=(cj1*cj4);
IkReal x1364=(cj5*sj4);
IkReal x1365=((1.0)*cj1);
IkReal x1366=(sj4*sj5);
IkReal x1367=(sj1*x1366);
if( IKabs((((cj1*r20*x1366))+((r01*sj1*x1364))+((cj1*r21*x1364))+((r22*x1363))+((r02*x1362))+((r00*x1367)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1364*x1365))+((r22*x1362))+((r21*sj1*x1364))+((r20*x1367))+(((-1.0)*r00*x1365*x1366))+(((-1.0)*r02*x1363)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1366))+((r01*sj1*x1364))+((cj1*r21*x1364))+((r22*x1363))+((r02*x1362))+((r00*x1367))))+IKsqr(((((-1.0)*r01*x1364*x1365))+((r22*x1362))+((r21*sj1*x1364))+((r20*x1367))+(((-1.0)*r00*x1365*x1366))+(((-1.0)*r02*x1363))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1366))+((r01*sj1*x1364))+((cj1*r21*x1364))+((r22*x1363))+((r02*x1362))+((r00*x1367))), ((((-1.0)*r01*x1364*x1365))+((r22*x1362))+((r21*sj1*x1364))+((r20*x1367))+(((-1.0)*r00*x1365*x1366))+(((-1.0)*r02*x1363))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1368=IKsin(j2);
IkReal x1369=IKcos(j2);
IkReal x1370=(cj3*sj4);
IkReal x1371=((1.0)*cj5);
IkReal x1372=(r21*sj5);
IkReal x1373=(cj3*cj4);
IkReal x1374=((0.15)*cj5);
IkReal x1375=((1.0)*sj5);
IkReal x1376=((1.0)*cj4);
IkReal x1377=(r01*sj5);
IkReal x1378=(sj1*x1368);
IkReal x1379=(cj1*x1368);
IkReal x1380=((0.59)*x1369);
IkReal x1381=((1.0)*x1369);
IkReal x1382=(cj1*x1381);
evalcond[0]=(x1379+((sj1*x1369))+(((-1.0)*r22*x1376))+(((-1.0)*r21*sj4*x1371))+(((-1.0)*r20*sj4*x1375)));
evalcond[1]=((((-1.0)*x1382))+x1378+(((-1.0)*r00*sj4*x1375))+(((-1.0)*r02*x1376))+(((-1.0)*r01*sj4*x1371)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*pz))+(((-0.15)*x1372))+(((-0.59)*x1379))+(((-1.0)*sj1*x1380))+((r20*x1374)));
evalcond[3]=((((-1.0)*px))+(((-0.15)*x1377))+(((0.71)*sj1))+((cj1*x1380))+(((-0.59)*x1378))+((r00*x1374)));
evalcond[4]=((((-1.0)*x1382))+x1378+(((-1.0)*r20*x1373*x1375))+(((-1.0)*r21*x1371*x1373))+((sj3*x1372))+(((-1.0)*r20*sj3*x1371))+((r22*x1370)));
evalcond[5]=(((sj3*x1377))+(((-1.0)*x1379))+(((-1.0)*r00*x1373*x1375))+(((-1.0)*r01*x1371*x1373))+(((-1.0)*r00*sj3*x1371))+((r02*x1370))+(((-1.0)*sj1*x1381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1383=(cj4*r22);
IkReal x1384=(cj5*sj4);
IkReal x1385=((1.0)*sj1);
IkReal x1386=(cj4*r02);
IkReal x1387=(sj4*sj5);
if( IKabs((((cj1*r20*x1387))+((cj1*r21*x1384))+(((-1.0)*r01*x1384*x1385))+(((-1.0)*r00*x1385*x1387))+((cj1*x1383))+(((-1.0)*x1385*x1386)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*x1384))+((sj1*x1383))+((r21*sj1*x1384))+((r20*sj1*x1387))+((cj1*x1386))+((cj1*r00*x1387)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1387))+((cj1*r21*x1384))+(((-1.0)*r01*x1384*x1385))+(((-1.0)*r00*x1385*x1387))+((cj1*x1383))+(((-1.0)*x1385*x1386))))+IKsqr((((cj1*r01*x1384))+((sj1*x1383))+((r21*sj1*x1384))+((r20*sj1*x1387))+((cj1*x1386))+((cj1*r00*x1387))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1387))+((cj1*r21*x1384))+(((-1.0)*r01*x1384*x1385))+(((-1.0)*r00*x1385*x1387))+((cj1*x1383))+(((-1.0)*x1385*x1386))), (((cj1*r01*x1384))+((sj1*x1383))+((r21*sj1*x1384))+((r20*sj1*x1387))+((cj1*x1386))+((cj1*r00*x1387))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1388=IKcos(j2);
IkReal x1389=IKsin(j2);
IkReal x1390=(cj3*sj4);
IkReal x1391=((1.0)*cj5);
IkReal x1392=(r21*sj5);
IkReal x1393=((0.59)*sj1);
IkReal x1394=(cj3*cj4);
IkReal x1395=((0.15)*cj5);
IkReal x1396=((1.0)*sj5);
IkReal x1397=((1.0)*cj4);
IkReal x1398=(r01*sj5);
IkReal x1399=(sj1*x1388);
IkReal x1400=(cj1*x1389);
IkReal x1401=(cj1*x1388);
IkReal x1402=(sj1*x1389);
IkReal x1403=(x1399+x1400);
evalcond[0]=((((-1.0)*r20*sj4*x1396))+(((-1.0)*r21*sj4*x1391))+x1403+(((-1.0)*r22*x1397)));
evalcond[1]=((((-1.0)*x1402))+(((-1.0)*r02*x1397))+(((-1.0)*r01*sj4*x1391))+(((-1.0)*r00*sj4*x1396))+x1401);
evalcond[2]=((((-0.15)*x1392))+(((0.71)*cj1))+(((-0.59)*x1400))+((r20*x1395))+(((-1.0)*pz))+(((-1.0)*x1388*x1393)));
evalcond[3]=((((-0.15)*x1398))+(((-0.59)*x1401))+(((-0.71)*sj1))+(((-1.0)*px))+((x1389*x1393))+((r00*x1395)));
evalcond[4]=((((-1.0)*r01*x1391*x1394))+(((-1.0)*r00*x1394*x1396))+((sj3*x1398))+x1403+(((-1.0)*r00*sj3*x1391))+((r02*x1390)));
evalcond[5]=((((-1.0)*x1401))+(((-1.0)*r20*sj3*x1391))+((sj3*x1392))+x1402+(((-1.0)*r21*x1391*x1394))+((r22*x1390))+(((-1.0)*r20*x1394*x1396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1404=(cj5*sj4);
IkReal x1405=(cj1*cj4);
IkReal x1406=((1.0)*sj1);
IkReal x1407=(sj4*sj5);
if( IKabs(((((-1.0)*r11*x1404*x1406))+(((-1.0)*cj4*r12*x1406))+((cj1*r21*x1404))+((cj1*r20*x1407))+(((-1.0)*r10*x1406*x1407))+((r22*x1405)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x1407))+((cj1*r11*x1404))+((r12*x1405))+((cj4*r22*sj1))+((r21*sj1*x1404))+((cj1*r10*x1407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1404*x1406))+(((-1.0)*cj4*r12*x1406))+((cj1*r21*x1404))+((cj1*r20*x1407))+(((-1.0)*r10*x1406*x1407))+((r22*x1405))))+IKsqr((((r20*sj1*x1407))+((cj1*r11*x1404))+((r12*x1405))+((cj4*r22*sj1))+((r21*sj1*x1404))+((cj1*r10*x1407))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x1404*x1406))+(((-1.0)*cj4*r12*x1406))+((cj1*r21*x1404))+((cj1*r20*x1407))+(((-1.0)*r10*x1406*x1407))+((r22*x1405))), (((r20*sj1*x1407))+((cj1*r11*x1404))+((r12*x1405))+((cj4*r22*sj1))+((r21*sj1*x1404))+((cj1*r10*x1407))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1408=IKcos(j2);
IkReal x1409=IKsin(j2);
IkReal x1410=(r21*sj5);
IkReal x1411=((0.15)*cj5);
IkReal x1412=((0.59)*sj1);
IkReal x1413=(cj3*sj4);
IkReal x1414=(r11*sj5);
IkReal x1415=((1.0)*cj4);
IkReal x1416=(cj5*r21);
IkReal x1417=(cj3*sj5);
IkReal x1418=((1.0)*sj4);
IkReal x1419=(cj5*r11);
IkReal x1420=(sj1*x1408);
IkReal x1421=(cj1*x1409);
IkReal x1422=(cj1*x1408);
IkReal x1423=((1.0)*cj5*sj3);
IkReal x1424=(sj5*x1418);
IkReal x1425=(sj1*x1409);
IkReal x1426=(x1421+x1420);
evalcond[0]=((((-1.0)*r22*x1415))+(((-1.0)*r20*x1424))+(((-1.0)*x1416*x1418))+x1426);
evalcond[1]=((((-1.0)*r10*x1424))+(((-1.0)*x1418*x1419))+(((-1.0)*x1425))+(((-1.0)*r12*x1415))+x1422);
evalcond[2]=((((0.71)*cj1))+((r20*x1411))+(((-1.0)*x1408*x1412))+(((-1.0)*pz))+(((-0.59)*x1421))+(((-0.15)*x1410)));
evalcond[3]=((((-0.71)*sj1))+(((-1.0)*py))+(((-0.59)*x1422))+(((-0.15)*x1414))+((x1409*x1412))+((r10*x1411)));
evalcond[4]=((((-1.0)*r10*x1423))+(((-1.0)*cj3*x1415*x1419))+(((-1.0)*r10*x1415*x1417))+x1426+((r12*x1413))+((sj3*x1414)));
evalcond[5]=((((-1.0)*r20*x1415*x1417))+(((-1.0)*r20*x1423))+((r22*x1413))+(((-1.0)*cj3*x1415*x1416))+(((-1.0)*x1422))+x1425+((sj3*x1410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1427=(cj4*r12);
IkReal x1428=((1.0)*cj1);
IkReal x1429=(cj4*r22);
IkReal x1430=(cj5*sj4);
IkReal x1431=(sj4*sj5);
if( IKabs((((sj1*x1427))+((cj1*r21*x1430))+((cj1*r20*x1431))+((cj1*x1429))+((r10*sj1*x1431))+((r11*sj1*x1430)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x1431))+((sj1*x1429))+(((-1.0)*r10*x1428*x1431))+(((-1.0)*x1427*x1428))+((r21*sj1*x1430))+(((-1.0)*r11*x1428*x1430)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1427))+((cj1*r21*x1430))+((cj1*r20*x1431))+((cj1*x1429))+((r10*sj1*x1431))+((r11*sj1*x1430))))+IKsqr((((r20*sj1*x1431))+((sj1*x1429))+(((-1.0)*r10*x1428*x1431))+(((-1.0)*x1427*x1428))+((r21*sj1*x1430))+(((-1.0)*r11*x1428*x1430))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1427))+((cj1*r21*x1430))+((cj1*r20*x1431))+((cj1*x1429))+((r10*sj1*x1431))+((r11*sj1*x1430))), (((r20*sj1*x1431))+((sj1*x1429))+(((-1.0)*r10*x1428*x1431))+(((-1.0)*x1427*x1428))+((r21*sj1*x1430))+(((-1.0)*r11*x1428*x1430))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1432=IKsin(j2);
IkReal x1433=IKcos(j2);
IkReal x1434=(r21*sj5);
IkReal x1435=((0.15)*cj5);
IkReal x1436=((1.0)*cj4);
IkReal x1437=(cj5*r21);
IkReal x1438=(r11*sj5);
IkReal x1439=(cj3*sj5);
IkReal x1440=(cj3*sj4);
IkReal x1441=((1.0)*sj4);
IkReal x1442=(cj5*r11);
IkReal x1443=(sj1*x1432);
IkReal x1444=(cj1*x1432);
IkReal x1445=((1.0)*cj5*sj3);
IkReal x1446=((0.59)*x1433);
IkReal x1447=((1.0)*x1433);
IkReal x1448=(sj5*x1441);
IkReal x1449=(cj1*x1447);
evalcond[0]=((((-1.0)*r20*x1448))+(((-1.0)*r22*x1436))+(((-1.0)*x1437*x1441))+((sj1*x1433))+x1444);
evalcond[1]=((((-1.0)*r12*x1436))+(((-1.0)*r10*x1448))+(((-1.0)*x1441*x1442))+x1443+(((-1.0)*x1449)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*sj1*x1446))+(((-0.15)*x1434))+((r20*x1435))+(((-1.0)*pz))+(((-0.59)*x1444)));
evalcond[3]=(((cj1*x1446))+(((-0.15)*x1438))+(((-1.0)*py))+(((-0.59)*x1443))+(((0.71)*sj1))+((r10*x1435)));
evalcond[4]=((((-1.0)*r20*x1445))+((r22*x1440))+((sj3*x1434))+(((-1.0)*r20*x1436*x1439))+x1443+(((-1.0)*cj3*x1436*x1437))+(((-1.0)*x1449)));
evalcond[5]=(((r12*x1440))+(((-1.0)*cj3*x1436*x1442))+(((-1.0)*sj1*x1447))+(((-1.0)*x1444))+(((-1.0)*r10*x1445))+((sj3*x1438))+(((-1.0)*r10*x1436*x1439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1450=(cj4*r12);
IkReal x1451=((1.0)*sj1);
IkReal x1452=(cj0*cj1);
IkReal x1453=(cj4*r22);
IkReal x1454=(cj0*sj1);
IkReal x1455=(sj4*sj5);
IkReal x1456=(cj5*r11*sj4);
IkReal x1457=(cj5*r21*sj4);
CheckValue<IkReal> x1458=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1458.valid){
continue;
}
CheckValue<IkReal> x1459 = IKatan2WithCheck(IkReal(((((-1.0)*x1451*x1456))+((x1452*x1453))+((x1452*x1457))+((r20*x1452*x1455))+(((-1.0)*r10*x1451*x1455))+(((-1.0)*x1450*x1451)))),IkReal((((cj1*x1456))+((cj1*x1450))+((x1454*x1457))+((cj1*r10*x1455))+((r20*x1454*x1455))+((x1453*x1454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1459.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1458.value)))+(x1459.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1460=IKsin(j2);
IkReal x1461=IKcos(j2);
IkReal x1462=(cj3*sj4);
IkReal x1463=(r21*sj5);
IkReal x1464=(sj0*sj1);
IkReal x1465=((1.0)*cj1);
IkReal x1466=((0.15)*cj5);
IkReal x1467=(cj0*sj1);
IkReal x1468=((1.0)*cj4);
IkReal x1469=(r11*sj5);
IkReal x1470=(cj3*sj5);
IkReal x1471=((0.59)*cj1);
IkReal x1472=(r01*sj5);
IkReal x1473=((0.59)*x1460);
IkReal x1474=((1.0)*cj5*sj3);
IkReal x1475=(sj1*x1461);
IkReal x1476=(cj1*x1460);
IkReal x1477=((1.0)*sj4*sj5);
IkReal x1478=(sj0*x1461);
IkReal x1479=((1.0)*cj5*sj4);
IkReal x1480=(cj0*x1461);
IkReal x1481=(cj3*cj5*x1468);
evalcond[0]=((((-1.0)*r21*x1479))+(((-1.0)*r20*x1477))+(((-1.0)*r22*x1468))+x1476+x1475);
evalcond[1]=((((0.71)*cj1))+((r20*x1466))+(((-1.0)*x1460*x1471))+(((-1.0)*pz))+(((-0.15)*x1463))+(((-0.59)*x1475)));
evalcond[2]=((((-1.0)*r01*x1479))+(((-1.0)*r02*x1468))+(((-1.0)*r00*x1477))+(((-1.0)*x1465*x1478))+((x1460*x1464)));
evalcond[3]=(((cj1*x1480))+(((-1.0)*r10*x1477))+(((-1.0)*r11*x1479))+(((-1.0)*x1460*x1467))+(((-1.0)*r12*x1468)));
evalcond[4]=(((x1471*x1478))+(((-0.15)*x1472))+((r00*x1466))+(((0.71)*x1464))+(((-1.0)*px))+(((-0.05)*cj0))+(((-1.0)*x1464*x1473)));
evalcond[5]=((((-0.05)*sj0))+((x1467*x1473))+(((-0.71)*x1467))+(((-1.0)*py))+(((-0.15)*x1469))+((r10*x1466))+(((-1.0)*x1471*x1480)));
evalcond[6]=((((-1.0)*r20*x1468*x1470))+(((-1.0)*r21*x1481))+((sj3*x1463))+(((-1.0)*r20*x1474))+((r22*x1462))+((sj1*x1460))+(((-1.0)*x1461*x1465)));
evalcond[7]=((((-1.0)*r11*x1481))+((sj3*x1469))+(((-1.0)*r10*x1474))+((x1461*x1467))+((r12*x1462))+(((-1.0)*r10*x1468*x1470))+((cj0*x1476)));
evalcond[8]=((((-1.0)*r00*x1468*x1470))+(((-1.0)*r01*x1481))+(((-1.0)*r00*x1474))+(((-1.0)*sj0*x1460*x1465))+((sj3*x1472))+((r02*x1462))+(((-1.0)*x1461*x1464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1482=(sj1*sj4);
IkReal x1483=(cj5*r01);
IkReal x1484=(cj1*sj4);
IkReal x1485=(cj4*sj1);
IkReal x1486=(r22*sj0);
IkReal x1487=(r00*sj5);
IkReal x1488=(cj1*cj4);
IkReal x1489=(r20*sj0*sj5);
IkReal x1490=(cj5*r21*sj0);
CheckValue<IkReal> x1491 = IKatan2WithCheck(IkReal((((x1482*x1483))+((x1482*x1487))+((x1486*x1488))+((x1484*x1490))+((x1484*x1489))+((r02*x1485)))),IkReal(((((-1.0)*x1484*x1487))+((x1482*x1490))+(((-1.0)*r02*x1488))+(((-1.0)*x1483*x1484))+((x1482*x1489))+((x1485*x1486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1491.valid){
continue;
}
CheckValue<IkReal> x1492=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1492.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1491.value)+(((1.5707963267949)*(x1492.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1493=IKsin(j2);
IkReal x1494=IKcos(j2);
IkReal x1495=(cj3*sj4);
IkReal x1496=(r21*sj5);
IkReal x1497=(sj0*sj1);
IkReal x1498=((1.0)*cj1);
IkReal x1499=((0.15)*cj5);
IkReal x1500=(cj0*sj1);
IkReal x1501=((1.0)*cj4);
IkReal x1502=(r11*sj5);
IkReal x1503=(cj3*sj5);
IkReal x1504=((0.59)*cj1);
IkReal x1505=(r01*sj5);
IkReal x1506=((0.59)*x1493);
IkReal x1507=((1.0)*cj5*sj3);
IkReal x1508=(sj1*x1494);
IkReal x1509=(cj1*x1493);
IkReal x1510=((1.0)*sj4*sj5);
IkReal x1511=(sj0*x1494);
IkReal x1512=((1.0)*cj5*sj4);
IkReal x1513=(cj0*x1494);
IkReal x1514=(cj3*cj5*x1501);
evalcond[0]=((((-1.0)*r20*x1510))+(((-1.0)*r22*x1501))+x1508+x1509+(((-1.0)*r21*x1512)));
evalcond[1]=((((0.71)*cj1))+((r20*x1499))+(((-1.0)*pz))+(((-0.59)*x1508))+(((-0.15)*x1496))+(((-1.0)*x1493*x1504)));
evalcond[2]=((((-1.0)*x1498*x1511))+(((-1.0)*r01*x1512))+(((-1.0)*r00*x1510))+(((-1.0)*r02*x1501))+((x1493*x1497)));
evalcond[3]=(((cj1*x1513))+(((-1.0)*x1493*x1500))+(((-1.0)*r11*x1512))+(((-1.0)*r10*x1510))+(((-1.0)*r12*x1501)));
evalcond[4]=(((r00*x1499))+((x1504*x1511))+(((0.71)*x1497))+(((-1.0)*px))+(((-0.05)*cj0))+(((-1.0)*x1497*x1506))+(((-0.15)*x1505)));
evalcond[5]=(((r10*x1499))+(((-1.0)*x1504*x1513))+(((-0.71)*x1500))+(((-0.05)*sj0))+(((-1.0)*py))+((x1500*x1506))+(((-0.15)*x1502)));
evalcond[6]=((((-1.0)*r20*x1507))+((sj3*x1496))+(((-1.0)*r20*x1501*x1503))+(((-1.0)*x1494*x1498))+((sj1*x1493))+((r22*x1495))+(((-1.0)*r21*x1514)));
evalcond[7]=(((cj0*x1509))+((x1494*x1500))+((sj3*x1502))+((r12*x1495))+(((-1.0)*r10*x1501*x1503))+(((-1.0)*r11*x1514))+(((-1.0)*r10*x1507)));
evalcond[8]=(((sj3*x1505))+(((-1.0)*r01*x1514))+(((-1.0)*r00*x1507))+(((-1.0)*x1494*x1497))+(((-1.0)*sj0*x1493*x1498))+((r02*x1495))+(((-1.0)*r00*x1501*x1503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1515=((1.0)*sj4);
IkReal x1516=(r21*sj0);
IkReal x1517=((1.0)*cj4);
IkReal x1518=((1.0)*r20*sj0);
CheckValue<IkReal> x1519 = IKatan2WithCheck(IkReal((((sj5*x1516))+(((-1.0)*cj5*x1518)))),IkReal(((((-1.0)*cj5*x1516*x1517))+((r22*sj0*sj4))+(((-1.0)*r20*sj0*sj5*x1517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1519.valid){
continue;
}
CheckValue<IkReal> x1520=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01*x1515))+(((-1.0)*r02*x1517))+(((-1.0)*r00*sj5*x1515)))),-1);
if(!x1520.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1519.value)+(((1.5707963267949)*(x1520.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1521=IKsin(j3);
IkReal x1522=IKcos(j3);
IkReal x1523=(sj5*x1522);
IkReal x1524=(cj4*cj5*x1521);
IkReal x1525=(cj4*sj5*x1521);
IkReal x1526=((1.0)*cj5*x1522);
IkReal x1527=((1.0)*sj4*x1521);
evalcond[0]=((((-1.0)*r22*x1527))+((r20*x1525))+((r21*x1524))+((r21*x1523))+(((-1.0)*r20*x1526)));
evalcond[1]=((((-1.0)*r00*x1526))+cj0+((r00*x1525))+((r01*x1523))+((r01*x1524))+(((-1.0)*r02*x1527)));
evalcond[2]=((((-1.0)*r12*x1527))+sj0+((r10*x1525))+((r11*x1523))+((r11*x1524))+(((-1.0)*r10*x1526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1528=((0.830985915492958)*sj4);
IkReal x1529=((0.211267605633803)*sj5);
IkReal x1530=((0.830985915492958)*cj4);
IkReal x1531=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r00*x1531))+((r01*x1529))+((cj5*r01*x1528))+(((1.40845070422535)*px))+((r02*x1530))+((r00*sj5*x1528)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x1528))+((cj5*r21*x1528))+((r21*x1529))+(((1.40845070422535)*pz))+((r22*x1530))+(((-1.0)*r20*x1531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1531))+((r01*x1529))+((cj5*r01*x1528))+(((1.40845070422535)*px))+((r02*x1530))+((r00*sj5*x1528))))+IKsqr((((r20*sj5*x1528))+((cj5*r21*x1528))+((r21*x1529))+(((1.40845070422535)*pz))+((r22*x1530))+(((-1.0)*r20*x1531))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x1531))+((r01*x1529))+((cj5*r01*x1528))+(((1.40845070422535)*px))+((r02*x1530))+((r00*sj5*x1528))), (((r20*sj5*x1528))+((cj5*r21*x1528))+((r21*x1529))+(((1.40845070422535)*pz))+((r22*x1530))+(((-1.0)*r20*x1531))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1532=(r00*sj5);
IkReal x1533=(r21*sj5);
IkReal x1534=((0.59)*sj4);
IkReal x1535=(cj5*r21);
IkReal x1536=(cj5*r01);
IkReal x1537=(r20*sj5);
IkReal x1538=(cj5*r00);
IkReal x1539=((0.59)*sj3);
IkReal x1540=(cj5*r20);
IkReal x1541=((0.59)*cj4);
IkReal x1542=(r01*sj5);
IkReal x1543=((0.15)*x1533);
IkReal x1544=((0.15)*x1540);
IkReal x1545=((0.71)*(IKcos(j1)));
IkReal x1546=((0.71)*(IKsin(j1)));
IkReal x1547=((0.15)*x1538);
IkReal x1548=((0.15)*x1542);
IkReal x1549=(cj3*x1541);
IkReal x1550=(x1543+pz);
IkReal x1551=(x1546+x1547);
IkReal x1552=(x1544+x1545);
evalcond[0]=(((x1532*x1534))+x1548+px+((r02*x1541))+(((-1.0)*x1551))+((x1534*x1536)));
evalcond[1]=(x1550+((r22*x1541))+(((-1.0)*x1552))+((x1534*x1535))+((x1534*x1537)));
evalcond[2]=(((x1539*x1542))+(((-1.0)*x1532*x1549))+x1550+(((-1.0)*x1536*x1549))+((cj3*r02*x1534))+(((-1.0)*x1552))+(((-1.0)*x1538*x1539)));
evalcond[3]=(((cj3*r22*x1534))+(((-1.0)*x1535*x1549))+(((-1.0)*px))+x1551+(((-1.0)*x1537*x1549))+(((-1.0)*x1539*x1540))+((x1533*x1539))+(((-1.0)*x1548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1553=(cj4*sj1);
IkReal x1554=(cj1*cj4);
IkReal x1555=(cj5*sj4);
IkReal x1556=((1.0)*cj1);
IkReal x1557=(sj4*sj5);
IkReal x1558=(sj1*x1557);
if( IKabs((((r00*x1558))+((cj1*r21*x1555))+((r01*sj1*x1555))+((r22*x1554))+((r02*x1553))+((cj1*r20*x1557)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1555*x1556))+((r22*x1553))+(((-1.0)*r00*x1556*x1557))+(((-1.0)*r02*x1554))+((r21*sj1*x1555))+((r20*x1558)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1558))+((cj1*r21*x1555))+((r01*sj1*x1555))+((r22*x1554))+((r02*x1553))+((cj1*r20*x1557))))+IKsqr(((((-1.0)*r01*x1555*x1556))+((r22*x1553))+(((-1.0)*r00*x1556*x1557))+(((-1.0)*r02*x1554))+((r21*sj1*x1555))+((r20*x1558))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*x1558))+((cj1*r21*x1555))+((r01*sj1*x1555))+((r22*x1554))+((r02*x1553))+((cj1*r20*x1557))), ((((-1.0)*r01*x1555*x1556))+((r22*x1553))+(((-1.0)*r00*x1556*x1557))+(((-1.0)*r02*x1554))+((r21*sj1*x1555))+((r20*x1558))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1559=IKsin(j2);
IkReal x1560=IKcos(j2);
IkReal x1561=(cj3*sj4);
IkReal x1562=((1.0)*cj5);
IkReal x1563=(r21*sj5);
IkReal x1564=(cj3*cj4);
IkReal x1565=((0.15)*cj5);
IkReal x1566=((1.0)*sj5);
IkReal x1567=((1.0)*cj4);
IkReal x1568=(r01*sj5);
IkReal x1569=(sj1*x1559);
IkReal x1570=(cj1*x1559);
IkReal x1571=((0.59)*x1560);
IkReal x1572=((1.0)*x1560);
IkReal x1573=(cj1*x1572);
evalcond[0]=(((sj1*x1560))+(((-1.0)*r22*x1567))+x1570+(((-1.0)*r20*sj4*x1566))+(((-1.0)*r21*sj4*x1562)));
evalcond[1]=((((-1.0)*r02*x1567))+(((-1.0)*r01*sj4*x1562))+(((-1.0)*r00*sj4*x1566))+x1569+(((-1.0)*x1573)));
evalcond[2]=((((-1.0)*sj1*x1571))+(((0.71)*cj1))+(((-0.15)*x1563))+((r20*x1565))+(((-1.0)*pz))+(((-0.59)*x1570)));
evalcond[3]=((((-0.15)*x1568))+((cj1*x1571))+(((-1.0)*px))+(((0.71)*sj1))+(((-0.59)*x1569))+((r00*x1565)));
evalcond[4]=((((-1.0)*r20*sj3*x1562))+(((-1.0)*r21*x1562*x1564))+(((-1.0)*r20*x1564*x1566))+x1569+((r22*x1561))+(((-1.0)*x1573))+((sj3*x1563)));
evalcond[5]=((((-1.0)*sj1*x1572))+(((-1.0)*r01*x1562*x1564))+(((-1.0)*r00*sj3*x1562))+(((-1.0)*r00*x1564*x1566))+((r02*x1561))+((sj3*x1568))+(((-1.0)*x1570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1574=((0.830985915492958)*sj4);
IkReal x1575=((0.211267605633803)*sj5);
IkReal x1576=((0.830985915492958)*cj4);
IkReal x1577=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*r02*x1576))+(((-1.40845070422535)*px))+(((-1.0)*r01*x1575))+(((-1.0)*cj5*r01*x1574))+((r00*x1577))+(((-1.0)*r00*sj5*x1574)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x1574))+((r21*x1575))+(((-1.0)*r20*x1577))+((cj5*r21*x1574))+(((1.40845070422535)*pz))+((r22*x1576)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x1576))+(((-1.40845070422535)*px))+(((-1.0)*r01*x1575))+(((-1.0)*cj5*r01*x1574))+((r00*x1577))+(((-1.0)*r00*sj5*x1574))))+IKsqr((((r20*sj5*x1574))+((r21*x1575))+(((-1.0)*r20*x1577))+((cj5*r21*x1574))+(((1.40845070422535)*pz))+((r22*x1576))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x1576))+(((-1.40845070422535)*px))+(((-1.0)*r01*x1575))+(((-1.0)*cj5*r01*x1574))+((r00*x1577))+(((-1.0)*r00*sj5*x1574))), (((r20*sj5*x1574))+((r21*x1575))+(((-1.0)*r20*x1577))+((cj5*r21*x1574))+(((1.40845070422535)*pz))+((r22*x1576))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1578=((1.0)*px);
IkReal x1579=(r00*sj5);
IkReal x1580=(r21*sj5);
IkReal x1581=((0.59)*sj4);
IkReal x1582=(cj5*r21);
IkReal x1583=(cj5*r01);
IkReal x1584=(r20*sj5);
IkReal x1585=(cj5*r00);
IkReal x1586=((0.59)*sj3);
IkReal x1587=(cj5*r20);
IkReal x1588=((0.59)*cj4);
IkReal x1589=(r01*sj5);
IkReal x1590=((0.15)*x1585);
IkReal x1591=((0.15)*x1589);
IkReal x1592=((0.71)*(IKsin(j1)));
IkReal x1593=((0.15)*x1587);
IkReal x1594=((0.71)*(IKcos(j1)));
IkReal x1595=((0.15)*x1580);
IkReal x1596=(cj3*x1588);
IkReal x1597=(x1594+x1593);
IkReal x1598=(x1578+x1591+x1592);
evalcond[0]=((((-1.0)*x1597))+x1595+((r22*x1588))+pz+((x1581*x1582))+((x1581*x1584)));
evalcond[1]=((((-1.0)*x1598))+(((-1.0)*r02*x1588))+x1590+(((-1.0)*x1579*x1581))+(((-1.0)*x1581*x1583)));
evalcond[2]=(((x1586*x1587))+(((-1.0)*x1598))+(((-1.0)*x1580*x1586))+((x1584*x1596))+((x1582*x1596))+x1590+(((-1.0)*cj3*r22*x1581)));
evalcond[3]=(((x1586*x1589))+(((-1.0)*x1595))+(((-1.0)*x1583*x1596))+(((-1.0)*x1585*x1586))+(((-1.0)*pz))+x1597+(((-1.0)*x1579*x1596))+((cj3*r02*x1581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1599=(cj4*r22);
IkReal x1600=(cj5*sj4);
IkReal x1601=((1.0)*sj1);
IkReal x1602=(cj4*r02);
IkReal x1603=(sj4*sj5);
if( IKabs((((cj1*x1599))+((cj1*r20*x1603))+(((-1.0)*x1601*x1602))+((cj1*r21*x1600))+(((-1.0)*r01*x1600*x1601))+(((-1.0)*r00*x1601*x1603)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1602))+((cj1*r00*x1603))+((cj1*r01*x1600))+((sj1*x1599))+((r21*sj1*x1600))+((r20*sj1*x1603)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1599))+((cj1*r20*x1603))+(((-1.0)*x1601*x1602))+((cj1*r21*x1600))+(((-1.0)*r01*x1600*x1601))+(((-1.0)*r00*x1601*x1603))))+IKsqr((((cj1*x1602))+((cj1*r00*x1603))+((cj1*r01*x1600))+((sj1*x1599))+((r21*sj1*x1600))+((r20*sj1*x1603))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1599))+((cj1*r20*x1603))+(((-1.0)*x1601*x1602))+((cj1*r21*x1600))+(((-1.0)*r01*x1600*x1601))+(((-1.0)*r00*x1601*x1603))), (((cj1*x1602))+((cj1*r00*x1603))+((cj1*r01*x1600))+((sj1*x1599))+((r21*sj1*x1600))+((r20*sj1*x1603))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1604=IKcos(j2);
IkReal x1605=IKsin(j2);
IkReal x1606=(cj3*sj4);
IkReal x1607=((1.0)*cj5);
IkReal x1608=(r21*sj5);
IkReal x1609=((0.59)*sj1);
IkReal x1610=(cj3*cj4);
IkReal x1611=((0.15)*cj5);
IkReal x1612=((1.0)*sj5);
IkReal x1613=((1.0)*cj4);
IkReal x1614=(r01*sj5);
IkReal x1615=(sj1*x1604);
IkReal x1616=(cj1*x1605);
IkReal x1617=(cj1*x1604);
IkReal x1618=(sj1*x1605);
IkReal x1619=(x1616+x1615);
evalcond[0]=((((-1.0)*r20*sj4*x1612))+x1619+(((-1.0)*r22*x1613))+(((-1.0)*r21*sj4*x1607)));
evalcond[1]=((((-1.0)*x1618))+(((-1.0)*r00*sj4*x1612))+x1617+(((-1.0)*r02*x1613))+(((-1.0)*r01*sj4*x1607)));
evalcond[2]=((((-0.59)*x1616))+((r20*x1611))+(((0.71)*cj1))+(((-0.15)*x1608))+(((-1.0)*pz))+(((-1.0)*x1604*x1609)));
evalcond[3]=((((-0.59)*x1617))+((r00*x1611))+(((-0.15)*x1614))+(((-0.71)*sj1))+(((-1.0)*px))+((x1605*x1609)));
evalcond[4]=((((-1.0)*r00*x1610*x1612))+x1619+((sj3*x1614))+((r02*x1606))+(((-1.0)*r01*x1607*x1610))+(((-1.0)*r00*sj3*x1607)));
evalcond[5]=((((-1.0)*r20*x1610*x1612))+((sj3*x1608))+(((-1.0)*x1617))+x1618+(((-1.0)*r21*x1607*x1610))+((r22*x1606))+(((-1.0)*r20*sj3*x1607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1620=((0.211267605633803)*sj5);
IkReal x1621=((0.211267605633803)*cj5);
IkReal x1622=((0.830985915492958)*cj4);
IkReal x1623=((0.830985915492958)*sj4*sj5);
IkReal x1624=((0.830985915492958)*cj5*sj4);
if( IKabs(((((-1.0)*r12*x1622))+(((-1.0)*r11*x1620))+(((-1.0)*r11*x1624))+(((-1.40845070422535)*py))+(((-1.0)*r10*x1623))+((r10*x1621)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1621))+((r20*x1623))+((r21*x1624))+((r21*x1620))+(((1.40845070422535)*pz))+((r22*x1622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1622))+(((-1.0)*r11*x1620))+(((-1.0)*r11*x1624))+(((-1.40845070422535)*py))+(((-1.0)*r10*x1623))+((r10*x1621))))+IKsqr(((((-1.0)*r20*x1621))+((r20*x1623))+((r21*x1624))+((r21*x1620))+(((1.40845070422535)*pz))+((r22*x1622))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x1622))+(((-1.0)*r11*x1620))+(((-1.0)*r11*x1624))+(((-1.40845070422535)*py))+(((-1.0)*r10*x1623))+((r10*x1621))), ((((-1.0)*r20*x1621))+((r20*x1623))+((r21*x1624))+((r21*x1620))+(((1.40845070422535)*pz))+((r22*x1622))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1625=((1.0)*py);
IkReal x1626=((0.15)*sj5);
IkReal x1627=(cj5*r10);
IkReal x1628=((0.59)*sj4);
IkReal x1629=(cj5*r21);
IkReal x1630=((0.59)*sj3);
IkReal x1631=(cj5*r11);
IkReal x1632=(cj5*r20);
IkReal x1633=((0.59)*cj4);
IkReal x1634=((0.15)*x1627);
IkReal x1635=((0.71)*(IKsin(j1)));
IkReal x1636=(r11*x1626);
IkReal x1637=((0.15)*x1632);
IkReal x1638=((0.71)*(IKcos(j1)));
IkReal x1639=(r21*x1626);
IkReal x1640=(cj3*sj5*x1633);
IkReal x1641=(x1637+x1638);
IkReal x1642=(x1625+x1635+x1636);
evalcond[0]=(((r20*sj5*x1628))+x1639+((x1628*x1629))+(((-1.0)*x1641))+pz+((r22*x1633)));
evalcond[1]=((((-1.0)*r10*sj5*x1628))+(((-1.0)*r12*x1633))+x1634+(((-1.0)*x1642))+(((-1.0)*x1628*x1631)));
evalcond[2]=((((-1.0)*cj3*r22*x1628))+x1634+((r20*x1640))+(((-1.0)*r21*sj5*x1630))+((cj3*x1629*x1633))+(((-1.0)*x1642))+((x1630*x1632)));
evalcond[3]=(x1641+((cj3*r12*x1628))+(((-1.0)*x1639))+(((-1.0)*pz))+(((-1.0)*r10*x1640))+(((-1.0)*cj3*x1631*x1633))+((r11*sj5*x1630))+(((-1.0)*x1627*x1630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1643=(cj5*sj4);
IkReal x1644=(cj1*cj4);
IkReal x1645=((1.0)*sj1);
IkReal x1646=(sj4*sj5);
if( IKabs((((cj1*r20*x1646))+(((-1.0)*r10*x1645*x1646))+((cj1*r21*x1643))+(((-1.0)*r11*x1643*x1645))+((r22*x1644))+(((-1.0)*cj4*r12*x1645)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x1646))+((r12*x1644))+((cj4*r22*sj1))+((r21*sj1*x1643))+((cj1*r10*x1646))+((cj1*r11*x1643)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1646))+(((-1.0)*r10*x1645*x1646))+((cj1*r21*x1643))+(((-1.0)*r11*x1643*x1645))+((r22*x1644))+(((-1.0)*cj4*r12*x1645))))+IKsqr((((r20*sj1*x1646))+((r12*x1644))+((cj4*r22*sj1))+((r21*sj1*x1643))+((cj1*r10*x1646))+((cj1*r11*x1643))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1646))+(((-1.0)*r10*x1645*x1646))+((cj1*r21*x1643))+(((-1.0)*r11*x1643*x1645))+((r22*x1644))+(((-1.0)*cj4*r12*x1645))), (((r20*sj1*x1646))+((r12*x1644))+((cj4*r22*sj1))+((r21*sj1*x1643))+((cj1*r10*x1646))+((cj1*r11*x1643))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1647=IKcos(j2);
IkReal x1648=IKsin(j2);
IkReal x1649=(r21*sj5);
IkReal x1650=((0.15)*cj5);
IkReal x1651=((0.59)*sj1);
IkReal x1652=(cj3*sj4);
IkReal x1653=(r11*sj5);
IkReal x1654=((1.0)*cj4);
IkReal x1655=(cj5*r21);
IkReal x1656=(cj3*sj5);
IkReal x1657=((1.0)*sj4);
IkReal x1658=(cj5*r11);
IkReal x1659=(sj1*x1647);
IkReal x1660=(cj1*x1648);
IkReal x1661=(cj1*x1647);
IkReal x1662=((1.0)*cj5*sj3);
IkReal x1663=(sj5*x1657);
IkReal x1664=(sj1*x1648);
IkReal x1665=(x1660+x1659);
evalcond[0]=((((-1.0)*r22*x1654))+x1665+(((-1.0)*x1655*x1657))+(((-1.0)*r20*x1663)));
evalcond[1]=(x1661+(((-1.0)*x1664))+(((-1.0)*r10*x1663))+(((-1.0)*r12*x1654))+(((-1.0)*x1657*x1658)));
evalcond[2]=((((0.71)*cj1))+(((-0.15)*x1649))+(((-1.0)*x1647*x1651))+((r20*x1650))+(((-0.59)*x1660))+(((-1.0)*pz)));
evalcond[3]=(((r10*x1650))+((x1648*x1651))+(((-0.59)*x1661))+(((-0.71)*sj1))+(((-1.0)*py))+(((-0.15)*x1653)));
evalcond[4]=(((r12*x1652))+x1665+(((-1.0)*r10*x1662))+((sj3*x1653))+(((-1.0)*cj3*x1654*x1658))+(((-1.0)*r10*x1654*x1656)));
evalcond[5]=(((r22*x1652))+x1664+((sj3*x1649))+(((-1.0)*x1661))+(((-1.0)*r20*x1662))+(((-1.0)*r20*x1654*x1656))+(((-1.0)*cj3*x1654*x1655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1666=((0.211267605633803)*sj5);
IkReal x1667=((0.211267605633803)*cj5);
IkReal x1668=((0.830985915492958)*cj4);
IkReal x1669=((0.830985915492958)*sj4*sj5);
IkReal x1670=((0.830985915492958)*cj5*sj4);
if( IKabs((((r10*x1669))+((r12*x1668))+((r11*x1666))+(((-1.0)*r10*x1667))+(((1.40845070422535)*py))+((r11*x1670)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1670))+(((-1.0)*r20*x1667))+((r20*x1669))+(((1.40845070422535)*pz))+((r21*x1666))+((r22*x1668)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1669))+((r12*x1668))+((r11*x1666))+(((-1.0)*r10*x1667))+(((1.40845070422535)*py))+((r11*x1670))))+IKsqr((((r21*x1670))+(((-1.0)*r20*x1667))+((r20*x1669))+(((1.40845070422535)*pz))+((r21*x1666))+((r22*x1668))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x1669))+((r12*x1668))+((r11*x1666))+(((-1.0)*r10*x1667))+(((1.40845070422535)*py))+((r11*x1670))), (((r21*x1670))+(((-1.0)*r20*x1667))+((r20*x1669))+(((1.40845070422535)*pz))+((r21*x1666))+((r22*x1668))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1671=((0.15)*sj5);
IkReal x1672=(cj5*r10);
IkReal x1673=((0.59)*sj4);
IkReal x1674=(cj5*r21);
IkReal x1675=((0.59)*sj3);
IkReal x1676=(cj5*r11);
IkReal x1677=(cj5*r20);
IkReal x1678=((0.59)*cj4);
IkReal x1679=(r21*x1671);
IkReal x1680=((0.15)*x1677);
IkReal x1681=((0.71)*(IKcos(j1)));
IkReal x1682=((0.71)*(IKsin(j1)));
IkReal x1683=((0.15)*x1672);
IkReal x1684=(r11*x1671);
IkReal x1685=(x1679+pz);
IkReal x1686=(cj3*sj5*x1678);
IkReal x1687=(x1683+x1682);
IkReal x1688=(x1681+x1680);
evalcond[0]=((((-1.0)*x1687))+x1684+((x1673*x1676))+((r10*sj5*x1673))+py+((r12*x1678)));
evalcond[1]=((((-1.0)*x1688))+x1685+((x1673*x1674))+((r20*sj5*x1673))+((r22*x1678)));
evalcond[2]=((((-1.0)*x1672*x1675))+(((-1.0)*x1688))+(((-1.0)*r10*x1686))+x1685+((cj3*r12*x1673))+(((-1.0)*cj3*x1676*x1678))+((r11*sj5*x1675)));
evalcond[3]=((((-1.0)*x1684))+((r21*sj5*x1675))+x1687+(((-1.0)*r20*x1686))+((cj3*r22*x1673))+(((-1.0)*py))+(((-1.0)*cj3*x1674*x1678))+(((-1.0)*x1675*x1677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1689=(cj4*r12);
IkReal x1690=((1.0)*cj1);
IkReal x1691=(cj4*r22);
IkReal x1692=(cj5*sj4);
IkReal x1693=(sj4*sj5);
if( IKabs((((r10*sj1*x1693))+((r11*sj1*x1692))+((sj1*x1689))+((cj1*r21*x1692))+((cj1*r20*x1693))+((cj1*x1691)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1690*x1693))+((sj1*x1691))+((r21*sj1*x1692))+(((-1.0)*r11*x1690*x1692))+((r20*sj1*x1693))+(((-1.0)*x1689*x1690)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj1*x1693))+((r11*sj1*x1692))+((sj1*x1689))+((cj1*r21*x1692))+((cj1*r20*x1693))+((cj1*x1691))))+IKsqr(((((-1.0)*r10*x1690*x1693))+((sj1*x1691))+((r21*sj1*x1692))+(((-1.0)*r11*x1690*x1692))+((r20*sj1*x1693))+(((-1.0)*x1689*x1690))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*sj1*x1693))+((r11*sj1*x1692))+((sj1*x1689))+((cj1*r21*x1692))+((cj1*r20*x1693))+((cj1*x1691))), ((((-1.0)*r10*x1690*x1693))+((sj1*x1691))+((r21*sj1*x1692))+(((-1.0)*r11*x1690*x1692))+((r20*sj1*x1693))+(((-1.0)*x1689*x1690))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1694=IKsin(j2);
IkReal x1695=IKcos(j2);
IkReal x1696=(r21*sj5);
IkReal x1697=((0.15)*cj5);
IkReal x1698=((1.0)*cj4);
IkReal x1699=(cj5*r21);
IkReal x1700=(r11*sj5);
IkReal x1701=(cj3*sj5);
IkReal x1702=(cj3*sj4);
IkReal x1703=((1.0)*sj4);
IkReal x1704=(cj5*r11);
IkReal x1705=(sj1*x1694);
IkReal x1706=(cj1*x1694);
IkReal x1707=((1.0)*cj5*sj3);
IkReal x1708=((0.59)*x1695);
IkReal x1709=((1.0)*x1695);
IkReal x1710=(sj5*x1703);
IkReal x1711=(cj1*x1709);
evalcond[0]=(x1706+((sj1*x1695))+(((-1.0)*x1699*x1703))+(((-1.0)*r20*x1710))+(((-1.0)*r22*x1698)));
evalcond[1]=(x1705+(((-1.0)*r12*x1698))+(((-1.0)*x1711))+(((-1.0)*x1703*x1704))+(((-1.0)*r10*x1710)));
evalcond[2]=((((0.71)*cj1))+((r20*x1697))+(((-1.0)*sj1*x1708))+(((-0.15)*x1696))+(((-0.59)*x1706))+(((-1.0)*pz)));
evalcond[3]=(((cj1*x1708))+((r10*x1697))+(((-0.15)*x1700))+(((-0.59)*x1705))+(((-1.0)*py))+(((0.71)*sj1)));
evalcond[4]=(((r22*x1702))+((sj3*x1696))+x1705+(((-1.0)*r20*x1698*x1701))+(((-1.0)*x1711))+(((-1.0)*cj3*x1698*x1699))+(((-1.0)*r20*x1707)));
evalcond[5]=(((r12*x1702))+(((-1.0)*x1706))+(((-1.0)*cj3*x1698*x1704))+(((-1.0)*sj1*x1709))+(((-1.0)*r10*x1707))+((sj3*x1700))+(((-1.0)*r10*x1698*x1701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1712=((0.15)*cj0);
IkReal x1713=(sj4*sj5);
IkReal x1714=((0.59)*cj0);
IkReal x1715=(cj5*sj4);
CheckValue<IkReal> x1716=IKPowWithIntegerCheck(cj0,-2);
if(!x1716.valid){
continue;
}
if( IKabs(((1.40845070422535)*(x1716.value)*((((cj5*r10*x1712))+(((-1.0)*r11*sj5*x1712))+(((-1.0)*cj4*r12*x1714))+(((-0.05)*cj0*sj0))+(((-1.0)*r10*x1713*x1714))+(((-1.0)*cj0*py))+(((-1.0)*r11*x1714*x1715)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.830985915492958)*r20*x1713))+(((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*cj4*r22))+(((0.830985915492958)*r21*x1715))+(((0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.40845070422535)*(x1716.value)*((((cj5*r10*x1712))+(((-1.0)*r11*sj5*x1712))+(((-1.0)*cj4*r12*x1714))+(((-0.05)*cj0*sj0))+(((-1.0)*r10*x1713*x1714))+(((-1.0)*cj0*py))+(((-1.0)*r11*x1714*x1715))))))+IKsqr(((((0.830985915492958)*r20*x1713))+(((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*cj4*r22))+(((0.830985915492958)*r21*x1715))+(((0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.40845070422535)*(x1716.value)*((((cj5*r10*x1712))+(((-1.0)*r11*sj5*x1712))+(((-1.0)*cj4*r12*x1714))+(((-0.05)*cj0*sj0))+(((-1.0)*r10*x1713*x1714))+(((-1.0)*cj0*py))+(((-1.0)*r11*x1714*x1715))))), ((((0.830985915492958)*r20*x1713))+(((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*cj4*r22))+(((0.830985915492958)*r21*x1715))+(((0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1717=IKsin(j1);
IkReal x1718=IKcos(j1);
IkReal x1719=sj0*sj0;
IkReal x1720=cj0*cj0;
IkReal x1721=(r21*sj0);
IkReal x1722=((0.15)*sj5);
IkReal x1723=(cj0*r21);
IkReal x1724=(cj5*sj0);
IkReal x1725=((0.15)*r20);
IkReal x1726=((1.0)*py);
IkReal x1727=((0.59)*sj4);
IkReal x1728=(cj0*r11);
IkReal x1729=((0.59)*sj5);
IkReal x1730=(cj3*cj4);
IkReal x1731=(cj5*r10);
IkReal x1732=(sj0*sj5);
IkReal x1733=((0.15)*r00);
IkReal x1734=((0.59)*sj3);
IkReal x1735=(cj0*r01);
IkReal x1736=(cj0*sj5);
IkReal x1737=(cj3*r22);
IkReal x1738=((1.0)*px);
IkReal x1739=(cj0*r20);
IkReal x1740=((0.05)*cj0);
IkReal x1741=(cj0*cj5);
IkReal x1742=(sj0*x1740);
IkReal x1743=((0.59)*cj0*cj4);
IkReal x1744=((0.71)*x1718);
IkReal x1745=((0.59)*cj4*sj0);
IkReal x1746=((0.71)*x1717);
IkReal x1747=((0.59)*cj5*x1730);
IkReal x1748=(cj0*x1746);
IkReal x1749=(sj0*x1748);
evalcond[0]=((((-1.0)*cj5*x1725))+(((0.59)*cj4*r22))+((r21*x1722))+pz+(((-1.0)*x1744))+((r20*sj5*x1727))+((cj5*r21*x1727)));
evalcond[1]=((((-1.0)*r12*x1743))+(((-1.0)*cj5*x1727*x1728))+(((-1.0)*cj0*x1726))+(((-1.0)*x1722*x1728))+(((-1.0)*r10*x1727*x1736))+(((-1.0)*x1742))+(((-1.0)*x1720*x1746))+(((0.15)*cj0*x1731)));
evalcond[2]=(x1742+((r02*x1745))+((r01*sj0*x1722))+(((-1.0)*x1719*x1746))+((r01*x1724*x1727))+((px*sj0))+(((-1.0)*x1724*x1733))+((r00*x1727*x1732)));
evalcond[3]=(((x1721*x1722))+(((-1.0)*sj0*x1744))+((r01*sj3*x1729))+(((-1.0)*cj5*r00*x1734))+(((-1.0)*x1724*x1725))+(((-1.0)*r01*x1747))+((pz*sj0))+((cj3*r02*x1727))+(((-1.0)*r00*x1729*x1730)));
evalcond[4]=((((-1.0)*x1731*x1734))+(((-1.0)*r11*x1747))+(((-1.0)*x1722*x1723))+((r11*sj3*x1729))+((cj0*x1744))+((cj3*r12*x1727))+(((-1.0)*cj0*pz))+((x1725*x1741))+(((-1.0)*r10*x1729*x1730)));
evalcond[5]=((((-1.0)*r11*x1722))+(((-1.0)*sj3*x1723*x1729))+(((-0.05)*sj0))+(((0.15)*x1731))+(((-1.0)*x1748))+((x1729*x1730*x1739))+((cj5*x1734*x1739))+(((-1.0)*x1726))+(((-1.0)*cj0*x1727*x1737))+((x1723*x1747)));
evalcond[6]=((((-1.0)*r01*x1722))+((sj0*x1727*x1737))+(((-1.0)*r20*sj0*x1729*x1730))+(((-1.0)*r20*x1724*x1734))+(((-1.0)*x1721*x1747))+(((-1.0)*x1740))+((sj0*x1746))+((sj3*x1721*x1729))+((cj5*x1733))+(((-1.0)*x1738)));
evalcond[7]=((((0.05)*x1719))+(((-0.15)*r10*x1724))+(((-1.0)*cj5*x1727*x1735))+x1749+((r11*sj0*x1722))+((py*sj0))+(((-1.0)*r00*x1727*x1736))+(((-1.0)*r02*x1743)));
evalcond[8]=(((r12*x1745))+x1749+(((-1.0)*cj0*x1738))+(((-1.0)*x1722*x1735))+((r11*x1724*x1727))+((x1733*x1741))+((r10*x1727*x1732))+(((-0.05)*x1720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1750=(cj4*sj1);
IkReal x1751=(cj1*cj4);
IkReal x1752=(cj5*sj4);
IkReal x1753=((1.0)*cj1);
IkReal x1754=(sj4*sj5);
IkReal x1755=(sj1*x1754);
if( IKabs((((cj1*r21*x1752))+((r22*x1751))+((r02*x1750))+((r01*sj1*x1752))+((cj1*r20*x1754))+((r00*x1755)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1751))+((r22*x1750))+((r20*x1755))+(((-1.0)*r00*x1753*x1754))+((r21*sj1*x1752))+(((-1.0)*r01*x1752*x1753)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x1752))+((r22*x1751))+((r02*x1750))+((r01*sj1*x1752))+((cj1*r20*x1754))+((r00*x1755))))+IKsqr(((((-1.0)*r02*x1751))+((r22*x1750))+((r20*x1755))+(((-1.0)*r00*x1753*x1754))+((r21*sj1*x1752))+(((-1.0)*r01*x1752*x1753))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x1752))+((r22*x1751))+((r02*x1750))+((r01*sj1*x1752))+((cj1*r20*x1754))+((r00*x1755))), ((((-1.0)*r02*x1751))+((r22*x1750))+((r20*x1755))+(((-1.0)*r00*x1753*x1754))+((r21*sj1*x1752))+(((-1.0)*r01*x1752*x1753))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1756=IKsin(j2);
IkReal x1757=IKcos(j2);
IkReal x1758=(cj3*sj4);
IkReal x1759=((1.0)*cj5);
IkReal x1760=(r21*sj5);
IkReal x1761=(cj3*cj4);
IkReal x1762=((0.15)*cj5);
IkReal x1763=((1.0)*sj5);
IkReal x1764=((1.0)*cj4);
IkReal x1765=(r01*sj5);
IkReal x1766=(sj1*x1756);
IkReal x1767=(cj1*x1756);
IkReal x1768=((0.59)*x1757);
IkReal x1769=((1.0)*x1757);
IkReal x1770=(cj1*x1769);
evalcond[0]=(x1767+(((-1.0)*r20*sj4*x1763))+(((-1.0)*r22*x1764))+((sj1*x1757))+(((-1.0)*r21*sj4*x1759)));
evalcond[1]=(x1766+(((-1.0)*r00*sj4*x1763))+(((-1.0)*r02*x1764))+(((-1.0)*x1770))+(((-1.0)*r01*sj4*x1759)));
evalcond[2]=((((-0.59)*x1767))+(((0.71)*cj1))+(((-1.0)*sj1*x1768))+((r20*x1762))+(((-1.0)*pz))+(((-0.15)*x1760)));
evalcond[3]=((((-0.59)*x1766))+((r00*x1762))+(((-1.0)*px))+(((-0.15)*x1765))+(((0.71)*sj1))+((cj1*x1768)));
evalcond[4]=(x1766+((sj3*x1760))+((r22*x1758))+(((-1.0)*x1770))+(((-1.0)*r21*x1759*x1761))+(((-1.0)*r20*x1761*x1763))+(((-1.0)*r20*sj3*x1759)));
evalcond[5]=((((-1.0)*sj1*x1769))+(((-1.0)*x1767))+(((-1.0)*r00*x1761*x1763))+((sj3*x1765))+((r02*x1758))+(((-1.0)*r01*x1759*x1761))+(((-1.0)*r00*sj3*x1759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1771=(cj4*r22);
IkReal x1772=(cj5*sj4);
IkReal x1773=((1.0)*sj1);
IkReal x1774=(cj4*r02);
IkReal x1775=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x1772*x1773))+(((-1.0)*r00*x1773*x1775))+((cj1*r21*x1772))+((cj1*r20*x1775))+(((-1.0)*x1773*x1774))+((cj1*x1771)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x1775))+((r21*sj1*x1772))+((cj1*r01*x1772))+((sj1*x1771))+((cj1*r00*x1775))+((cj1*x1774)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1772*x1773))+(((-1.0)*r00*x1773*x1775))+((cj1*r21*x1772))+((cj1*r20*x1775))+(((-1.0)*x1773*x1774))+((cj1*x1771))))+IKsqr((((r20*sj1*x1775))+((r21*sj1*x1772))+((cj1*r01*x1772))+((sj1*x1771))+((cj1*r00*x1775))+((cj1*x1774))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1772*x1773))+(((-1.0)*r00*x1773*x1775))+((cj1*r21*x1772))+((cj1*r20*x1775))+(((-1.0)*x1773*x1774))+((cj1*x1771))), (((r20*sj1*x1775))+((r21*sj1*x1772))+((cj1*r01*x1772))+((sj1*x1771))+((cj1*r00*x1775))+((cj1*x1774))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1776=IKcos(j2);
IkReal x1777=IKsin(j2);
IkReal x1778=(cj3*sj4);
IkReal x1779=((1.0)*cj5);
IkReal x1780=(r21*sj5);
IkReal x1781=((0.59)*sj1);
IkReal x1782=(cj3*cj4);
IkReal x1783=((0.15)*cj5);
IkReal x1784=((1.0)*sj5);
IkReal x1785=((1.0)*cj4);
IkReal x1786=(r01*sj5);
IkReal x1787=(sj1*x1776);
IkReal x1788=(cj1*x1777);
IkReal x1789=(cj1*x1776);
IkReal x1790=(sj1*x1777);
IkReal x1791=(x1788+x1787);
evalcond[0]=((((-1.0)*r21*sj4*x1779))+(((-1.0)*r20*sj4*x1784))+x1791+(((-1.0)*r22*x1785)));
evalcond[1]=(x1789+(((-1.0)*r00*sj4*x1784))+(((-1.0)*x1790))+(((-1.0)*r02*x1785))+(((-1.0)*r01*sj4*x1779)));
evalcond[2]=(((r20*x1783))+(((0.71)*cj1))+(((-1.0)*pz))+(((-0.15)*x1780))+(((-1.0)*x1776*x1781))+(((-0.59)*x1788)));
evalcond[3]=(((x1777*x1781))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.15)*x1786))+((r00*x1783))+(((-0.59)*x1789)));
evalcond[4]=(((sj3*x1786))+x1791+((r02*x1778))+(((-1.0)*r00*sj3*x1779))+(((-1.0)*r01*x1779*x1782))+(((-1.0)*r00*x1782*x1784)));
evalcond[5]=(((sj3*x1780))+((r22*x1778))+(((-1.0)*r20*sj3*x1779))+x1790+(((-1.0)*r21*x1779*x1782))+(((-1.0)*r20*x1782*x1784))+(((-1.0)*x1789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1792=(cj5*sj4);
IkReal x1793=(cj1*cj4);
IkReal x1794=((1.0)*sj1);
IkReal x1795=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r12*x1794))+(((-1.0)*r10*x1794*x1795))+((cj1*r21*x1792))+((r22*x1793))+((cj1*r20*x1795))+(((-1.0)*r11*x1792*x1794)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*r22*sj1))+((cj1*r11*x1792))+((cj1*r10*x1795))+((r20*sj1*x1795))+((r12*x1793))+((r21*sj1*x1792)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r12*x1794))+(((-1.0)*r10*x1794*x1795))+((cj1*r21*x1792))+((r22*x1793))+((cj1*r20*x1795))+(((-1.0)*r11*x1792*x1794))))+IKsqr((((cj4*r22*sj1))+((cj1*r11*x1792))+((cj1*r10*x1795))+((r20*sj1*x1795))+((r12*x1793))+((r21*sj1*x1792))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r12*x1794))+(((-1.0)*r10*x1794*x1795))+((cj1*r21*x1792))+((r22*x1793))+((cj1*r20*x1795))+(((-1.0)*r11*x1792*x1794))), (((cj4*r22*sj1))+((cj1*r11*x1792))+((cj1*r10*x1795))+((r20*sj1*x1795))+((r12*x1793))+((r21*sj1*x1792))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1796=IKcos(j2);
IkReal x1797=IKsin(j2);
IkReal x1798=(r21*sj5);
IkReal x1799=((0.15)*cj5);
IkReal x1800=((0.59)*sj1);
IkReal x1801=(cj3*sj4);
IkReal x1802=(r11*sj5);
IkReal x1803=((1.0)*cj4);
IkReal x1804=(cj5*r21);
IkReal x1805=(cj3*sj5);
IkReal x1806=((1.0)*sj4);
IkReal x1807=(cj5*r11);
IkReal x1808=(sj1*x1796);
IkReal x1809=(cj1*x1797);
IkReal x1810=(cj1*x1796);
IkReal x1811=((1.0)*cj5*sj3);
IkReal x1812=(sj5*x1806);
IkReal x1813=(sj1*x1797);
IkReal x1814=(x1809+x1808);
evalcond[0]=((((-1.0)*x1804*x1806))+x1814+(((-1.0)*r22*x1803))+(((-1.0)*r20*x1812)));
evalcond[1]=((((-1.0)*r10*x1812))+x1810+(((-1.0)*x1806*x1807))+(((-1.0)*r12*x1803))+(((-1.0)*x1813)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*x1796*x1800))+(((-1.0)*pz))+(((-0.59)*x1809))+(((-0.15)*x1798))+((r20*x1799)));
evalcond[3]=(((r10*x1799))+(((-0.59)*x1810))+(((-0.71)*sj1))+((x1797*x1800))+(((-1.0)*py))+(((-0.15)*x1802)));
evalcond[4]=((((-1.0)*r10*x1811))+((sj3*x1802))+(((-1.0)*cj3*x1803*x1807))+((r12*x1801))+x1814+(((-1.0)*r10*x1803*x1805)));
evalcond[5]=(((sj3*x1798))+((r22*x1801))+(((-1.0)*cj3*x1803*x1804))+x1813+(((-1.0)*x1810))+(((-1.0)*r20*x1811))+(((-1.0)*r20*x1803*x1805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1815=(cj4*r12);
IkReal x1816=((1.0)*cj1);
IkReal x1817=(cj4*r22);
IkReal x1818=(cj5*sj4);
IkReal x1819=(sj4*sj5);
if( IKabs((((r11*sj1*x1818))+((cj1*r20*x1819))+((sj1*x1815))+((cj1*x1817))+((cj1*r21*x1818))+((r10*sj1*x1819)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1816*x1819))+((r21*sj1*x1818))+(((-1.0)*r11*x1816*x1818))+((r20*sj1*x1819))+((sj1*x1817))+(((-1.0)*x1815*x1816)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj1*x1818))+((cj1*r20*x1819))+((sj1*x1815))+((cj1*x1817))+((cj1*r21*x1818))+((r10*sj1*x1819))))+IKsqr(((((-1.0)*r10*x1816*x1819))+((r21*sj1*x1818))+(((-1.0)*r11*x1816*x1818))+((r20*sj1*x1819))+((sj1*x1817))+(((-1.0)*x1815*x1816))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*sj1*x1818))+((cj1*r20*x1819))+((sj1*x1815))+((cj1*x1817))+((cj1*r21*x1818))+((r10*sj1*x1819))), ((((-1.0)*r10*x1816*x1819))+((r21*sj1*x1818))+(((-1.0)*r11*x1816*x1818))+((r20*sj1*x1819))+((sj1*x1817))+(((-1.0)*x1815*x1816))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1820=IKsin(j2);
IkReal x1821=IKcos(j2);
IkReal x1822=(r21*sj5);
IkReal x1823=((0.15)*cj5);
IkReal x1824=((1.0)*cj4);
IkReal x1825=(cj5*r21);
IkReal x1826=(r11*sj5);
IkReal x1827=(cj3*sj5);
IkReal x1828=(cj3*sj4);
IkReal x1829=((1.0)*sj4);
IkReal x1830=(cj5*r11);
IkReal x1831=(sj1*x1820);
IkReal x1832=(cj1*x1820);
IkReal x1833=((1.0)*cj5*sj3);
IkReal x1834=((0.59)*x1821);
IkReal x1835=((1.0)*x1821);
IkReal x1836=(sj5*x1829);
IkReal x1837=(cj1*x1835);
evalcond[0]=((((-1.0)*r20*x1836))+(((-1.0)*x1825*x1829))+(((-1.0)*r22*x1824))+((sj1*x1821))+x1832);
evalcond[1]=((((-1.0)*r10*x1836))+(((-1.0)*x1837))+(((-1.0)*r12*x1824))+x1831+(((-1.0)*x1829*x1830)));
evalcond[2]=((((0.71)*cj1))+(((-0.15)*x1822))+(((-1.0)*pz))+(((-0.59)*x1832))+(((-1.0)*sj1*x1834))+((r20*x1823)));
evalcond[3]=(((r10*x1823))+(((-0.15)*x1826))+(((-1.0)*py))+(((-0.59)*x1831))+(((0.71)*sj1))+((cj1*x1834)));
evalcond[4]=((((-1.0)*r20*x1833))+(((-1.0)*x1837))+((r22*x1828))+(((-1.0)*cj3*x1824*x1825))+x1831+((sj3*x1822))+(((-1.0)*r20*x1824*x1827)));
evalcond[5]=((((-1.0)*r10*x1824*x1827))+(((-1.0)*x1832))+(((-1.0)*r10*x1833))+(((-1.0)*sj1*x1835))+((sj3*x1826))+((r12*x1828))+(((-1.0)*cj3*x1824*x1830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1838=(cj4*r12);
IkReal x1839=((1.0)*sj1);
IkReal x1840=(cj0*cj1);
IkReal x1841=(cj4*r22);
IkReal x1842=(cj0*sj1);
IkReal x1843=(sj4*sj5);
IkReal x1844=(cj5*r11*sj4);
IkReal x1845=(cj5*r21*sj4);
CheckValue<IkReal> x1846=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1846.valid){
continue;
}
CheckValue<IkReal> x1847 = IKatan2WithCheck(IkReal((((r20*x1840*x1843))+(((-1.0)*x1839*x1844))+((x1840*x1845))+((x1840*x1841))+(((-1.0)*x1838*x1839))+(((-1.0)*r10*x1839*x1843)))),IkReal((((cj1*x1844))+((cj1*r10*x1843))+((x1842*x1845))+((r20*x1842*x1843))+((x1841*x1842))+((cj1*x1838)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1847.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1846.value)))+(x1847.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1848=IKsin(j2);
IkReal x1849=IKcos(j2);
IkReal x1850=(cj3*sj4);
IkReal x1851=(r21*sj5);
IkReal x1852=(sj0*sj1);
IkReal x1853=((1.0)*cj1);
IkReal x1854=((0.15)*cj5);
IkReal x1855=(cj0*sj1);
IkReal x1856=((1.0)*cj4);
IkReal x1857=(r11*sj5);
IkReal x1858=(cj3*sj5);
IkReal x1859=((0.59)*cj1);
IkReal x1860=(r01*sj5);
IkReal x1861=((0.59)*x1848);
IkReal x1862=((1.0)*cj5*sj3);
IkReal x1863=(sj1*x1849);
IkReal x1864=(cj1*x1848);
IkReal x1865=((1.0)*sj4*sj5);
IkReal x1866=(sj0*x1849);
IkReal x1867=((1.0)*cj5*sj4);
IkReal x1868=(cj0*x1849);
IkReal x1869=(cj3*cj5*x1856);
evalcond[0]=((((-1.0)*r22*x1856))+(((-1.0)*r21*x1867))+(((-1.0)*r20*x1865))+x1863+x1864);
evalcond[1]=((((0.71)*cj1))+(((-1.0)*x1848*x1859))+(((-0.15)*x1851))+(((-1.0)*pz))+(((-0.59)*x1863))+((r20*x1854)));
evalcond[2]=((((-1.0)*x1853*x1866))+((x1848*x1852))+(((-1.0)*r01*x1867))+(((-1.0)*r02*x1856))+(((-1.0)*r00*x1865)));
evalcond[3]=(((cj1*x1868))+(((-1.0)*x1848*x1855))+(((-1.0)*r11*x1867))+(((-1.0)*r12*x1856))+(((-1.0)*r10*x1865)));
evalcond[4]=(((r00*x1854))+((x1859*x1866))+(((-0.15)*x1860))+(((-1.0)*x1852*x1861))+(((-1.0)*px))+(((-0.05)*cj0))+(((0.71)*x1852)));
evalcond[5]=(((r10*x1854))+(((-0.71)*x1855))+(((-0.05)*sj0))+(((-0.15)*x1857))+(((-1.0)*py))+(((-1.0)*x1859*x1868))+((x1855*x1861)));
evalcond[6]=((((-1.0)*x1849*x1853))+((sj1*x1848))+((r22*x1850))+(((-1.0)*r21*x1869))+(((-1.0)*r20*x1862))+(((-1.0)*r20*x1856*x1858))+((sj3*x1851)));
evalcond[7]=(((x1849*x1855))+(((-1.0)*r11*x1869))+((cj0*x1864))+((sj3*x1857))+((r12*x1850))+(((-1.0)*r10*x1856*x1858))+(((-1.0)*r10*x1862)));
evalcond[8]=((((-1.0)*x1849*x1852))+((r02*x1850))+(((-1.0)*r01*x1869))+(((-1.0)*sj0*x1848*x1853))+((sj3*x1860))+(((-1.0)*r00*x1862))+(((-1.0)*r00*x1856*x1858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1870=(sj1*sj4);
IkReal x1871=(cj5*r01);
IkReal x1872=(cj1*sj4);
IkReal x1873=(cj4*sj1);
IkReal x1874=(r22*sj0);
IkReal x1875=(r00*sj5);
IkReal x1876=(cj1*cj4);
IkReal x1877=(r20*sj0*sj5);
IkReal x1878=(cj5*r21*sj0);
CheckValue<IkReal> x1879=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1879.valid){
continue;
}
CheckValue<IkReal> x1880 = IKatan2WithCheck(IkReal((((r02*x1873))+((x1874*x1876))+((x1872*x1878))+((x1872*x1877))+((x1870*x1875))+((x1870*x1871)))),IkReal(((((-1.0)*x1871*x1872))+((x1873*x1874))+(((-1.0)*x1872*x1875))+(((-1.0)*r02*x1876))+((x1870*x1878))+((x1870*x1877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1880.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1879.value)))+(x1880.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1881=IKsin(j2);
IkReal x1882=IKcos(j2);
IkReal x1883=(cj3*sj4);
IkReal x1884=(r21*sj5);
IkReal x1885=(sj0*sj1);
IkReal x1886=((1.0)*cj1);
IkReal x1887=((0.15)*cj5);
IkReal x1888=(cj0*sj1);
IkReal x1889=((1.0)*cj4);
IkReal x1890=(r11*sj5);
IkReal x1891=(cj3*sj5);
IkReal x1892=((0.59)*cj1);
IkReal x1893=(r01*sj5);
IkReal x1894=((0.59)*x1881);
IkReal x1895=((1.0)*cj5*sj3);
IkReal x1896=(sj1*x1882);
IkReal x1897=(cj1*x1881);
IkReal x1898=((1.0)*sj4*sj5);
IkReal x1899=(sj0*x1882);
IkReal x1900=((1.0)*cj5*sj4);
IkReal x1901=(cj0*x1882);
IkReal x1902=(cj3*cj5*x1889);
evalcond[0]=((((-1.0)*r22*x1889))+(((-1.0)*r21*x1900))+x1896+x1897+(((-1.0)*r20*x1898)));
evalcond[1]=((((0.71)*cj1))+(((-0.59)*x1896))+((r20*x1887))+(((-1.0)*pz))+(((-0.15)*x1884))+(((-1.0)*x1881*x1892)));
evalcond[2]=(((x1881*x1885))+(((-1.0)*r02*x1889))+(((-1.0)*x1886*x1899))+(((-1.0)*r00*x1898))+(((-1.0)*r01*x1900)));
evalcond[3]=((((-1.0)*x1881*x1888))+((cj1*x1901))+(((-1.0)*r12*x1889))+(((-1.0)*r11*x1900))+(((-1.0)*r10*x1898)));
evalcond[4]=(((x1892*x1899))+(((0.71)*x1885))+((r00*x1887))+(((-0.15)*x1893))+(((-1.0)*px))+(((-1.0)*x1885*x1894))+(((-0.05)*cj0)));
evalcond[5]=((((-0.71)*x1888))+(((-0.05)*sj0))+((x1888*x1894))+(((-0.15)*x1890))+(((-1.0)*x1892*x1901))+((r10*x1887))+(((-1.0)*py)));
evalcond[6]=((((-1.0)*x1882*x1886))+(((-1.0)*r21*x1902))+(((-1.0)*r20*x1889*x1891))+(((-1.0)*r20*x1895))+((r22*x1883))+((sj1*x1881))+((sj3*x1884)));
evalcond[7]=(((r12*x1883))+((sj3*x1890))+((x1882*x1888))+(((-1.0)*r11*x1902))+(((-1.0)*r10*x1895))+((cj0*x1897))+(((-1.0)*r10*x1889*x1891)));
evalcond[8]=(((sj3*x1893))+(((-1.0)*sj0*x1881*x1886))+(((-1.0)*r00*x1895))+(((-1.0)*x1882*x1885))+(((-1.0)*r00*x1889*x1891))+(((-1.0)*r01*x1902))+((r02*x1883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1903=((0.15)*sj0);
IkReal x1904=((0.830985915492958)*sj4);
IkReal x1905=((0.59)*sj0*sj4);
CheckValue<IkReal> x1906=IKPowWithIntegerCheck(sj0,-2);
if(!x1906.valid){
continue;
}
if( IKabs(((1.40845070422535)*(x1906.value)*((((r01*sj5*x1903))+((cj5*r01*x1905))+(((0.05)*cj0*sj0))+(((-1.0)*cj5*r00*x1903))+((r00*sj5*x1905))+(((0.59)*cj4*r02*sj0))+((px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*cj4*r22))+(((0.211267605633803)*r21*sj5))+((r20*sj5*x1904))+(((1.40845070422535)*pz))+((cj5*r21*x1904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.40845070422535)*(x1906.value)*((((r01*sj5*x1903))+((cj5*r01*x1905))+(((0.05)*cj0*sj0))+(((-1.0)*cj5*r00*x1903))+((r00*sj5*x1905))+(((0.59)*cj4*r02*sj0))+((px*sj0))))))+IKsqr(((((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*cj4*r22))+(((0.211267605633803)*r21*sj5))+((r20*sj5*x1904))+(((1.40845070422535)*pz))+((cj5*r21*x1904))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.40845070422535)*(x1906.value)*((((r01*sj5*x1903))+((cj5*r01*x1905))+(((0.05)*cj0*sj0))+(((-1.0)*cj5*r00*x1903))+((r00*sj5*x1905))+(((0.59)*cj4*r02*sj0))+((px*sj0))))), ((((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*cj4*r22))+(((0.211267605633803)*r21*sj5))+((r20*sj5*x1904))+(((1.40845070422535)*pz))+((cj5*r21*x1904))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1907=IKsin(j1);
IkReal x1908=IKcos(j1);
IkReal x1909=sj0*sj0;
IkReal x1910=cj0*cj0;
IkReal x1911=(r21*sj0);
IkReal x1912=((0.15)*sj5);
IkReal x1913=(cj0*r21);
IkReal x1914=(cj5*sj0);
IkReal x1915=((0.15)*r20);
IkReal x1916=((1.0)*py);
IkReal x1917=((0.59)*sj4);
IkReal x1918=(cj0*r11);
IkReal x1919=((0.59)*sj5);
IkReal x1920=(cj3*cj4);
IkReal x1921=(cj5*r10);
IkReal x1922=(sj0*sj5);
IkReal x1923=((0.15)*r00);
IkReal x1924=((0.59)*sj3);
IkReal x1925=(cj0*r01);
IkReal x1926=(cj0*sj5);
IkReal x1927=(cj3*r22);
IkReal x1928=((1.0)*px);
IkReal x1929=(cj0*r20);
IkReal x1930=((0.05)*cj0);
IkReal x1931=(cj0*cj5);
IkReal x1932=(sj0*x1930);
IkReal x1933=((0.59)*cj0*cj4);
IkReal x1934=((0.71)*x1908);
IkReal x1935=((0.59)*cj4*sj0);
IkReal x1936=((0.71)*x1907);
IkReal x1937=((0.59)*cj5*x1920);
IkReal x1938=(cj0*x1936);
IkReal x1939=(sj0*x1938);
evalcond[0]=((((0.59)*cj4*r22))+((r20*sj5*x1917))+pz+((cj5*r21*x1917))+((r21*x1912))+(((-1.0)*cj5*x1915))+(((-1.0)*x1934)));
evalcond[1]=((((-1.0)*cj0*x1916))+(((-1.0)*x1910*x1936))+(((0.15)*cj0*x1921))+(((-1.0)*r10*x1917*x1926))+(((-1.0)*r12*x1933))+(((-1.0)*cj5*x1917*x1918))+(((-1.0)*x1912*x1918))+(((-1.0)*x1932)));
evalcond[2]=(((r02*x1935))+((r00*x1917*x1922))+(((-1.0)*x1914*x1923))+x1932+((r01*x1914*x1917))+((r01*sj0*x1912))+((px*sj0))+(((-1.0)*x1909*x1936)));
evalcond[3]=((((-1.0)*r00*x1919*x1920))+(((-1.0)*x1914*x1915))+(((-1.0)*r01*x1937))+((x1911*x1912))+((r01*sj3*x1919))+(((-1.0)*cj5*r00*x1924))+((pz*sj0))+(((-1.0)*sj0*x1934))+((cj3*r02*x1917)));
evalcond[4]=(((x1915*x1931))+((cj3*r12*x1917))+(((-1.0)*r11*x1937))+(((-1.0)*r10*x1919*x1920))+((cj0*x1934))+(((-1.0)*x1921*x1924))+(((-1.0)*x1912*x1913))+(((-1.0)*cj0*pz))+((r11*sj3*x1919)));
evalcond[5]=((((0.15)*x1921))+((cj5*x1924*x1929))+(((-0.05)*sj0))+(((-1.0)*r11*x1912))+(((-1.0)*sj3*x1913*x1919))+(((-1.0)*cj0*x1917*x1927))+((x1913*x1937))+((x1919*x1920*x1929))+(((-1.0)*x1916))+(((-1.0)*x1938)));
evalcond[6]=((((-1.0)*r01*x1912))+(((-1.0)*x1911*x1937))+((cj5*x1923))+((sj3*x1911*x1919))+(((-1.0)*x1928))+(((-1.0)*r20*x1914*x1924))+((sj0*x1936))+((sj0*x1917*x1927))+(((-1.0)*r20*sj0*x1919*x1920))+(((-1.0)*x1930)));
evalcond[7]=(((r11*sj0*x1912))+(((-1.0)*r00*x1917*x1926))+(((-0.15)*r10*x1914))+x1939+(((0.05)*x1909))+((py*sj0))+(((-1.0)*r02*x1933))+(((-1.0)*cj5*x1917*x1925)));
evalcond[8]=((((-0.05)*x1910))+(((-1.0)*x1912*x1925))+((r12*x1935))+x1939+((r10*x1917*x1922))+(((-1.0)*cj0*x1928))+((r11*x1914*x1917))+((x1923*x1931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1940=(cj4*sj1);
IkReal x1941=(cj1*cj4);
IkReal x1942=(cj5*sj4);
IkReal x1943=((1.0)*cj1);
IkReal x1944=(sj4*sj5);
IkReal x1945=(sj1*x1944);
if( IKabs((((cj1*r21*x1942))+((r22*x1941))+((r01*sj1*x1942))+((r00*x1945))+((cj1*r20*x1944))+((r02*x1940)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1945))+(((-1.0)*r01*x1942*x1943))+((r21*sj1*x1942))+((r22*x1940))+(((-1.0)*r02*x1941))+(((-1.0)*r00*x1943*x1944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x1942))+((r22*x1941))+((r01*sj1*x1942))+((r00*x1945))+((cj1*r20*x1944))+((r02*x1940))))+IKsqr((((r20*x1945))+(((-1.0)*r01*x1942*x1943))+((r21*sj1*x1942))+((r22*x1940))+(((-1.0)*r02*x1941))+(((-1.0)*r00*x1943*x1944))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x1942))+((r22*x1941))+((r01*sj1*x1942))+((r00*x1945))+((cj1*r20*x1944))+((r02*x1940))), (((r20*x1945))+(((-1.0)*r01*x1942*x1943))+((r21*sj1*x1942))+((r22*x1940))+(((-1.0)*r02*x1941))+(((-1.0)*r00*x1943*x1944))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1946=IKsin(j2);
IkReal x1947=IKcos(j2);
IkReal x1948=(cj3*sj4);
IkReal x1949=((1.0)*cj5);
IkReal x1950=(r21*sj5);
IkReal x1951=(cj3*cj4);
IkReal x1952=((0.15)*cj5);
IkReal x1953=((1.0)*sj5);
IkReal x1954=((1.0)*cj4);
IkReal x1955=(r01*sj5);
IkReal x1956=(sj1*x1946);
IkReal x1957=(cj1*x1946);
IkReal x1958=((0.59)*x1947);
IkReal x1959=((1.0)*x1947);
IkReal x1960=(cj1*x1959);
evalcond[0]=((((-1.0)*r20*sj4*x1953))+(((-1.0)*r22*x1954))+(((-1.0)*r21*sj4*x1949))+((sj1*x1947))+x1957);
evalcond[1]=((((-1.0)*r01*sj4*x1949))+(((-1.0)*r02*x1954))+(((-1.0)*x1960))+x1956+(((-1.0)*r00*sj4*x1953)));
evalcond[2]=((((-0.59)*x1957))+(((0.71)*cj1))+((r20*x1952))+(((-1.0)*sj1*x1958))+(((-1.0)*pz))+(((-0.15)*x1950)));
evalcond[3]=((((-0.59)*x1956))+((cj1*x1958))+(((-1.0)*px))+((r00*x1952))+(((0.71)*sj1))+(((-0.15)*x1955)));
evalcond[4]=(((sj3*x1950))+(((-1.0)*r20*x1951*x1953))+(((-1.0)*x1960))+(((-1.0)*r20*sj3*x1949))+((r22*x1948))+x1956+(((-1.0)*r21*x1949*x1951)));
evalcond[5]=((((-1.0)*r00*x1951*x1953))+(((-1.0)*sj1*x1959))+((sj3*x1955))+(((-1.0)*x1957))+(((-1.0)*r00*sj3*x1949))+(((-1.0)*r01*x1949*x1951))+((r02*x1948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1961=(cj4*r22);
IkReal x1962=(cj5*sj4);
IkReal x1963=((1.0)*sj1);
IkReal x1964=(cj4*r02);
IkReal x1965=(sj4*sj5);
if( IKabs((((cj1*r20*x1965))+((cj1*x1961))+(((-1.0)*r00*x1963*x1965))+(((-1.0)*x1963*x1964))+(((-1.0)*r01*x1962*x1963))+((cj1*r21*x1962)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x1965))+((cj1*x1964))+((cj1*r01*x1962))+((sj1*x1961))+((cj1*r00*x1965))+((r21*sj1*x1962)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1965))+((cj1*x1961))+(((-1.0)*r00*x1963*x1965))+(((-1.0)*x1963*x1964))+(((-1.0)*r01*x1962*x1963))+((cj1*r21*x1962))))+IKsqr((((r20*sj1*x1965))+((cj1*x1964))+((cj1*r01*x1962))+((sj1*x1961))+((cj1*r00*x1965))+((r21*sj1*x1962))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1965))+((cj1*x1961))+(((-1.0)*r00*x1963*x1965))+(((-1.0)*x1963*x1964))+(((-1.0)*r01*x1962*x1963))+((cj1*r21*x1962))), (((r20*sj1*x1965))+((cj1*x1964))+((cj1*r01*x1962))+((sj1*x1961))+((cj1*r00*x1965))+((r21*sj1*x1962))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1966=IKcos(j2);
IkReal x1967=IKsin(j2);
IkReal x1968=(cj3*sj4);
IkReal x1969=((1.0)*cj5);
IkReal x1970=(r21*sj5);
IkReal x1971=((0.59)*sj1);
IkReal x1972=(cj3*cj4);
IkReal x1973=((0.15)*cj5);
IkReal x1974=((1.0)*sj5);
IkReal x1975=((1.0)*cj4);
IkReal x1976=(r01*sj5);
IkReal x1977=(sj1*x1966);
IkReal x1978=(cj1*x1967);
IkReal x1979=(cj1*x1966);
IkReal x1980=(sj1*x1967);
IkReal x1981=(x1978+x1977);
evalcond[0]=((((-1.0)*r20*sj4*x1974))+(((-1.0)*r21*sj4*x1969))+(((-1.0)*r22*x1975))+x1981);
evalcond[1]=((((-1.0)*r01*sj4*x1969))+(((-1.0)*r02*x1975))+(((-1.0)*r00*sj4*x1974))+x1979+(((-1.0)*x1980)));
evalcond[2]=((((0.71)*cj1))+(((-0.59)*x1978))+((r20*x1973))+(((-1.0)*x1966*x1971))+(((-1.0)*pz))+(((-0.15)*x1970)));
evalcond[3]=(((x1967*x1971))+(((-0.59)*x1979))+(((-0.71)*sj1))+(((-1.0)*px))+((r00*x1973))+(((-0.15)*x1976)));
evalcond[4]=(((r02*x1968))+((sj3*x1976))+(((-1.0)*r01*x1969*x1972))+(((-1.0)*r00*x1972*x1974))+x1981+(((-1.0)*r00*sj3*x1969)));
evalcond[5]=((((-1.0)*r21*x1969*x1972))+((sj3*x1970))+(((-1.0)*x1979))+x1980+(((-1.0)*r20*sj3*x1969))+((r22*x1968))+(((-1.0)*r20*x1972*x1974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1982=(cj5*sj4);
IkReal x1983=(cj1*cj4);
IkReal x1984=((1.0)*sj1);
IkReal x1985=(sj4*sj5);
if( IKabs((((cj1*r20*x1985))+((cj1*r21*x1982))+(((-1.0)*r10*x1984*x1985))+((r22*x1983))+(((-1.0)*cj4*r12*x1984))+(((-1.0)*r11*x1982*x1984)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x1985))+((cj1*r11*x1982))+((cj4*r22*sj1))+((r12*x1983))+((r21*sj1*x1982))+((cj1*r10*x1985)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1985))+((cj1*r21*x1982))+(((-1.0)*r10*x1984*x1985))+((r22*x1983))+(((-1.0)*cj4*r12*x1984))+(((-1.0)*r11*x1982*x1984))))+IKsqr((((r20*sj1*x1985))+((cj1*r11*x1982))+((cj4*r22*sj1))+((r12*x1983))+((r21*sj1*x1982))+((cj1*r10*x1985))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1985))+((cj1*r21*x1982))+(((-1.0)*r10*x1984*x1985))+((r22*x1983))+(((-1.0)*cj4*r12*x1984))+(((-1.0)*r11*x1982*x1984))), (((r20*sj1*x1985))+((cj1*r11*x1982))+((cj4*r22*sj1))+((r12*x1983))+((r21*sj1*x1982))+((cj1*r10*x1985))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1986=IKcos(j2);
IkReal x1987=IKsin(j2);
IkReal x1988=(r21*sj5);
IkReal x1989=((0.15)*cj5);
IkReal x1990=((0.59)*sj1);
IkReal x1991=(cj3*sj4);
IkReal x1992=(r11*sj5);
IkReal x1993=((1.0)*cj4);
IkReal x1994=(cj5*r21);
IkReal x1995=(cj3*sj5);
IkReal x1996=((1.0)*sj4);
IkReal x1997=(cj5*r11);
IkReal x1998=(sj1*x1986);
IkReal x1999=(cj1*x1987);
IkReal x2000=(cj1*x1986);
IkReal x2001=((1.0)*cj5*sj3);
IkReal x2002=(sj5*x1996);
IkReal x2003=(sj1*x1987);
IkReal x2004=(x1999+x1998);
evalcond[0]=(x2004+(((-1.0)*x1994*x1996))+(((-1.0)*r22*x1993))+(((-1.0)*r20*x2002)));
evalcond[1]=((((-1.0)*x1996*x1997))+x2000+(((-1.0)*r10*x2002))+(((-1.0)*x2003))+(((-1.0)*r12*x1993)));
evalcond[2]=((((-0.15)*x1988))+(((0.71)*cj1))+(((-1.0)*x1986*x1990))+(((-1.0)*pz))+(((-0.59)*x1999))+((r20*x1989)));
evalcond[3]=((((-0.59)*x2000))+((r10*x1989))+(((-0.71)*sj1))+(((-1.0)*py))+(((-0.15)*x1992))+((x1987*x1990)));
evalcond[4]=(((r12*x1991))+x2004+(((-1.0)*r10*x2001))+((sj3*x1992))+(((-1.0)*cj3*x1993*x1997))+(((-1.0)*r10*x1993*x1995)));
evalcond[5]=(((sj3*x1988))+x2003+(((-1.0)*r20*x1993*x1995))+(((-1.0)*x2000))+(((-1.0)*cj3*x1993*x1994))+((r22*x1991))+(((-1.0)*r20*x2001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2005=(cj4*r12);
IkReal x2006=((1.0)*cj1);
IkReal x2007=(cj4*r22);
IkReal x2008=(cj5*sj4);
IkReal x2009=(sj4*sj5);
if( IKabs((((cj1*r20*x2009))+((r10*sj1*x2009))+((cj1*r21*x2008))+((sj1*x2005))+((r11*sj1*x2008))+((cj1*x2007)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2005*x2006))+((r20*sj1*x2009))+((r21*sj1*x2008))+(((-1.0)*r11*x2006*x2008))+((sj1*x2007))+(((-1.0)*r10*x2006*x2009)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x2009))+((r10*sj1*x2009))+((cj1*r21*x2008))+((sj1*x2005))+((r11*sj1*x2008))+((cj1*x2007))))+IKsqr(((((-1.0)*x2005*x2006))+((r20*sj1*x2009))+((r21*sj1*x2008))+(((-1.0)*r11*x2006*x2008))+((sj1*x2007))+(((-1.0)*r10*x2006*x2009))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x2009))+((r10*sj1*x2009))+((cj1*r21*x2008))+((sj1*x2005))+((r11*sj1*x2008))+((cj1*x2007))), ((((-1.0)*x2005*x2006))+((r20*sj1*x2009))+((r21*sj1*x2008))+(((-1.0)*r11*x2006*x2008))+((sj1*x2007))+(((-1.0)*r10*x2006*x2009))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2010=IKsin(j2);
IkReal x2011=IKcos(j2);
IkReal x2012=(r21*sj5);
IkReal x2013=((0.15)*cj5);
IkReal x2014=((1.0)*cj4);
IkReal x2015=(cj5*r21);
IkReal x2016=(r11*sj5);
IkReal x2017=(cj3*sj5);
IkReal x2018=(cj3*sj4);
IkReal x2019=((1.0)*sj4);
IkReal x2020=(cj5*r11);
IkReal x2021=(sj1*x2010);
IkReal x2022=(cj1*x2010);
IkReal x2023=((1.0)*cj5*sj3);
IkReal x2024=((0.59)*x2011);
IkReal x2025=((1.0)*x2011);
IkReal x2026=(sj5*x2019);
IkReal x2027=(cj1*x2025);
evalcond[0]=(((sj1*x2011))+x2022+(((-1.0)*x2015*x2019))+(((-1.0)*r20*x2026))+(((-1.0)*r22*x2014)));
evalcond[1]=((((-1.0)*r10*x2026))+x2021+(((-1.0)*x2019*x2020))+(((-1.0)*r12*x2014))+(((-1.0)*x2027)));
evalcond[2]=((((-0.15)*x2012))+(((0.71)*cj1))+((r20*x2013))+(((-0.59)*x2022))+(((-1.0)*pz))+(((-1.0)*sj1*x2024)));
evalcond[3]=((((-0.15)*x2016))+((r10*x2013))+(((-0.59)*x2021))+(((-1.0)*py))+(((0.71)*sj1))+((cj1*x2024)));
evalcond[4]=((((-1.0)*r20*x2014*x2017))+x2021+(((-1.0)*cj3*x2014*x2015))+((r22*x2018))+((sj3*x2012))+(((-1.0)*x2027))+(((-1.0)*r20*x2023)));
evalcond[5]=((((-1.0)*r10*x2014*x2017))+(((-1.0)*r10*x2023))+(((-1.0)*sj1*x2025))+(((-1.0)*x2022))+((sj3*x2016))+((r12*x2018))+(((-1.0)*cj3*x2014*x2020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2028=(cj4*r12);
IkReal x2029=((1.0)*sj1);
IkReal x2030=(cj0*cj1);
IkReal x2031=(cj4*r22);
IkReal x2032=(cj0*sj1);
IkReal x2033=(sj4*sj5);
IkReal x2034=(cj5*r11*sj4);
IkReal x2035=(cj5*r21*sj4);
CheckValue<IkReal> x2036=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2036.valid){
continue;
}
CheckValue<IkReal> x2037 = IKatan2WithCheck(IkReal((((r20*x2030*x2033))+((x2030*x2031))+((x2030*x2035))+(((-1.0)*x2029*x2034))+(((-1.0)*r10*x2029*x2033))+(((-1.0)*x2028*x2029)))),IkReal((((cj1*r10*x2033))+((x2031*x2032))+((x2032*x2035))+((r20*x2032*x2033))+((cj1*x2028))+((cj1*x2034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2037.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2036.value)))+(x2037.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2038=IKsin(j2);
IkReal x2039=IKcos(j2);
IkReal x2040=(cj3*sj4);
IkReal x2041=(r21*sj5);
IkReal x2042=(sj0*sj1);
IkReal x2043=((1.0)*cj1);
IkReal x2044=((0.15)*cj5);
IkReal x2045=(cj0*sj1);
IkReal x2046=((1.0)*cj4);
IkReal x2047=(r11*sj5);
IkReal x2048=(cj3*sj5);
IkReal x2049=((0.59)*cj1);
IkReal x2050=(r01*sj5);
IkReal x2051=((0.59)*x2038);
IkReal x2052=((1.0)*cj5*sj3);
IkReal x2053=(sj1*x2039);
IkReal x2054=(cj1*x2038);
IkReal x2055=((1.0)*sj4*sj5);
IkReal x2056=(sj0*x2039);
IkReal x2057=((1.0)*cj5*sj4);
IkReal x2058=(cj0*x2039);
IkReal x2059=(cj3*cj5*x2046);
evalcond[0]=((((-1.0)*r22*x2046))+x2053+x2054+(((-1.0)*r20*x2055))+(((-1.0)*r21*x2057)));
evalcond[1]=((((0.71)*cj1))+((r20*x2044))+(((-1.0)*pz))+(((-0.59)*x2053))+(((-0.15)*x2041))+(((-1.0)*x2038*x2049)));
evalcond[2]=((((-1.0)*r00*x2055))+(((-1.0)*r01*x2057))+(((-1.0)*r02*x2046))+(((-1.0)*x2043*x2056))+((x2038*x2042)));
evalcond[3]=((((-1.0)*r10*x2055))+(((-1.0)*x2038*x2045))+(((-1.0)*r11*x2057))+((cj1*x2058))+(((-1.0)*r12*x2046)));
evalcond[4]=((((0.71)*x2042))+((x2049*x2056))+(((-0.15)*x2050))+(((-1.0)*px))+(((-1.0)*x2042*x2051))+(((-0.05)*cj0))+((r00*x2044)));
evalcond[5]=((((-0.05)*sj0))+(((-1.0)*py))+(((-1.0)*x2049*x2058))+((x2045*x2051))+(((-0.71)*x2045))+(((-0.15)*x2047))+((r10*x2044)));
evalcond[6]=((((-1.0)*r20*x2046*x2048))+((r22*x2040))+(((-1.0)*x2039*x2043))+((sj1*x2038))+(((-1.0)*r20*x2052))+(((-1.0)*r21*x2059))+((sj3*x2041)));
evalcond[7]=((((-1.0)*r10*x2046*x2048))+(((-1.0)*r10*x2052))+((x2039*x2045))+((r12*x2040))+(((-1.0)*r11*x2059))+((cj0*x2054))+((sj3*x2047)));
evalcond[8]=((((-1.0)*r00*x2052))+(((-1.0)*r01*x2059))+((sj3*x2050))+(((-1.0)*r00*x2046*x2048))+((r02*x2040))+(((-1.0)*x2039*x2042))+(((-1.0)*sj0*x2038*x2043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2060=(sj1*sj4);
IkReal x2061=(cj5*r01);
IkReal x2062=(cj1*sj4);
IkReal x2063=(cj4*sj1);
IkReal x2064=(r22*sj0);
IkReal x2065=(r00*sj5);
IkReal x2066=(cj1*cj4);
IkReal x2067=(r20*sj0*sj5);
IkReal x2068=(cj5*r21*sj0);
CheckValue<IkReal> x2069=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2069.valid){
continue;
}
CheckValue<IkReal> x2070 = IKatan2WithCheck(IkReal((((r02*x2063))+((x2060*x2065))+((x2060*x2061))+((x2062*x2067))+((x2062*x2068))+((x2064*x2066)))),IkReal(((((-1.0)*r02*x2066))+((x2060*x2067))+((x2060*x2068))+(((-1.0)*x2062*x2065))+(((-1.0)*x2061*x2062))+((x2063*x2064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2070.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2069.value)))+(x2070.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2071=IKsin(j2);
IkReal x2072=IKcos(j2);
IkReal x2073=(cj3*sj4);
IkReal x2074=(r21*sj5);
IkReal x2075=(sj0*sj1);
IkReal x2076=((1.0)*cj1);
IkReal x2077=((0.15)*cj5);
IkReal x2078=(cj0*sj1);
IkReal x2079=((1.0)*cj4);
IkReal x2080=(r11*sj5);
IkReal x2081=(cj3*sj5);
IkReal x2082=((0.59)*cj1);
IkReal x2083=(r01*sj5);
IkReal x2084=((0.59)*x2071);
IkReal x2085=((1.0)*cj5*sj3);
IkReal x2086=(sj1*x2072);
IkReal x2087=(cj1*x2071);
IkReal x2088=((1.0)*sj4*sj5);
IkReal x2089=(sj0*x2072);
IkReal x2090=((1.0)*cj5*sj4);
IkReal x2091=(cj0*x2072);
IkReal x2092=(cj3*cj5*x2079);
evalcond[0]=((((-1.0)*r21*x2090))+(((-1.0)*r20*x2088))+x2086+x2087+(((-1.0)*r22*x2079)));
evalcond[1]=((((0.71)*cj1))+((r20*x2077))+(((-1.0)*pz))+(((-1.0)*x2071*x2082))+(((-0.15)*x2074))+(((-0.59)*x2086)));
evalcond[2]=((((-1.0)*r02*x2079))+(((-1.0)*x2076*x2089))+((x2071*x2075))+(((-1.0)*r01*x2090))+(((-1.0)*r00*x2088)));
evalcond[3]=(((cj1*x2091))+(((-1.0)*r12*x2079))+(((-1.0)*x2071*x2078))+(((-1.0)*r10*x2088))+(((-1.0)*r11*x2090)));
evalcond[4]=((((-1.0)*px))+((x2082*x2089))+(((-0.05)*cj0))+(((-0.15)*x2083))+((r00*x2077))+(((-1.0)*x2075*x2084))+(((0.71)*x2075)));
evalcond[5]=((((-0.05)*sj0))+((x2078*x2084))+(((-1.0)*py))+(((-0.15)*x2080))+((r10*x2077))+(((-0.71)*x2078))+(((-1.0)*x2082*x2091)));
evalcond[6]=((((-1.0)*r21*x2092))+((sj3*x2074))+((r22*x2073))+(((-1.0)*r20*x2085))+(((-1.0)*r20*x2079*x2081))+((sj1*x2071))+(((-1.0)*x2072*x2076)));
evalcond[7]=((((-1.0)*r10*x2079*x2081))+((r12*x2073))+(((-1.0)*r10*x2085))+(((-1.0)*r11*x2092))+((cj0*x2087))+((x2072*x2078))+((sj3*x2080)));
evalcond[8]=((((-1.0)*sj0*x2071*x2076))+(((-1.0)*r00*x2079*x2081))+((r02*x2073))+(((-1.0)*x2072*x2075))+(((-1.0)*r01*x2092))+((sj3*x2083))+(((-1.0)*r00*x2085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2093=(cj0*r21);
IkReal x2094=((1.0)*cj5);
IkReal x2095=(cj0*r20);
CheckValue<IkReal> x2096=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)))),-1);
if(!x2096.valid){
continue;
}
CheckValue<IkReal> x2097 = IKatan2WithCheck(IkReal(((((-1.0)*x2094*x2095))+((sj5*x2093)))),IkReal(((((-1.0)*cj4*sj5*x2095))+(((-1.0)*cj4*x2093*x2094))+((cj0*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2097.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2096.value)))+(x2097.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2098=IKsin(j3);
IkReal x2099=IKcos(j3);
IkReal x2100=(sj5*x2099);
IkReal x2101=(cj4*cj5*x2098);
IkReal x2102=(cj4*sj5*x2098);
IkReal x2103=((1.0)*cj5*x2099);
IkReal x2104=((1.0)*sj4*x2098);
evalcond[0]=(((r20*x2102))+(((-1.0)*r22*x2104))+((r21*x2101))+((r21*x2100))+(((-1.0)*r20*x2103)));
evalcond[1]=((((-1.0)*r02*x2104))+cj0+(((-1.0)*r00*x2103))+((r00*x2102))+((r01*x2100))+((r01*x2101)));
evalcond[2]=((((-1.0)*r10*x2103))+sj0+(((-1.0)*r12*x2104))+((r11*x2100))+((r11*x2101))+((r10*x2102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2105=((0.830985915492958)*sj4);
IkReal x2106=((0.211267605633803)*sj5);
IkReal x2107=((0.830985915492958)*cj4);
IkReal x2108=((0.211267605633803)*cj5);
if( IKabs((((r00*sj5*x2105))+((r02*x2107))+(((-1.0)*r00*x2108))+((r01*x2106))+((cj5*r01*x2105))+(((1.40845070422535)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x2106))+((r22*x2107))+(((-1.0)*r20*x2108))+((r20*sj5*x2105))+(((1.40845070422535)*pz))+((cj5*r21*x2105)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5*x2105))+((r02*x2107))+(((-1.0)*r00*x2108))+((r01*x2106))+((cj5*r01*x2105))+(((1.40845070422535)*px))))+IKsqr((((r21*x2106))+((r22*x2107))+(((-1.0)*r20*x2108))+((r20*sj5*x2105))+(((1.40845070422535)*pz))+((cj5*r21*x2105))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*sj5*x2105))+((r02*x2107))+(((-1.0)*r00*x2108))+((r01*x2106))+((cj5*r01*x2105))+(((1.40845070422535)*px))), (((r21*x2106))+((r22*x2107))+(((-1.0)*r20*x2108))+((r20*sj5*x2105))+(((1.40845070422535)*pz))+((cj5*r21*x2105))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2109=(r00*sj5);
IkReal x2110=(r21*sj5);
IkReal x2111=((0.59)*sj4);
IkReal x2112=(cj5*r21);
IkReal x2113=(cj5*r01);
IkReal x2114=(r20*sj5);
IkReal x2115=(cj5*r00);
IkReal x2116=((0.59)*sj3);
IkReal x2117=(cj5*r20);
IkReal x2118=((0.59)*cj4);
IkReal x2119=(r01*sj5);
IkReal x2120=((0.15)*x2110);
IkReal x2121=((0.15)*x2117);
IkReal x2122=((0.71)*(IKcos(j1)));
IkReal x2123=((0.71)*(IKsin(j1)));
IkReal x2124=((0.15)*x2115);
IkReal x2125=((0.15)*x2119);
IkReal x2126=(cj3*x2118);
IkReal x2127=(x2120+pz);
IkReal x2128=(x2123+x2124);
IkReal x2129=(x2121+x2122);
evalcond[0]=(((x2109*x2111))+x2125+((x2111*x2113))+((r02*x2118))+(((-1.0)*x2128))+px);
evalcond[1]=(x2127+((x2111*x2114))+((x2111*x2112))+(((-1.0)*x2129))+((r22*x2118)));
evalcond[2]=(((x2116*x2119))+(((-1.0)*x2109*x2126))+x2127+(((-1.0)*x2113*x2126))+(((-1.0)*x2129))+((cj3*r02*x2111))+(((-1.0)*x2115*x2116)));
evalcond[3]=((((-1.0)*x2116*x2117))+x2128+(((-1.0)*x2112*x2126))+((cj3*r22*x2111))+(((-1.0)*x2114*x2126))+(((-1.0)*px))+((x2110*x2116))+(((-1.0)*x2125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2130=(cj4*sj1);
IkReal x2131=(cj1*cj4);
IkReal x2132=(cj5*sj4);
IkReal x2133=((1.0)*cj1);
IkReal x2134=(sj4*sj5);
IkReal x2135=(sj1*x2134);
if( IKabs((((r01*sj1*x2132))+((r02*x2130))+((r00*x2135))+((cj1*r21*x2132))+((r22*x2131))+((cj1*r20*x2134)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x2131))+(((-1.0)*r00*x2133*x2134))+((r22*x2130))+((r21*sj1*x2132))+((r20*x2135))+(((-1.0)*r01*x2132*x2133)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj1*x2132))+((r02*x2130))+((r00*x2135))+((cj1*r21*x2132))+((r22*x2131))+((cj1*r20*x2134))))+IKsqr(((((-1.0)*r02*x2131))+(((-1.0)*r00*x2133*x2134))+((r22*x2130))+((r21*sj1*x2132))+((r20*x2135))+(((-1.0)*r01*x2132*x2133))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj1*x2132))+((r02*x2130))+((r00*x2135))+((cj1*r21*x2132))+((r22*x2131))+((cj1*r20*x2134))), ((((-1.0)*r02*x2131))+(((-1.0)*r00*x2133*x2134))+((r22*x2130))+((r21*sj1*x2132))+((r20*x2135))+(((-1.0)*r01*x2132*x2133))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2136=IKsin(j2);
IkReal x2137=IKcos(j2);
IkReal x2138=(cj3*sj4);
IkReal x2139=((1.0)*cj5);
IkReal x2140=(r21*sj5);
IkReal x2141=(cj3*cj4);
IkReal x2142=((0.15)*cj5);
IkReal x2143=((1.0)*sj5);
IkReal x2144=((1.0)*cj4);
IkReal x2145=(r01*sj5);
IkReal x2146=(sj1*x2136);
IkReal x2147=(cj1*x2136);
IkReal x2148=((0.59)*x2137);
IkReal x2149=((1.0)*x2137);
IkReal x2150=(cj1*x2149);
evalcond[0]=((((-1.0)*r21*sj4*x2139))+(((-1.0)*r20*sj4*x2143))+x2147+(((-1.0)*r22*x2144))+((sj1*x2137)));
evalcond[1]=((((-1.0)*r02*x2144))+(((-1.0)*r00*sj4*x2143))+x2146+(((-1.0)*x2150))+(((-1.0)*r01*sj4*x2139)));
evalcond[2]=((((0.71)*cj1))+((r20*x2142))+(((-1.0)*sj1*x2148))+(((-0.15)*x2140))+(((-0.59)*x2147))+(((-1.0)*pz)));
evalcond[3]=(((cj1*x2148))+(((-0.15)*x2145))+(((-0.59)*x2146))+(((-1.0)*px))+(((0.71)*sj1))+((r00*x2142)));
evalcond[4]=(((sj3*x2140))+x2146+(((-1.0)*x2150))+((r22*x2138))+(((-1.0)*r20*x2141*x2143))+(((-1.0)*r21*x2139*x2141))+(((-1.0)*r20*sj3*x2139)));
evalcond[5]=(((sj3*x2145))+(((-1.0)*x2147))+((r02*x2138))+(((-1.0)*r00*sj3*x2139))+(((-1.0)*sj1*x2149))+(((-1.0)*r01*x2139*x2141))+(((-1.0)*r00*x2141*x2143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2151=((0.830985915492958)*sj4);
IkReal x2152=((0.211267605633803)*sj5);
IkReal x2153=((0.830985915492958)*cj4);
IkReal x2154=((0.211267605633803)*cj5);
if( IKabs(((((-1.0)*cj5*r01*x2151))+(((-1.0)*r01*x2152))+(((-1.0)*r02*x2153))+(((-1.40845070422535)*px))+((r00*x2154))+(((-1.0)*r00*sj5*x2151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x2151))+((cj5*r21*x2151))+(((1.40845070422535)*pz))+((r22*x2153))+((r21*x2152))+(((-1.0)*r20*x2154)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r01*x2151))+(((-1.0)*r01*x2152))+(((-1.0)*r02*x2153))+(((-1.40845070422535)*px))+((r00*x2154))+(((-1.0)*r00*sj5*x2151))))+IKsqr((((r20*sj5*x2151))+((cj5*r21*x2151))+(((1.40845070422535)*pz))+((r22*x2153))+((r21*x2152))+(((-1.0)*r20*x2154))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj5*r01*x2151))+(((-1.0)*r01*x2152))+(((-1.0)*r02*x2153))+(((-1.40845070422535)*px))+((r00*x2154))+(((-1.0)*r00*sj5*x2151))), (((r20*sj5*x2151))+((cj5*r21*x2151))+(((1.40845070422535)*pz))+((r22*x2153))+((r21*x2152))+(((-1.0)*r20*x2154))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2155=((1.0)*px);
IkReal x2156=(r00*sj5);
IkReal x2157=(r21*sj5);
IkReal x2158=((0.59)*sj4);
IkReal x2159=(cj5*r21);
IkReal x2160=(cj5*r01);
IkReal x2161=(r20*sj5);
IkReal x2162=(cj5*r00);
IkReal x2163=((0.59)*sj3);
IkReal x2164=(cj5*r20);
IkReal x2165=((0.59)*cj4);
IkReal x2166=(r01*sj5);
IkReal x2167=((0.15)*x2162);
IkReal x2168=((0.15)*x2166);
IkReal x2169=((0.71)*(IKsin(j1)));
IkReal x2170=((0.15)*x2164);
IkReal x2171=((0.71)*(IKcos(j1)));
IkReal x2172=((0.15)*x2157);
IkReal x2173=(cj3*x2165);
IkReal x2174=(x2170+x2171);
IkReal x2175=(x2169+x2168+x2155);
evalcond[0]=(((x2158*x2159))+x2172+pz+(((-1.0)*x2174))+((r22*x2165))+((x2158*x2161)));
evalcond[1]=(x2167+(((-1.0)*x2158*x2160))+(((-1.0)*x2175))+(((-1.0)*r02*x2165))+(((-1.0)*x2156*x2158)));
evalcond[2]=((((-1.0)*cj3*r22*x2158))+((x2161*x2173))+x2167+(((-1.0)*x2157*x2163))+((x2159*x2173))+(((-1.0)*x2175))+((x2163*x2164)));
evalcond[3]=((((-1.0)*x2156*x2173))+(((-1.0)*x2160*x2173))+x2174+(((-1.0)*pz))+((cj3*r02*x2158))+(((-1.0)*x2172))+((x2163*x2166))+(((-1.0)*x2162*x2163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2176=(cj4*r22);
IkReal x2177=(cj5*sj4);
IkReal x2178=((1.0)*sj1);
IkReal x2179=(cj4*r02);
IkReal x2180=(sj4*sj5);
if( IKabs(((((-1.0)*x2178*x2179))+((cj1*r20*x2180))+(((-1.0)*r01*x2177*x2178))+((cj1*x2176))+(((-1.0)*r00*x2178*x2180))+((cj1*r21*x2177)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2176))+((cj1*r00*x2180))+((cj1*r01*x2177))+((cj1*x2179))+((r20*sj1*x2180))+((r21*sj1*x2177)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2178*x2179))+((cj1*r20*x2180))+(((-1.0)*r01*x2177*x2178))+((cj1*x2176))+(((-1.0)*r00*x2178*x2180))+((cj1*r21*x2177))))+IKsqr((((sj1*x2176))+((cj1*r00*x2180))+((cj1*r01*x2177))+((cj1*x2179))+((r20*sj1*x2180))+((r21*sj1*x2177))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2178*x2179))+((cj1*r20*x2180))+(((-1.0)*r01*x2177*x2178))+((cj1*x2176))+(((-1.0)*r00*x2178*x2180))+((cj1*r21*x2177))), (((sj1*x2176))+((cj1*r00*x2180))+((cj1*r01*x2177))+((cj1*x2179))+((r20*sj1*x2180))+((r21*sj1*x2177))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2181=IKcos(j2);
IkReal x2182=IKsin(j2);
IkReal x2183=(cj3*sj4);
IkReal x2184=((1.0)*cj5);
IkReal x2185=(r21*sj5);
IkReal x2186=((0.59)*sj1);
IkReal x2187=(cj3*cj4);
IkReal x2188=((0.15)*cj5);
IkReal x2189=((1.0)*sj5);
IkReal x2190=((1.0)*cj4);
IkReal x2191=(r01*sj5);
IkReal x2192=(sj1*x2181);
IkReal x2193=(cj1*x2182);
IkReal x2194=(cj1*x2181);
IkReal x2195=(sj1*x2182);
IkReal x2196=(x2192+x2193);
evalcond[0]=(x2196+(((-1.0)*r21*sj4*x2184))+(((-1.0)*r22*x2190))+(((-1.0)*r20*sj4*x2189)));
evalcond[1]=((((-1.0)*x2195))+x2194+(((-1.0)*r01*sj4*x2184))+(((-1.0)*r00*sj4*x2189))+(((-1.0)*r02*x2190)));
evalcond[2]=((((0.71)*cj1))+(((-0.15)*x2185))+((r20*x2188))+(((-1.0)*pz))+(((-1.0)*x2181*x2186))+(((-0.59)*x2193)));
evalcond[3]=((((-0.15)*x2191))+((x2182*x2186))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.59)*x2194))+((r00*x2188)));
evalcond[4]=(((sj3*x2191))+x2196+((r02*x2183))+(((-1.0)*r00*sj3*x2184))+(((-1.0)*r01*x2184*x2187))+(((-1.0)*r00*x2187*x2189)));
evalcond[5]=(((r22*x2183))+(((-1.0)*r20*x2187*x2189))+(((-1.0)*x2194))+((sj3*x2185))+x2195+(((-1.0)*r20*sj3*x2184))+(((-1.0)*r21*x2184*x2187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2197=((0.211267605633803)*sj5);
IkReal x2198=((0.211267605633803)*cj5);
IkReal x2199=((0.830985915492958)*cj4);
IkReal x2200=((0.830985915492958)*sj4*sj5);
IkReal x2201=((0.830985915492958)*cj5*sj4);
if( IKabs(((((-1.0)*r10*x2200))+(((-1.0)*r11*x2201))+(((-1.40845070422535)*py))+(((-1.0)*r12*x2199))+(((-1.0)*r11*x2197))+((r10*x2198)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2199))+(((-1.0)*r20*x2198))+((r20*x2200))+((r21*x2197))+(((1.40845070422535)*pz))+((r21*x2201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x2200))+(((-1.0)*r11*x2201))+(((-1.40845070422535)*py))+(((-1.0)*r12*x2199))+(((-1.0)*r11*x2197))+((r10*x2198))))+IKsqr((((r22*x2199))+(((-1.0)*r20*x2198))+((r20*x2200))+((r21*x2197))+(((1.40845070422535)*pz))+((r21*x2201))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x2200))+(((-1.0)*r11*x2201))+(((-1.40845070422535)*py))+(((-1.0)*r12*x2199))+(((-1.0)*r11*x2197))+((r10*x2198))), (((r22*x2199))+(((-1.0)*r20*x2198))+((r20*x2200))+((r21*x2197))+(((1.40845070422535)*pz))+((r21*x2201))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2202=((1.0)*py);
IkReal x2203=((0.15)*sj5);
IkReal x2204=(cj5*r10);
IkReal x2205=((0.59)*sj4);
IkReal x2206=(cj5*r21);
IkReal x2207=((0.59)*sj3);
IkReal x2208=(cj5*r11);
IkReal x2209=(cj5*r20);
IkReal x2210=((0.59)*cj4);
IkReal x2211=((0.15)*x2204);
IkReal x2212=((0.71)*(IKsin(j1)));
IkReal x2213=(r11*x2203);
IkReal x2214=((0.15)*x2209);
IkReal x2215=((0.71)*(IKcos(j1)));
IkReal x2216=(r21*x2203);
IkReal x2217=(cj3*sj5*x2210);
IkReal x2218=(x2215+x2214);
IkReal x2219=(x2202+x2213+x2212);
evalcond[0]=(x2216+(((-1.0)*x2218))+((x2205*x2206))+pz+((r22*x2210))+((r20*sj5*x2205)));
evalcond[1]=(x2211+(((-1.0)*x2219))+(((-1.0)*x2205*x2208))+(((-1.0)*r12*x2210))+(((-1.0)*r10*sj5*x2205)));
evalcond[2]=(((cj3*x2206*x2210))+((r20*x2217))+x2211+(((-1.0)*x2219))+(((-1.0)*cj3*r22*x2205))+(((-1.0)*r21*sj5*x2207))+((x2207*x2209)));
evalcond[3]=((((-1.0)*x2204*x2207))+(((-1.0)*cj3*x2208*x2210))+x2218+(((-1.0)*x2216))+(((-1.0)*r10*x2217))+(((-1.0)*pz))+((cj3*r12*x2205))+((r11*sj5*x2207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2220=(cj5*sj4);
IkReal x2221=(cj1*cj4);
IkReal x2222=((1.0)*sj1);
IkReal x2223=(sj4*sj5);
if( IKabs((((cj1*r21*x2220))+((r22*x2221))+(((-1.0)*r11*x2220*x2222))+(((-1.0)*cj4*r12*x2222))+(((-1.0)*r10*x2222*x2223))+((cj1*r20*x2223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x2221))+((cj1*r10*x2223))+((cj4*r22*sj1))+((r21*sj1*x2220))+((r20*sj1*x2223))+((cj1*r11*x2220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x2220))+((r22*x2221))+(((-1.0)*r11*x2220*x2222))+(((-1.0)*cj4*r12*x2222))+(((-1.0)*r10*x2222*x2223))+((cj1*r20*x2223))))+IKsqr((((r12*x2221))+((cj1*r10*x2223))+((cj4*r22*sj1))+((r21*sj1*x2220))+((r20*sj1*x2223))+((cj1*r11*x2220))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x2220))+((r22*x2221))+(((-1.0)*r11*x2220*x2222))+(((-1.0)*cj4*r12*x2222))+(((-1.0)*r10*x2222*x2223))+((cj1*r20*x2223))), (((r12*x2221))+((cj1*r10*x2223))+((cj4*r22*sj1))+((r21*sj1*x2220))+((r20*sj1*x2223))+((cj1*r11*x2220))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2224=IKcos(j2);
IkReal x2225=IKsin(j2);
IkReal x2226=(r21*sj5);
IkReal x2227=((0.15)*cj5);
IkReal x2228=((0.59)*sj1);
IkReal x2229=(cj3*sj4);
IkReal x2230=(r11*sj5);
IkReal x2231=((1.0)*cj4);
IkReal x2232=(cj5*r21);
IkReal x2233=(cj3*sj5);
IkReal x2234=((1.0)*sj4);
IkReal x2235=(cj5*r11);
IkReal x2236=(sj1*x2224);
IkReal x2237=(cj1*x2225);
IkReal x2238=(cj1*x2224);
IkReal x2239=((1.0)*cj5*sj3);
IkReal x2240=(sj5*x2234);
IkReal x2241=(sj1*x2225);
IkReal x2242=(x2237+x2236);
evalcond[0]=(x2242+(((-1.0)*x2232*x2234))+(((-1.0)*r22*x2231))+(((-1.0)*r20*x2240)));
evalcond[1]=((((-1.0)*x2234*x2235))+x2238+(((-1.0)*x2241))+(((-1.0)*r10*x2240))+(((-1.0)*r12*x2231)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*x2224*x2228))+(((-1.0)*pz))+((r20*x2227))+(((-0.15)*x2226))+(((-0.59)*x2237)));
evalcond[3]=(((x2225*x2228))+((r10*x2227))+(((-0.71)*sj1))+(((-1.0)*py))+(((-0.15)*x2230))+(((-0.59)*x2238)));
evalcond[4]=((((-1.0)*r10*x2239))+((r12*x2229))+x2242+(((-1.0)*cj3*x2231*x2235))+((sj3*x2230))+(((-1.0)*r10*x2231*x2233)));
evalcond[5]=((((-1.0)*r20*x2239))+((r22*x2229))+x2241+(((-1.0)*cj3*x2231*x2232))+((sj3*x2226))+(((-1.0)*x2238))+(((-1.0)*r20*x2231*x2233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2243=((0.211267605633803)*sj5);
IkReal x2244=((0.211267605633803)*cj5);
IkReal x2245=((0.830985915492958)*cj4);
IkReal x2246=((0.830985915492958)*sj4*sj5);
IkReal x2247=((0.830985915492958)*cj5*sj4);
if( IKabs((((r10*x2246))+((r11*x2243))+((r11*x2247))+(((-1.0)*r10*x2244))+(((1.40845070422535)*py))+((r12*x2245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x2246))+((r21*x2247))+((r21*x2243))+(((1.40845070422535)*pz))+(((-1.0)*r20*x2244))+((r22*x2245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x2246))+((r11*x2243))+((r11*x2247))+(((-1.0)*r10*x2244))+(((1.40845070422535)*py))+((r12*x2245))))+IKsqr((((r20*x2246))+((r21*x2247))+((r21*x2243))+(((1.40845070422535)*pz))+(((-1.0)*r20*x2244))+((r22*x2245))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x2246))+((r11*x2243))+((r11*x2247))+(((-1.0)*r10*x2244))+(((1.40845070422535)*py))+((r12*x2245))), (((r20*x2246))+((r21*x2247))+((r21*x2243))+(((1.40845070422535)*pz))+(((-1.0)*r20*x2244))+((r22*x2245))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2248=((0.15)*sj5);
IkReal x2249=(cj5*r10);
IkReal x2250=((0.59)*sj4);
IkReal x2251=(cj5*r21);
IkReal x2252=((0.59)*sj3);
IkReal x2253=(cj5*r11);
IkReal x2254=(cj5*r20);
IkReal x2255=((0.59)*cj4);
IkReal x2256=(r21*x2248);
IkReal x2257=((0.15)*x2254);
IkReal x2258=((0.71)*(IKcos(j1)));
IkReal x2259=((0.71)*(IKsin(j1)));
IkReal x2260=((0.15)*x2249);
IkReal x2261=(r11*x2248);
IkReal x2262=(x2256+pz);
IkReal x2263=(cj3*sj5*x2255);
IkReal x2264=(x2260+x2259);
IkReal x2265=(x2258+x2257);
evalcond[0]=(x2261+((r12*x2255))+((r10*sj5*x2250))+py+(((-1.0)*x2264))+((x2250*x2253)));
evalcond[1]=(x2262+((r20*sj5*x2250))+((r22*x2255))+(((-1.0)*x2265))+((x2250*x2251)));
evalcond[2]=((((-1.0)*x2249*x2252))+((r11*sj5*x2252))+x2262+((cj3*r12*x2250))+(((-1.0)*cj3*x2253*x2255))+(((-1.0)*r10*x2263))+(((-1.0)*x2265)));
evalcond[3]=((((-1.0)*cj3*x2251*x2255))+x2264+(((-1.0)*r20*x2263))+(((-1.0)*x2252*x2254))+(((-1.0)*py))+(((-1.0)*x2261))+((r21*sj5*x2252))+((cj3*r22*x2250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2266=(cj4*r12);
IkReal x2267=((1.0)*cj1);
IkReal x2268=(cj4*r22);
IkReal x2269=(cj5*sj4);
IkReal x2270=(sj4*sj5);
if( IKabs((((sj1*x2266))+((cj1*x2268))+((r11*sj1*x2269))+((r10*sj1*x2270))+((cj1*r20*x2270))+((cj1*r21*x2269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2268))+((r21*sj1*x2269))+(((-1.0)*r11*x2267*x2269))+(((-1.0)*r10*x2267*x2270))+((r20*sj1*x2270))+(((-1.0)*x2266*x2267)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2266))+((cj1*x2268))+((r11*sj1*x2269))+((r10*sj1*x2270))+((cj1*r20*x2270))+((cj1*r21*x2269))))+IKsqr((((sj1*x2268))+((r21*sj1*x2269))+(((-1.0)*r11*x2267*x2269))+(((-1.0)*r10*x2267*x2270))+((r20*sj1*x2270))+(((-1.0)*x2266*x2267))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2266))+((cj1*x2268))+((r11*sj1*x2269))+((r10*sj1*x2270))+((cj1*r20*x2270))+((cj1*r21*x2269))), (((sj1*x2268))+((r21*sj1*x2269))+(((-1.0)*r11*x2267*x2269))+(((-1.0)*r10*x2267*x2270))+((r20*sj1*x2270))+(((-1.0)*x2266*x2267))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2271=IKsin(j2);
IkReal x2272=IKcos(j2);
IkReal x2273=(r21*sj5);
IkReal x2274=((0.15)*cj5);
IkReal x2275=((1.0)*cj4);
IkReal x2276=(cj5*r21);
IkReal x2277=(r11*sj5);
IkReal x2278=(cj3*sj5);
IkReal x2279=(cj3*sj4);
IkReal x2280=((1.0)*sj4);
IkReal x2281=(cj5*r11);
IkReal x2282=(sj1*x2271);
IkReal x2283=(cj1*x2271);
IkReal x2284=((1.0)*cj5*sj3);
IkReal x2285=((0.59)*x2272);
IkReal x2286=((1.0)*x2272);
IkReal x2287=(sj5*x2280);
IkReal x2288=(cj1*x2286);
evalcond[0]=((((-1.0)*x2276*x2280))+x2283+((sj1*x2272))+(((-1.0)*r22*x2275))+(((-1.0)*r20*x2287)));
evalcond[1]=((((-1.0)*x2280*x2281))+x2282+(((-1.0)*x2288))+(((-1.0)*r10*x2287))+(((-1.0)*r12*x2275)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*sj1*x2285))+(((-1.0)*pz))+(((-0.15)*x2273))+(((-0.59)*x2283))+((r20*x2274)));
evalcond[3]=((((-1.0)*py))+(((-0.15)*x2277))+((r10*x2274))+(((-0.59)*x2282))+((cj1*x2285))+(((0.71)*sj1)));
evalcond[4]=(x2282+(((-1.0)*x2288))+(((-1.0)*cj3*x2275*x2276))+(((-1.0)*r20*x2275*x2278))+((r22*x2279))+((sj3*x2273))+(((-1.0)*r20*x2284)));
evalcond[5]=((((-1.0)*cj3*x2275*x2281))+(((-1.0)*sj1*x2286))+(((-1.0)*r10*x2275*x2278))+(((-1.0)*r10*x2284))+(((-1.0)*x2283))+((r12*x2279))+((sj3*x2277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2289=((0.15)*cj0);
IkReal x2290=(sj4*sj5);
IkReal x2291=((0.59)*cj0);
IkReal x2292=(cj5*sj4);
CheckValue<IkReal> x2293=IKPowWithIntegerCheck(cj0,-2);
if(!x2293.valid){
continue;
}
if( IKabs(((1.40845070422535)*(x2293.value)*((((cj5*r10*x2289))+(((-1.0)*r10*x2290*x2291))+(((-0.05)*cj0*sj0))+(((-1.0)*r11*sj5*x2289))+(((-1.0)*r11*x2291*x2292))+(((-1.0)*cj4*r12*x2291))+(((-1.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*r20*x2290))+(((0.830985915492958)*cj4*r22))+(((0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.830985915492958)*r21*x2292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.40845070422535)*(x2293.value)*((((cj5*r10*x2289))+(((-1.0)*r10*x2290*x2291))+(((-0.05)*cj0*sj0))+(((-1.0)*r11*sj5*x2289))+(((-1.0)*r11*x2291*x2292))+(((-1.0)*cj4*r12*x2291))+(((-1.0)*cj0*py))))))+IKsqr(((((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*r20*x2290))+(((0.830985915492958)*cj4*r22))+(((0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.830985915492958)*r21*x2292))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.40845070422535)*(x2293.value)*((((cj5*r10*x2289))+(((-1.0)*r10*x2290*x2291))+(((-0.05)*cj0*sj0))+(((-1.0)*r11*sj5*x2289))+(((-1.0)*r11*x2291*x2292))+(((-1.0)*cj4*r12*x2291))+(((-1.0)*cj0*py))))), ((((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*r20*x2290))+(((0.830985915492958)*cj4*r22))+(((0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))+(((0.830985915492958)*r21*x2292))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2294=IKsin(j1);
IkReal x2295=IKcos(j1);
IkReal x2296=sj0*sj0;
IkReal x2297=cj0*cj0;
IkReal x2298=(r21*sj0);
IkReal x2299=((0.15)*sj5);
IkReal x2300=(cj0*r21);
IkReal x2301=(cj5*sj0);
IkReal x2302=((0.15)*r20);
IkReal x2303=((1.0)*py);
IkReal x2304=((0.59)*sj4);
IkReal x2305=(cj0*r11);
IkReal x2306=((0.59)*sj5);
IkReal x2307=(cj3*cj4);
IkReal x2308=(cj5*r10);
IkReal x2309=(sj0*sj5);
IkReal x2310=((0.15)*r00);
IkReal x2311=((0.59)*sj3);
IkReal x2312=(cj0*r01);
IkReal x2313=(cj0*sj5);
IkReal x2314=(cj3*r22);
IkReal x2315=((1.0)*px);
IkReal x2316=(cj0*r20);
IkReal x2317=((0.05)*cj0);
IkReal x2318=(cj0*cj5);
IkReal x2319=(sj0*x2317);
IkReal x2320=((0.59)*cj0*cj4);
IkReal x2321=((0.71)*x2295);
IkReal x2322=((0.59)*cj4*sj0);
IkReal x2323=((0.71)*x2294);
IkReal x2324=((0.59)*cj5*x2307);
IkReal x2325=(cj0*x2323);
IkReal x2326=(sj0*x2325);
evalcond[0]=((((0.59)*cj4*r22))+((r21*x2299))+((cj5*r21*x2304))+pz+(((-1.0)*cj5*x2302))+((r20*sj5*x2304))+(((-1.0)*x2321)));
evalcond[1]=((((-1.0)*cj5*x2304*x2305))+(((-1.0)*r10*x2304*x2313))+(((-1.0)*x2297*x2323))+(((-1.0)*cj0*x2303))+(((-1.0)*r12*x2320))+(((-1.0)*x2299*x2305))+(((-1.0)*x2319))+(((0.15)*cj0*x2308)));
evalcond[2]=(((r02*x2322))+((r00*x2304*x2309))+x2319+((r01*sj0*x2299))+((px*sj0))+((r01*x2301*x2304))+(((-1.0)*x2296*x2323))+(((-1.0)*x2301*x2310)));
evalcond[3]=(((cj3*r02*x2304))+(((-1.0)*x2301*x2302))+(((-1.0)*sj0*x2321))+(((-1.0)*cj5*r00*x2311))+(((-1.0)*r01*x2324))+((x2298*x2299))+((pz*sj0))+(((-1.0)*r00*x2306*x2307))+((r01*sj3*x2306)));
evalcond[4]=(((cj0*x2321))+(((-1.0)*r10*x2306*x2307))+((r11*sj3*x2306))+((cj3*r12*x2304))+((x2302*x2318))+(((-1.0)*x2308*x2311))+(((-1.0)*x2299*x2300))+(((-1.0)*r11*x2324))+(((-1.0)*cj0*pz)));
evalcond[5]=(((x2300*x2324))+(((-1.0)*sj3*x2300*x2306))+(((-0.05)*sj0))+(((-1.0)*x2303))+(((0.15)*x2308))+(((-1.0)*r11*x2299))+((cj5*x2311*x2316))+(((-1.0)*cj0*x2304*x2314))+((x2306*x2307*x2316))+(((-1.0)*x2325)));
evalcond[6]=((((-1.0)*r20*x2301*x2311))+(((-1.0)*x2298*x2324))+((sj3*x2298*x2306))+(((-1.0)*r01*x2299))+(((-1.0)*r20*sj0*x2306*x2307))+((sj0*x2323))+((cj5*x2310))+((sj0*x2304*x2314))+(((-1.0)*x2315))+(((-1.0)*x2317)));
evalcond[7]=((((-1.0)*cj5*x2304*x2312))+x2326+((r11*sj0*x2299))+(((-1.0)*r00*x2304*x2313))+(((-0.15)*r10*x2301))+(((-1.0)*r02*x2320))+((py*sj0))+(((0.05)*x2296)));
evalcond[8]=(((r11*x2301*x2304))+(((-1.0)*x2299*x2312))+(((-0.05)*x2297))+(((-1.0)*cj0*x2315))+x2326+((r12*x2322))+((x2310*x2318))+((r10*x2304*x2309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2327=(cj4*sj1);
IkReal x2328=(cj1*cj4);
IkReal x2329=(cj5*sj4);
IkReal x2330=((1.0)*cj1);
IkReal x2331=(sj4*sj5);
IkReal x2332=(sj1*x2331);
if( IKabs((((r02*x2327))+((r22*x2328))+((r00*x2332))+((cj1*r20*x2331))+((r01*sj1*x2329))+((cj1*r21*x2329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x2329))+((r22*x2327))+(((-1.0)*r00*x2330*x2331))+(((-1.0)*r01*x2329*x2330))+((r20*x2332))+(((-1.0)*r02*x2328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x2327))+((r22*x2328))+((r00*x2332))+((cj1*r20*x2331))+((r01*sj1*x2329))+((cj1*r21*x2329))))+IKsqr((((r21*sj1*x2329))+((r22*x2327))+(((-1.0)*r00*x2330*x2331))+(((-1.0)*r01*x2329*x2330))+((r20*x2332))+(((-1.0)*r02*x2328))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x2327))+((r22*x2328))+((r00*x2332))+((cj1*r20*x2331))+((r01*sj1*x2329))+((cj1*r21*x2329))), (((r21*sj1*x2329))+((r22*x2327))+(((-1.0)*r00*x2330*x2331))+(((-1.0)*r01*x2329*x2330))+((r20*x2332))+(((-1.0)*r02*x2328))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2333=IKsin(j2);
IkReal x2334=IKcos(j2);
IkReal x2335=(cj3*sj4);
IkReal x2336=((1.0)*cj5);
IkReal x2337=(r21*sj5);
IkReal x2338=(cj3*cj4);
IkReal x2339=((0.15)*cj5);
IkReal x2340=((1.0)*sj5);
IkReal x2341=((1.0)*cj4);
IkReal x2342=(r01*sj5);
IkReal x2343=(sj1*x2333);
IkReal x2344=(cj1*x2333);
IkReal x2345=((0.59)*x2334);
IkReal x2346=((1.0)*x2334);
IkReal x2347=(cj1*x2346);
evalcond[0]=(x2344+((sj1*x2334))+(((-1.0)*r22*x2341))+(((-1.0)*r20*sj4*x2340))+(((-1.0)*r21*sj4*x2336)));
evalcond[1]=(x2343+(((-1.0)*r00*sj4*x2340))+(((-1.0)*r02*x2341))+(((-1.0)*r01*sj4*x2336))+(((-1.0)*x2347)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*sj1*x2345))+(((-0.59)*x2344))+(((-1.0)*pz))+((r20*x2339))+(((-0.15)*x2337)));
evalcond[3]=((((-0.15)*x2342))+(((-0.59)*x2343))+(((-1.0)*px))+((r00*x2339))+((cj1*x2345))+(((0.71)*sj1)));
evalcond[4]=((((-1.0)*r20*sj3*x2336))+((sj3*x2337))+x2343+(((-1.0)*r21*x2336*x2338))+((r22*x2335))+(((-1.0)*r20*x2338*x2340))+(((-1.0)*x2347)));
evalcond[5]=(((r02*x2335))+(((-1.0)*r00*sj3*x2336))+(((-1.0)*x2344))+(((-1.0)*sj1*x2346))+(((-1.0)*r01*x2336*x2338))+((sj3*x2342))+(((-1.0)*r00*x2338*x2340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2348=(cj4*r22);
IkReal x2349=(cj5*sj4);
IkReal x2350=((1.0)*sj1);
IkReal x2351=(cj4*r02);
IkReal x2352=(sj4*sj5);
if( IKabs((((cj1*r21*x2349))+((cj1*r20*x2352))+(((-1.0)*r01*x2349*x2350))+((cj1*x2348))+(((-1.0)*x2350*x2351))+(((-1.0)*r00*x2350*x2352)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2348))+((r20*sj1*x2352))+((r21*sj1*x2349))+((cj1*x2351))+((cj1*r01*x2349))+((cj1*r00*x2352)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x2349))+((cj1*r20*x2352))+(((-1.0)*r01*x2349*x2350))+((cj1*x2348))+(((-1.0)*x2350*x2351))+(((-1.0)*r00*x2350*x2352))))+IKsqr((((sj1*x2348))+((r20*sj1*x2352))+((r21*sj1*x2349))+((cj1*x2351))+((cj1*r01*x2349))+((cj1*r00*x2352))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x2349))+((cj1*r20*x2352))+(((-1.0)*r01*x2349*x2350))+((cj1*x2348))+(((-1.0)*x2350*x2351))+(((-1.0)*r00*x2350*x2352))), (((sj1*x2348))+((r20*sj1*x2352))+((r21*sj1*x2349))+((cj1*x2351))+((cj1*r01*x2349))+((cj1*r00*x2352))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2353=IKcos(j2);
IkReal x2354=IKsin(j2);
IkReal x2355=(cj3*sj4);
IkReal x2356=((1.0)*cj5);
IkReal x2357=(r21*sj5);
IkReal x2358=((0.59)*sj1);
IkReal x2359=(cj3*cj4);
IkReal x2360=((0.15)*cj5);
IkReal x2361=((1.0)*sj5);
IkReal x2362=((1.0)*cj4);
IkReal x2363=(r01*sj5);
IkReal x2364=(sj1*x2353);
IkReal x2365=(cj1*x2354);
IkReal x2366=(cj1*x2353);
IkReal x2367=(sj1*x2354);
IkReal x2368=(x2365+x2364);
evalcond[0]=(x2368+(((-1.0)*r21*sj4*x2356))+(((-1.0)*r22*x2362))+(((-1.0)*r20*sj4*x2361)));
evalcond[1]=(x2366+(((-1.0)*x2367))+(((-1.0)*r01*sj4*x2356))+(((-1.0)*r00*sj4*x2361))+(((-1.0)*r02*x2362)));
evalcond[2]=(((r20*x2360))+(((0.71)*cj1))+(((-0.15)*x2357))+(((-0.59)*x2365))+(((-1.0)*pz))+(((-1.0)*x2353*x2358)));
evalcond[3]=(((x2354*x2358))+(((-0.59)*x2366))+(((-0.71)*sj1))+(((-1.0)*px))+(((-0.15)*x2363))+((r00*x2360)));
evalcond[4]=((((-1.0)*r00*x2359*x2361))+x2368+((sj3*x2363))+(((-1.0)*r01*x2356*x2359))+(((-1.0)*r00*sj3*x2356))+((r02*x2355)));
evalcond[5]=((((-1.0)*r20*sj3*x2356))+(((-1.0)*r21*x2356*x2359))+x2367+((r22*x2355))+(((-1.0)*x2366))+(((-1.0)*r20*x2359*x2361))+((sj3*x2357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2369=(cj5*sj4);
IkReal x2370=(cj1*cj4);
IkReal x2371=((1.0)*sj1);
IkReal x2372=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r12*x2371))+((cj1*r20*x2372))+((cj1*r21*x2369))+((r22*x2370))+(((-1.0)*r11*x2369*x2371))+(((-1.0)*r10*x2371*x2372)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r11*x2369))+((r12*x2370))+((cj4*r22*sj1))+((cj1*r10*x2372))+((r21*sj1*x2369))+((r20*sj1*x2372)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r12*x2371))+((cj1*r20*x2372))+((cj1*r21*x2369))+((r22*x2370))+(((-1.0)*r11*x2369*x2371))+(((-1.0)*r10*x2371*x2372))))+IKsqr((((cj1*r11*x2369))+((r12*x2370))+((cj4*r22*sj1))+((cj1*r10*x2372))+((r21*sj1*x2369))+((r20*sj1*x2372))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r12*x2371))+((cj1*r20*x2372))+((cj1*r21*x2369))+((r22*x2370))+(((-1.0)*r11*x2369*x2371))+(((-1.0)*r10*x2371*x2372))), (((cj1*r11*x2369))+((r12*x2370))+((cj4*r22*sj1))+((cj1*r10*x2372))+((r21*sj1*x2369))+((r20*sj1*x2372))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2373=IKcos(j2);
IkReal x2374=IKsin(j2);
IkReal x2375=(r21*sj5);
IkReal x2376=((0.15)*cj5);
IkReal x2377=((0.59)*sj1);
IkReal x2378=(cj3*sj4);
IkReal x2379=(r11*sj5);
IkReal x2380=((1.0)*cj4);
IkReal x2381=(cj5*r21);
IkReal x2382=(cj3*sj5);
IkReal x2383=((1.0)*sj4);
IkReal x2384=(cj5*r11);
IkReal x2385=(sj1*x2373);
IkReal x2386=(cj1*x2374);
IkReal x2387=(cj1*x2373);
IkReal x2388=((1.0)*cj5*sj3);
IkReal x2389=(sj5*x2383);
IkReal x2390=(sj1*x2374);
IkReal x2391=(x2385+x2386);
evalcond[0]=((((-1.0)*x2381*x2383))+x2391+(((-1.0)*r20*x2389))+(((-1.0)*r22*x2380)));
evalcond[1]=((((-1.0)*r12*x2380))+(((-1.0)*r10*x2389))+x2387+(((-1.0)*x2390))+(((-1.0)*x2383*x2384)));
evalcond[2]=((((0.71)*cj1))+((r20*x2376))+(((-1.0)*pz))+(((-0.59)*x2386))+(((-1.0)*x2373*x2377))+(((-0.15)*x2375)));
evalcond[3]=(((r10*x2376))+(((-0.71)*sj1))+(((-1.0)*py))+(((-0.59)*x2387))+((x2374*x2377))+(((-0.15)*x2379)));
evalcond[4]=((((-1.0)*r10*x2388))+((r12*x2378))+x2391+((sj3*x2379))+(((-1.0)*cj3*x2380*x2384))+(((-1.0)*r10*x2380*x2382)));
evalcond[5]=(x2390+((sj3*x2375))+(((-1.0)*r20*x2388))+((r22*x2378))+(((-1.0)*x2387))+(((-1.0)*cj3*x2380*x2381))+(((-1.0)*r20*x2380*x2382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2392=(cj4*r12);
IkReal x2393=((1.0)*cj1);
IkReal x2394=(cj4*r22);
IkReal x2395=(cj5*sj4);
IkReal x2396=(sj4*sj5);
if( IKabs((((cj1*r21*x2395))+((r10*sj1*x2396))+((r11*sj1*x2395))+((cj1*x2394))+((sj1*x2392))+((cj1*r20*x2396)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2393*x2395))+((r20*sj1*x2396))+(((-1.0)*r10*x2393*x2396))+((r21*sj1*x2395))+(((-1.0)*x2392*x2393))+((sj1*x2394)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x2395))+((r10*sj1*x2396))+((r11*sj1*x2395))+((cj1*x2394))+((sj1*x2392))+((cj1*r20*x2396))))+IKsqr(((((-1.0)*r11*x2393*x2395))+((r20*sj1*x2396))+(((-1.0)*r10*x2393*x2396))+((r21*sj1*x2395))+(((-1.0)*x2392*x2393))+((sj1*x2394))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x2395))+((r10*sj1*x2396))+((r11*sj1*x2395))+((cj1*x2394))+((sj1*x2392))+((cj1*r20*x2396))), ((((-1.0)*r11*x2393*x2395))+((r20*sj1*x2396))+(((-1.0)*r10*x2393*x2396))+((r21*sj1*x2395))+(((-1.0)*x2392*x2393))+((sj1*x2394))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2397=IKsin(j2);
IkReal x2398=IKcos(j2);
IkReal x2399=(r21*sj5);
IkReal x2400=((0.15)*cj5);
IkReal x2401=((1.0)*cj4);
IkReal x2402=(cj5*r21);
IkReal x2403=(r11*sj5);
IkReal x2404=(cj3*sj5);
IkReal x2405=(cj3*sj4);
IkReal x2406=((1.0)*sj4);
IkReal x2407=(cj5*r11);
IkReal x2408=(sj1*x2397);
IkReal x2409=(cj1*x2397);
IkReal x2410=((1.0)*cj5*sj3);
IkReal x2411=((0.59)*x2398);
IkReal x2412=((1.0)*x2398);
IkReal x2413=(sj5*x2406);
IkReal x2414=(cj1*x2412);
evalcond[0]=((((-1.0)*r20*x2413))+x2409+(((-1.0)*x2402*x2406))+((sj1*x2398))+(((-1.0)*r22*x2401)));
evalcond[1]=(x2408+(((-1.0)*r10*x2413))+(((-1.0)*x2406*x2407))+(((-1.0)*x2414))+(((-1.0)*r12*x2401)));
evalcond[2]=((((0.71)*cj1))+((r20*x2400))+(((-0.59)*x2409))+(((-1.0)*pz))+(((-0.15)*x2399))+(((-1.0)*sj1*x2411)));
evalcond[3]=(((r10*x2400))+(((-0.15)*x2403))+(((-0.59)*x2408))+(((-1.0)*py))+(((0.71)*sj1))+((cj1*x2411)));
evalcond[4]=((((-1.0)*r20*x2410))+x2408+(((-1.0)*cj3*x2401*x2402))+(((-1.0)*r20*x2401*x2404))+((sj3*x2399))+(((-1.0)*x2414))+((r22*x2405)));
evalcond[5]=((((-1.0)*x2409))+(((-1.0)*cj3*x2401*x2407))+((r12*x2405))+((sj3*x2403))+(((-1.0)*r10*x2410))+(((-1.0)*r10*x2401*x2404))+(((-1.0)*sj1*x2412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2415=(cj4*r12);
IkReal x2416=((1.0)*sj1);
IkReal x2417=(cj0*cj1);
IkReal x2418=(cj4*r22);
IkReal x2419=(cj0*sj1);
IkReal x2420=(sj4*sj5);
IkReal x2421=(cj5*r11*sj4);
IkReal x2422=(cj5*r21*sj4);
CheckValue<IkReal> x2423=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2423.valid){
continue;
}
CheckValue<IkReal> x2424 = IKatan2WithCheck(IkReal((((r20*x2417*x2420))+((x2417*x2422))+(((-1.0)*x2415*x2416))+((x2417*x2418))+(((-1.0)*x2416*x2421))+(((-1.0)*r10*x2416*x2420)))),IkReal((((cj1*x2421))+((x2418*x2419))+((r20*x2419*x2420))+((x2419*x2422))+((cj1*x2415))+((cj1*r10*x2420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2424.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2423.value)))+(x2424.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2425=IKsin(j2);
IkReal x2426=IKcos(j2);
IkReal x2427=(cj3*sj4);
IkReal x2428=(r21*sj5);
IkReal x2429=(sj0*sj1);
IkReal x2430=((1.0)*cj1);
IkReal x2431=((0.15)*cj5);
IkReal x2432=(cj0*sj1);
IkReal x2433=((1.0)*cj4);
IkReal x2434=(r11*sj5);
IkReal x2435=(cj3*sj5);
IkReal x2436=((0.59)*cj1);
IkReal x2437=(r01*sj5);
IkReal x2438=((0.59)*x2425);
IkReal x2439=((1.0)*cj5*sj3);
IkReal x2440=(sj1*x2426);
IkReal x2441=(cj1*x2425);
IkReal x2442=((1.0)*sj4*sj5);
IkReal x2443=(sj0*x2426);
IkReal x2444=((1.0)*cj5*sj4);
IkReal x2445=(cj0*x2426);
IkReal x2446=(cj3*cj5*x2433);
evalcond[0]=((((-1.0)*r22*x2433))+x2440+x2441+(((-1.0)*r20*x2442))+(((-1.0)*r21*x2444)));
evalcond[1]=((((-1.0)*x2425*x2436))+(((0.71)*cj1))+(((-0.59)*x2440))+((r20*x2431))+(((-1.0)*pz))+(((-0.15)*x2428)));
evalcond[2]=((((-1.0)*x2430*x2443))+(((-1.0)*r02*x2433))+((x2425*x2429))+(((-1.0)*r00*x2442))+(((-1.0)*r01*x2444)));
evalcond[3]=(((cj1*x2445))+(((-1.0)*r10*x2442))+(((-1.0)*r11*x2444))+(((-1.0)*x2425*x2432))+(((-1.0)*r12*x2433)));
evalcond[4]=(((r00*x2431))+(((0.71)*x2429))+(((-0.15)*x2437))+(((-1.0)*px))+(((-1.0)*x2429*x2438))+(((-0.05)*cj0))+((x2436*x2443)));
evalcond[5]=((((-0.71)*x2432))+(((-0.05)*sj0))+(((-1.0)*x2436*x2445))+((x2432*x2438))+(((-0.15)*x2434))+(((-1.0)*py))+((r10*x2431)));
evalcond[6]=(((r22*x2427))+(((-1.0)*r21*x2446))+(((-1.0)*x2426*x2430))+((sj1*x2425))+(((-1.0)*r20*x2439))+(((-1.0)*r20*x2433*x2435))+((sj3*x2428)));
evalcond[7]=(((sj3*x2434))+(((-1.0)*r11*x2446))+((cj0*x2441))+((x2426*x2432))+(((-1.0)*r10*x2433*x2435))+((r12*x2427))+(((-1.0)*r10*x2439)));
evalcond[8]=((((-1.0)*r00*x2439))+((sj3*x2437))+(((-1.0)*r00*x2433*x2435))+(((-1.0)*x2426*x2429))+(((-1.0)*r01*x2446))+((r02*x2427))+(((-1.0)*sj0*x2425*x2430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2447=(sj1*sj4);
IkReal x2448=(cj5*r01);
IkReal x2449=(cj1*sj4);
IkReal x2450=(cj4*sj1);
IkReal x2451=(r22*sj0);
IkReal x2452=(r00*sj5);
IkReal x2453=(cj1*cj4);
IkReal x2454=(r20*sj0*sj5);
IkReal x2455=(cj5*r21*sj0);
CheckValue<IkReal> x2456 = IKatan2WithCheck(IkReal((((r02*x2450))+((x2447*x2448))+((x2447*x2452))+((x2449*x2455))+((x2449*x2454))+((x2451*x2453)))),IkReal((((x2447*x2455))+((x2447*x2454))+((x2450*x2451))+(((-1.0)*r02*x2453))+(((-1.0)*x2448*x2449))+(((-1.0)*x2449*x2452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2456.valid){
continue;
}
CheckValue<IkReal> x2457=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2457.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2456.value)+(((1.5707963267949)*(x2457.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2458=IKsin(j2);
IkReal x2459=IKcos(j2);
IkReal x2460=(cj3*sj4);
IkReal x2461=(r21*sj5);
IkReal x2462=(sj0*sj1);
IkReal x2463=((1.0)*cj1);
IkReal x2464=((0.15)*cj5);
IkReal x2465=(cj0*sj1);
IkReal x2466=((1.0)*cj4);
IkReal x2467=(r11*sj5);
IkReal x2468=(cj3*sj5);
IkReal x2469=((0.59)*cj1);
IkReal x2470=(r01*sj5);
IkReal x2471=((0.59)*x2458);
IkReal x2472=((1.0)*cj5*sj3);
IkReal x2473=(sj1*x2459);
IkReal x2474=(cj1*x2458);
IkReal x2475=((1.0)*sj4*sj5);
IkReal x2476=(sj0*x2459);
IkReal x2477=((1.0)*cj5*sj4);
IkReal x2478=(cj0*x2459);
IkReal x2479=(cj3*cj5*x2466);
evalcond[0]=((((-1.0)*r22*x2466))+(((-1.0)*r21*x2477))+x2474+x2473+(((-1.0)*r20*x2475)));
evalcond[1]=((((0.71)*cj1))+((r20*x2464))+(((-1.0)*pz))+(((-0.59)*x2473))+(((-1.0)*x2458*x2469))+(((-0.15)*x2461)));
evalcond[2]=(((x2458*x2462))+(((-1.0)*r01*x2477))+(((-1.0)*r00*x2475))+(((-1.0)*x2463*x2476))+(((-1.0)*r02*x2466)));
evalcond[3]=((((-1.0)*r11*x2477))+(((-1.0)*x2458*x2465))+(((-1.0)*r12*x2466))+(((-1.0)*r10*x2475))+((cj1*x2478)));
evalcond[4]=((((-0.15)*x2470))+(((0.71)*x2462))+(((-1.0)*px))+(((-0.05)*cj0))+(((-1.0)*x2462*x2471))+((x2469*x2476))+((r00*x2464)));
evalcond[5]=((((-0.05)*sj0))+(((-0.71)*x2465))+(((-1.0)*py))+(((-1.0)*x2469*x2478))+((x2465*x2471))+((r10*x2464))+(((-0.15)*x2467)));
evalcond[6]=((((-1.0)*r21*x2479))+(((-1.0)*r20*x2472))+((sj1*x2458))+((sj3*x2461))+((r22*x2460))+(((-1.0)*r20*x2466*x2468))+(((-1.0)*x2459*x2463)));
evalcond[7]=((((-1.0)*r10*x2466*x2468))+((x2459*x2465))+(((-1.0)*r11*x2479))+((r12*x2460))+((sj3*x2467))+(((-1.0)*r10*x2472))+((cj0*x2474)));
evalcond[8]=((((-1.0)*r01*x2479))+(((-1.0)*x2459*x2462))+(((-1.0)*r00*x2472))+((r02*x2460))+(((-1.0)*r00*x2466*x2468))+((sj3*x2470))+(((-1.0)*sj0*x2458*x2463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2480=((0.15)*sj0);
IkReal x2481=((0.830985915492958)*sj4);
IkReal x2482=((0.59)*sj0*sj4);
CheckValue<IkReal> x2483=IKPowWithIntegerCheck(sj0,-2);
if(!x2483.valid){
continue;
}
if( IKabs(((1.40845070422535)*(x2483.value)*((((r01*sj5*x2480))+(((0.05)*cj0*sj0))+(((-1.0)*cj5*r00*x2480))+(((0.59)*cj4*r02*sj0))+((px*sj0))+((cj5*r01*x2482))+((r00*sj5*x2482)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x2481))+(((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*cj4*r22))+((cj5*r21*x2481))+(((0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.40845070422535)*(x2483.value)*((((r01*sj5*x2480))+(((0.05)*cj0*sj0))+(((-1.0)*cj5*r00*x2480))+(((0.59)*cj4*r02*sj0))+((px*sj0))+((cj5*r01*x2482))+((r00*sj5*x2482))))))+IKsqr((((r20*sj5*x2481))+(((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*cj4*r22))+((cj5*r21*x2481))+(((0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1.40845070422535)*(x2483.value)*((((r01*sj5*x2480))+(((0.05)*cj0*sj0))+(((-1.0)*cj5*r00*x2480))+(((0.59)*cj4*r02*sj0))+((px*sj0))+((cj5*r01*x2482))+((r00*sj5*x2482))))), (((r20*sj5*x2481))+(((-0.211267605633803)*cj5*r20))+(((0.830985915492958)*cj4*r22))+((cj5*r21*x2481))+(((0.211267605633803)*r21*sj5))+(((1.40845070422535)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2484=IKsin(j1);
IkReal x2485=IKcos(j1);
IkReal x2486=sj0*sj0;
IkReal x2487=cj0*cj0;
IkReal x2488=(r21*sj0);
IkReal x2489=((0.15)*sj5);
IkReal x2490=(cj0*r21);
IkReal x2491=(cj5*sj0);
IkReal x2492=((0.15)*r20);
IkReal x2493=((1.0)*py);
IkReal x2494=((0.59)*sj4);
IkReal x2495=(cj0*r11);
IkReal x2496=((0.59)*sj5);
IkReal x2497=(cj3*cj4);
IkReal x2498=(cj5*r10);
IkReal x2499=(sj0*sj5);
IkReal x2500=((0.15)*r00);
IkReal x2501=((0.59)*sj3);
IkReal x2502=(cj0*r01);
IkReal x2503=(cj0*sj5);
IkReal x2504=(cj3*r22);
IkReal x2505=((1.0)*px);
IkReal x2506=(cj0*r20);
IkReal x2507=((0.05)*cj0);
IkReal x2508=(cj0*cj5);
IkReal x2509=(sj0*x2507);
IkReal x2510=((0.59)*cj0*cj4);
IkReal x2511=((0.71)*x2485);
IkReal x2512=((0.59)*cj4*sj0);
IkReal x2513=((0.71)*x2484);
IkReal x2514=((0.59)*cj5*x2497);
IkReal x2515=(cj0*x2513);
IkReal x2516=(sj0*x2515);
evalcond[0]=((((-1.0)*x2511))+(((-1.0)*cj5*x2492))+(((0.59)*cj4*r22))+((cj5*r21*x2494))+pz+((r21*x2489))+((r20*sj5*x2494)));
evalcond[1]=((((-1.0)*cj0*x2493))+(((-1.0)*x2509))+(((-1.0)*r10*x2494*x2503))+(((-1.0)*r12*x2510))+(((-1.0)*x2489*x2495))+(((-1.0)*x2487*x2513))+(((-1.0)*cj5*x2494*x2495))+(((0.15)*cj0*x2498)));
evalcond[2]=(x2509+((r02*x2512))+((r01*x2491*x2494))+((r00*x2494*x2499))+((r01*sj0*x2489))+(((-1.0)*x2486*x2513))+((px*sj0))+(((-1.0)*x2491*x2500)));
evalcond[3]=(((x2488*x2489))+(((-1.0)*r01*x2514))+((r01*sj3*x2496))+(((-1.0)*x2491*x2492))+(((-1.0)*sj0*x2511))+((pz*sj0))+(((-1.0)*r00*x2496*x2497))+((cj3*r02*x2494))+(((-1.0)*cj5*r00*x2501)));
evalcond[4]=(((cj0*x2511))+(((-1.0)*x2498*x2501))+((x2492*x2508))+((cj3*r12*x2494))+(((-1.0)*r11*x2514))+(((-1.0)*x2489*x2490))+((r11*sj3*x2496))+(((-1.0)*r10*x2496*x2497))+(((-1.0)*cj0*pz)));
evalcond[5]=(((cj5*x2501*x2506))+(((-1.0)*x2515))+(((-0.05)*sj0))+(((-1.0)*x2493))+(((-1.0)*cj0*x2494*x2504))+((x2490*x2514))+((x2496*x2497*x2506))+(((-1.0)*sj3*x2490*x2496))+(((-1.0)*r11*x2489))+(((0.15)*x2498)));
evalcond[6]=((((-1.0)*x2505))+(((-1.0)*x2507))+(((-1.0)*r20*x2491*x2501))+((cj5*x2500))+((sj0*x2494*x2504))+((sj0*x2513))+(((-1.0)*r20*sj0*x2496*x2497))+(((-1.0)*r01*x2489))+(((-1.0)*x2488*x2514))+((sj3*x2488*x2496)));
evalcond[7]=(x2516+(((-0.15)*r10*x2491))+((r11*sj0*x2489))+(((-1.0)*r00*x2494*x2503))+(((-1.0)*cj5*x2494*x2502))+((py*sj0))+(((-1.0)*r02*x2510))+(((0.05)*x2486)));
evalcond[8]=(x2516+(((-0.05)*x2487))+((x2500*x2508))+(((-1.0)*cj0*x2505))+((r10*x2494*x2499))+(((-1.0)*x2489*x2502))+((r11*x2491*x2494))+((r12*x2512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2517=(cj4*sj1);
IkReal x2518=(cj1*cj4);
IkReal x2519=(cj5*sj4);
IkReal x2520=((1.0)*cj1);
IkReal x2521=(sj4*sj5);
IkReal x2522=(sj1*x2521);
if( IKabs((((r01*sj1*x2519))+((r02*x2517))+((cj1*r20*x2521))+((r22*x2518))+((r00*x2522))+((cj1*r21*x2519)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x2519*x2520))+((r22*x2517))+((r21*sj1*x2519))+(((-1.0)*r00*x2520*x2521))+(((-1.0)*r02*x2518))+((r20*x2522)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj1*x2519))+((r02*x2517))+((cj1*r20*x2521))+((r22*x2518))+((r00*x2522))+((cj1*r21*x2519))))+IKsqr(((((-1.0)*r01*x2519*x2520))+((r22*x2517))+((r21*sj1*x2519))+(((-1.0)*r00*x2520*x2521))+(((-1.0)*r02*x2518))+((r20*x2522))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj1*x2519))+((r02*x2517))+((cj1*r20*x2521))+((r22*x2518))+((r00*x2522))+((cj1*r21*x2519))), ((((-1.0)*r01*x2519*x2520))+((r22*x2517))+((r21*sj1*x2519))+(((-1.0)*r00*x2520*x2521))+(((-1.0)*r02*x2518))+((r20*x2522))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2523=IKsin(j2);
IkReal x2524=IKcos(j2);
IkReal x2525=(cj3*sj4);
IkReal x2526=((1.0)*cj5);
IkReal x2527=(r21*sj5);
IkReal x2528=(cj3*cj4);
IkReal x2529=((0.15)*cj5);
IkReal x2530=((1.0)*sj5);
IkReal x2531=((1.0)*cj4);
IkReal x2532=(r01*sj5);
IkReal x2533=(sj1*x2523);
IkReal x2534=(cj1*x2523);
IkReal x2535=((0.59)*x2524);
IkReal x2536=((1.0)*x2524);
IkReal x2537=(cj1*x2536);
evalcond[0]=(x2534+(((-1.0)*r20*sj4*x2530))+((sj1*x2524))+(((-1.0)*r22*x2531))+(((-1.0)*r21*sj4*x2526)));
evalcond[1]=(x2533+(((-1.0)*r02*x2531))+(((-1.0)*x2537))+(((-1.0)*r00*sj4*x2530))+(((-1.0)*r01*sj4*x2526)));
evalcond[2]=((((0.71)*cj1))+(((-1.0)*sj1*x2535))+(((-1.0)*pz))+(((-0.59)*x2534))+((r20*x2529))+(((-0.15)*x2527)));
evalcond[3]=((((-0.15)*x2532))+((r00*x2529))+(((-1.0)*px))+(((-0.59)*x2533))+((cj1*x2535))+(((0.71)*sj1)));
evalcond[4]=(((r22*x2525))+x2533+(((-1.0)*r20*x2528*x2530))+(((-1.0)*x2537))+(((-1.0)*r20*sj3*x2526))+((sj3*x2527))+(((-1.0)*r21*x2526*x2528)));
evalcond[5]=(((sj3*x2532))+((r02*x2525))+(((-1.0)*sj1*x2536))+(((-1.0)*r01*x2526*x2528))+(((-1.0)*r00*x2528*x2530))+(((-1.0)*r00*sj3*x2526))+(((-1.0)*x2534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2538=(cj4*r22);
IkReal x2539=(cj5*sj4);
IkReal x2540=((1.0)*sj1);
IkReal x2541=(cj4*r02);
IkReal x2542=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x2539*x2540))+((cj1*r20*x2542))+(((-1.0)*r00*x2540*x2542))+((cj1*x2538))+((cj1*r21*x2539))+(((-1.0)*x2540*x2541)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x2542))+((cj1*r00*x2542))+((sj1*x2538))+((cj1*x2541))+((r21*sj1*x2539))+((cj1*r01*x2539)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2539*x2540))+((cj1*r20*x2542))+(((-1.0)*r00*x2540*x2542))+((cj1*x2538))+((cj1*r21*x2539))+(((-1.0)*x2540*x2541))))+IKsqr((((r20*sj1*x2542))+((cj1*r00*x2542))+((sj1*x2538))+((cj1*x2541))+((r21*sj1*x2539))+((cj1*r01*x2539))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x2539*x2540))+((cj1*r20*x2542))+(((-1.0)*r00*x2540*x2542))+((cj1*x2538))+((cj1*r21*x2539))+(((-1.0)*x2540*x2541))), (((r20*sj1*x2542))+((cj1*r00*x2542))+((sj1*x2538))+((cj1*x2541))+((r21*sj1*x2539))+((cj1*r01*x2539))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2543=IKcos(j2);
IkReal x2544=IKsin(j2);
IkReal x2545=(cj3*sj4);
IkReal x2546=((1.0)*cj5);
IkReal x2547=(r21*sj5);
IkReal x2548=((0.59)*sj1);
IkReal x2549=(cj3*cj4);
IkReal x2550=((0.15)*cj5);
IkReal x2551=((1.0)*sj5);
IkReal x2552=((1.0)*cj4);
IkReal x2553=(r01*sj5);
IkReal x2554=(sj1*x2543);
IkReal x2555=(cj1*x2544);
IkReal x2556=(cj1*x2543);
IkReal x2557=(sj1*x2544);
IkReal x2558=(x2554+x2555);
evalcond[0]=((((-1.0)*r20*sj4*x2551))+x2558+(((-1.0)*r22*x2552))+(((-1.0)*r21*sj4*x2546)));
evalcond[1]=(x2556+(((-1.0)*r00*sj4*x2551))+(((-1.0)*x2557))+(((-1.0)*r02*x2552))+(((-1.0)*r01*sj4*x2546)));
evalcond[2]=((((-0.59)*x2555))+(((0.71)*cj1))+(((-1.0)*x2543*x2548))+(((-1.0)*pz))+((r20*x2550))+(((-0.15)*x2547)));
evalcond[3]=((((-0.59)*x2556))+(((-0.71)*sj1))+(((-1.0)*px))+((r00*x2550))+(((-0.15)*x2553))+((x2544*x2548)));
evalcond[4]=(x2558+(((-1.0)*r00*x2549*x2551))+((sj3*x2553))+(((-1.0)*r00*sj3*x2546))+((r02*x2545))+(((-1.0)*r01*x2546*x2549)));
evalcond[5]=((((-1.0)*r20*x2549*x2551))+x2557+(((-1.0)*r20*sj3*x2546))+((sj3*x2547))+(((-1.0)*x2556))+(((-1.0)*r21*x2546*x2549))+((r22*x2545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2559=(cj5*sj4);
IkReal x2560=(cj1*cj4);
IkReal x2561=((1.0)*sj1);
IkReal x2562=(sj4*sj5);
if( IKabs((((cj1*r21*x2559))+((r22*x2560))+(((-1.0)*cj4*r12*x2561))+(((-1.0)*r10*x2561*x2562))+((cj1*r20*x2562))+(((-1.0)*r11*x2559*x2561)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x2562))+((cj1*r11*x2559))+((cj4*r22*sj1))+((cj1*r10*x2562))+((r12*x2560))+((r21*sj1*x2559)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r21*x2559))+((r22*x2560))+(((-1.0)*cj4*r12*x2561))+(((-1.0)*r10*x2561*x2562))+((cj1*r20*x2562))+(((-1.0)*r11*x2559*x2561))))+IKsqr((((r20*sj1*x2562))+((cj1*r11*x2559))+((cj4*r22*sj1))+((cj1*r10*x2562))+((r12*x2560))+((r21*sj1*x2559))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r21*x2559))+((r22*x2560))+(((-1.0)*cj4*r12*x2561))+(((-1.0)*r10*x2561*x2562))+((cj1*r20*x2562))+(((-1.0)*r11*x2559*x2561))), (((r20*sj1*x2562))+((cj1*r11*x2559))+((cj4*r22*sj1))+((cj1*r10*x2562))+((r12*x2560))+((r21*sj1*x2559))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2563=IKcos(j2);
IkReal x2564=IKsin(j2);
IkReal x2565=(r21*sj5);
IkReal x2566=((0.15)*cj5);
IkReal x2567=((0.59)*sj1);
IkReal x2568=(cj3*sj4);
IkReal x2569=(r11*sj5);
IkReal x2570=((1.0)*cj4);
IkReal x2571=(cj5*r21);
IkReal x2572=(cj3*sj5);
IkReal x2573=((1.0)*sj4);
IkReal x2574=(cj5*r11);
IkReal x2575=(sj1*x2563);
IkReal x2576=(cj1*x2564);
IkReal x2577=(cj1*x2563);
IkReal x2578=((1.0)*cj5*sj3);
IkReal x2579=(sj5*x2573);
IkReal x2580=(sj1*x2564);
IkReal x2581=(x2576+x2575);
evalcond[0]=(x2581+(((-1.0)*x2571*x2573))+(((-1.0)*r20*x2579))+(((-1.0)*r22*x2570)));
evalcond[1]=((((-1.0)*r10*x2579))+x2577+(((-1.0)*r12*x2570))+(((-1.0)*x2580))+(((-1.0)*x2573*x2574)));
evalcond[2]=((((-1.0)*x2563*x2567))+(((0.71)*cj1))+(((-0.15)*x2565))+((r20*x2566))+(((-1.0)*pz))+(((-0.59)*x2576)));
evalcond[3]=((((-0.15)*x2569))+((r10*x2566))+(((-0.71)*sj1))+(((-1.0)*py))+(((-0.59)*x2577))+((x2564*x2567)));
evalcond[4]=((((-1.0)*cj3*x2570*x2574))+(((-1.0)*r10*x2578))+x2581+((sj3*x2569))+(((-1.0)*r10*x2570*x2572))+((r12*x2568)));
evalcond[5]=((((-1.0)*cj3*x2570*x2571))+((r22*x2568))+x2580+((sj3*x2565))+(((-1.0)*x2577))+(((-1.0)*r20*x2578))+(((-1.0)*r20*x2570*x2572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2582=(cj4*r12);
IkReal x2583=((1.0)*cj1);
IkReal x2584=(cj4*r22);
IkReal x2585=(cj5*sj4);
IkReal x2586=(sj4*sj5);
if( IKabs((((cj1*x2584))+((cj1*r21*x2585))+((r11*sj1*x2585))+((r10*sj1*x2586))+((cj1*r20*x2586))+((sj1*x2582)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj1*x2585))+(((-1.0)*r11*x2583*x2585))+(((-1.0)*r10*x2583*x2586))+((sj1*x2584))+(((-1.0)*x2582*x2583))+((r20*sj1*x2586)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2584))+((cj1*r21*x2585))+((r11*sj1*x2585))+((r10*sj1*x2586))+((cj1*r20*x2586))+((sj1*x2582))))+IKsqr((((r21*sj1*x2585))+(((-1.0)*r11*x2583*x2585))+(((-1.0)*r10*x2583*x2586))+((sj1*x2584))+(((-1.0)*x2582*x2583))+((r20*sj1*x2586))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2584))+((cj1*r21*x2585))+((r11*sj1*x2585))+((r10*sj1*x2586))+((cj1*r20*x2586))+((sj1*x2582))), (((r21*sj1*x2585))+(((-1.0)*r11*x2583*x2585))+(((-1.0)*r10*x2583*x2586))+((sj1*x2584))+(((-1.0)*x2582*x2583))+((r20*sj1*x2586))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2587=IKsin(j2);
IkReal x2588=IKcos(j2);
IkReal x2589=(r21*sj5);
IkReal x2590=((0.15)*cj5);
IkReal x2591=((1.0)*cj4);
IkReal x2592=(cj5*r21);
IkReal x2593=(r11*sj5);
IkReal x2594=(cj3*sj5);
IkReal x2595=(cj3*sj4);
IkReal x2596=((1.0)*sj4);
IkReal x2597=(cj5*r11);
IkReal x2598=(sj1*x2587);
IkReal x2599=(cj1*x2587);
IkReal x2600=((1.0)*cj5*sj3);
IkReal x2601=((0.59)*x2588);
IkReal x2602=((1.0)*x2588);
IkReal x2603=(sj5*x2596);
IkReal x2604=(cj1*x2602);
evalcond[0]=(x2599+(((-1.0)*r22*x2591))+(((-1.0)*r20*x2603))+((sj1*x2588))+(((-1.0)*x2592*x2596)));
evalcond[1]=(x2598+(((-1.0)*r10*x2603))+(((-1.0)*x2596*x2597))+(((-1.0)*r12*x2591))+(((-1.0)*x2604)));
evalcond[2]=((((0.71)*cj1))+(((-0.15)*x2589))+(((-1.0)*sj1*x2601))+((r20*x2590))+(((-1.0)*pz))+(((-0.59)*x2599)));
evalcond[3]=((((-0.15)*x2593))+((r10*x2590))+((cj1*x2601))+(((-1.0)*py))+(((0.71)*sj1))+(((-0.59)*x2598)));
evalcond[4]=(((r22*x2595))+x2598+(((-1.0)*cj3*x2591*x2592))+((sj3*x2589))+(((-1.0)*r20*x2591*x2594))+(((-1.0)*r20*x2600))+(((-1.0)*x2604)));
evalcond[5]=((((-1.0)*cj3*x2591*x2597))+(((-1.0)*sj1*x2602))+(((-1.0)*r10*x2591*x2594))+(((-1.0)*x2599))+((sj3*x2593))+(((-1.0)*r10*x2600))+((r12*x2595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2605=(cj4*r12);
IkReal x2606=((1.0)*sj1);
IkReal x2607=(cj0*cj1);
IkReal x2608=(cj4*r22);
IkReal x2609=(cj0*sj1);
IkReal x2610=(sj4*sj5);
IkReal x2611=(cj5*r11*sj4);
IkReal x2612=(cj5*r21*sj4);
CheckValue<IkReal> x2613 = IKatan2WithCheck(IkReal(((((-1.0)*x2606*x2611))+((x2607*x2608))+((r20*x2607*x2610))+(((-1.0)*r10*x2606*x2610))+(((-1.0)*x2605*x2606))+((x2607*x2612)))),IkReal((((r20*x2609*x2610))+((cj1*r10*x2610))+((cj1*x2605))+((cj1*x2611))+((x2609*x2612))+((x2608*x2609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2613.valid){
continue;
}
CheckValue<IkReal> x2614=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2614.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2613.value)+(((1.5707963267949)*(x2614.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2615=IKsin(j2);
IkReal x2616=IKcos(j2);
IkReal x2617=(cj3*sj4);
IkReal x2618=(r21*sj5);
IkReal x2619=(sj0*sj1);
IkReal x2620=((1.0)*cj1);
IkReal x2621=((0.15)*cj5);
IkReal x2622=(cj0*sj1);
IkReal x2623=((1.0)*cj4);
IkReal x2624=(r11*sj5);
IkReal x2625=(cj3*sj5);
IkReal x2626=((0.59)*cj1);
IkReal x2627=(r01*sj5);
IkReal x2628=((0.59)*x2615);
IkReal x2629=((1.0)*cj5*sj3);
IkReal x2630=(sj1*x2616);
IkReal x2631=(cj1*x2615);
IkReal x2632=((1.0)*sj4*sj5);
IkReal x2633=(sj0*x2616);
IkReal x2634=((1.0)*cj5*sj4);
IkReal x2635=(cj0*x2616);
IkReal x2636=(cj3*cj5*x2623);
evalcond[0]=((((-1.0)*r21*x2634))+(((-1.0)*r20*x2632))+(((-1.0)*r22*x2623))+x2631+x2630);
evalcond[1]=((((0.71)*cj1))+((r20*x2621))+(((-0.59)*x2630))+(((-0.15)*x2618))+(((-1.0)*pz))+(((-1.0)*x2615*x2626)));
evalcond[2]=(((x2615*x2619))+(((-1.0)*r01*x2634))+(((-1.0)*r00*x2632))+(((-1.0)*x2620*x2633))+(((-1.0)*r02*x2623)));
evalcond[3]=(((cj1*x2635))+(((-1.0)*r10*x2632))+(((-1.0)*r12*x2623))+(((-1.0)*x2615*x2622))+(((-1.0)*r11*x2634)));
evalcond[4]=(((r00*x2621))+(((-1.0)*x2619*x2628))+(((-0.15)*x2627))+(((-1.0)*px))+(((-0.05)*cj0))+(((0.71)*x2619))+((x2626*x2633)));
evalcond[5]=((((-0.05)*sj0))+(((-0.15)*x2624))+(((-1.0)*py))+((x2622*x2628))+((r10*x2621))+(((-0.71)*x2622))+(((-1.0)*x2626*x2635)));
evalcond[6]=((((-1.0)*r20*x2623*x2625))+(((-1.0)*r21*x2636))+((r22*x2617))+((sj1*x2615))+(((-1.0)*x2616*x2620))+(((-1.0)*r20*x2629))+((sj3*x2618)));
evalcond[7]=(((sj3*x2624))+((cj0*x2631))+(((-1.0)*r10*x2623*x2625))+((x2616*x2622))+(((-1.0)*r10*x2629))+(((-1.0)*r11*x2636))+((r12*x2617)));
evalcond[8]=(((sj3*x2627))+(((-1.0)*r00*x2629))+(((-1.0)*r00*x2623*x2625))+(((-1.0)*sj0*x2615*x2620))+(((-1.0)*r01*x2636))+(((-1.0)*x2616*x2619))+((r02*x2617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2637=(sj1*sj4);
IkReal x2638=(cj5*r01);
IkReal x2639=(cj1*sj4);
IkReal x2640=(cj4*sj1);
IkReal x2641=(r22*sj0);
IkReal x2642=(r00*sj5);
IkReal x2643=(cj1*cj4);
IkReal x2644=(r20*sj0*sj5);
IkReal x2645=(cj5*r21*sj0);
CheckValue<IkReal> x2646=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2646.valid){
continue;
}
CheckValue<IkReal> x2647 = IKatan2WithCheck(IkReal((((x2639*x2645))+((x2639*x2644))+((r02*x2640))+((x2637*x2638))+((x2637*x2642))+((x2641*x2643)))),IkReal((((x2640*x2641))+(((-1.0)*r02*x2643))+((x2637*x2645))+((x2637*x2644))+(((-1.0)*x2638*x2639))+(((-1.0)*x2639*x2642)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2647.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2646.value)))+(x2647.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2648=IKsin(j2);
IkReal x2649=IKcos(j2);
IkReal x2650=(cj3*sj4);
IkReal x2651=(r21*sj5);
IkReal x2652=(sj0*sj1);
IkReal x2653=((1.0)*cj1);
IkReal x2654=((0.15)*cj5);
IkReal x2655=(cj0*sj1);
IkReal x2656=((1.0)*cj4);
IkReal x2657=(r11*sj5);
IkReal x2658=(cj3*sj5);
IkReal x2659=((0.59)*cj1);
IkReal x2660=(r01*sj5);
IkReal x2661=((0.59)*x2648);
IkReal x2662=((1.0)*cj5*sj3);
IkReal x2663=(sj1*x2649);
IkReal x2664=(cj1*x2648);
IkReal x2665=((1.0)*sj4*sj5);
IkReal x2666=(sj0*x2649);
IkReal x2667=((1.0)*cj5*sj4);
IkReal x2668=(cj0*x2649);
IkReal x2669=(cj3*cj5*x2656);
evalcond[0]=((((-1.0)*r22*x2656))+(((-1.0)*r20*x2665))+(((-1.0)*r21*x2667))+x2664+x2663);
evalcond[1]=((((0.71)*cj1))+(((-0.15)*x2651))+(((-1.0)*pz))+(((-0.59)*x2663))+(((-1.0)*x2648*x2659))+((r20*x2654)));
evalcond[2]=((((-1.0)*x2653*x2666))+(((-1.0)*r00*x2665))+((x2648*x2652))+(((-1.0)*r02*x2656))+(((-1.0)*r01*x2667)));
evalcond[3]=((((-1.0)*r11*x2667))+(((-1.0)*r12*x2656))+((cj1*x2668))+(((-1.0)*x2648*x2655))+(((-1.0)*r10*x2665)));
evalcond[4]=((((-1.0)*x2652*x2661))+((x2659*x2666))+(((0.71)*x2652))+(((-1.0)*px))+((r00*x2654))+(((-0.15)*x2660))+(((-0.05)*cj0)));
evalcond[5]=((((-0.05)*sj0))+((r10*x2654))+((x2655*x2661))+(((-0.15)*x2657))+(((-1.0)*py))+(((-1.0)*x2659*x2668))+(((-0.71)*x2655)));
evalcond[6]=((((-1.0)*r20*x2656*x2658))+((r22*x2650))+(((-1.0)*r20*x2662))+(((-1.0)*r21*x2669))+(((-1.0)*x2649*x2653))+((sj3*x2651))+((sj1*x2648)));
evalcond[7]=(((r12*x2650))+((x2649*x2655))+(((-1.0)*r11*x2669))+((cj0*x2664))+(((-1.0)*r10*x2656*x2658))+((sj3*x2657))+(((-1.0)*r10*x2662)));
evalcond[8]=((((-1.0)*r00*x2662))+(((-1.0)*r01*x2669))+(((-1.0)*sj0*x2648*x2653))+((r02*x2650))+(((-1.0)*r00*x2656*x2658))+(((-1.0)*x2649*x2652))+((sj3*x2660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "1fbb13a866d60544304864ff4a9c9148"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
